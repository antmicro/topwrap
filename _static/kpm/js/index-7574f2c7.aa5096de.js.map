{"version":3,"file":"js/index-7574f2c7.aa5096de.js","mappings":"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","sources":["webpack://pipeline-manager/./src/custom/Editor.js","webpack://pipeline-manager/./src/custom/CustomGraph.js","webpack://pipeline-manager/./src/custom/CustomGraphNode.js","webpack://pipeline-manager/./src/custom/CustomInterface.vue","webpack://pipeline-manager/./src/custom/CustomInterface.vue?418c","webpack://pipeline-manager/./src/custom/LinkMenu.vue","webpack://pipeline-manager/./src/custom/LinkMenu.vue?8fc7","webpack://pipeline-manager/./src/custom/CustomSidebar.vue","webpack://pipeline-manager/./src/custom/CustomSidebar.vue?9ce8","webpack://pipeline-manager/./src/custom/CustomNode.js","webpack://pipeline-manager/./src/custom/Editor.vue","webpack://pipeline-manager/./src/custom/ContextMenu.vue","webpack://pipeline-manager/./src/custom/ContextMenu.vue?2c86","webpack://pipeline-manager/./src/custom/CustomNode.vue","webpack://pipeline-manager/./src/custom/CustomNode.vue?145c","webpack://pipeline-manager/./src/custom/Editor.vue?366e"],"sourcesContent":["/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n *\n */\n\n/*\n * Custom pipeline editor - Implements logic for adding, removing, editing nodes and\n * connections between them.\n * Inherits from baklavajs/core/src/editor.ts\n */\n\n/* eslint-disable max-classes-per-file */\n\nimport { Editor, Graph } from '@baklavajs/core';\n\nimport { useGraph } from '@baklavajs/renderer-vue';\n\nimport { nextTick } from 'vue';\nimport createPipelineManagerGraph from './CustomGraph.js';\nimport LayoutManager from '../core/LayoutManager.js';\nimport { suppressHistoryLogging } from '../core/History.ts';\nimport CreateCustomGraphNodeType from './CustomGraphNode.js';\nimport { ir } from '../core/interfaceRegistry.ts';\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-underscore-dangle */\nexport default class PipelineManagerEditor extends Editor {\n    preview = false;\n\n    _hideHud = false;\n\n    get hideHud() {\n        return this._hideHud || this.preview;\n    }\n\n    set hideHud(val) {\n        this._hideHud = val;\n    }\n\n    _readonly = false;\n\n    get readonly() {\n        return this._readonly || this.preview;\n    }\n\n    set readonly(val) {\n        this._readonly = val;\n    }\n\n    allowLoopbacks = false;\n\n    nodeIcons = new Map();\n\n    nodeColors = new Map();\n\n    baseURLs = new Map();\n\n    baseIconUrls = new Map();\n\n    nodeURLs = new Map();\n\n    nodeStyles = new Map();\n\n    layoutManager = new LayoutManager();\n\n    subgraphStack = [];\n\n    parentNodes = new Map();\n\n    subgraphStackGraphTypeEnum = {\n        SUBGRAPH: 'subgraph',\n        RELATEDGRAPH: 'relatedGraph',\n    };\n\n    editorManager = null;\n\n    newRootGraph = undefined;\n\n    registerGraph(graph) {\n        const customGraph = createPipelineManagerGraph(graph);\n        super.registerGraph(customGraph);\n    }\n\n    /**\n     * Saves the state (nodes, connections, layout) of the current graph and its subgraphs.\n     * @return {Object} State of the current graph and its subgraphs.\n     * @throws {Error} Throws if there are issues switching to a subgraph.\n     */\n    save() {\n        const subgraphStackFrames = [];\n        while (this.isInSubgraph()) {\n            if (this._graph.graphNode === undefined) {\n                subgraphStackFrames.push({\n                    type: this.subgraphStackGraphTypeEnum.RELATEDGRAPH,\n                    frame: this._graph.id,\n                });\n            } else {\n                subgraphStackFrames.push({\n                    type: this.subgraphStackGraphTypeEnum.SUBGRAPH,\n                    frame: this._graph.graphNode,\n                });\n            }\n            this.backFromSubgraph();\n        }\n\n        // Save all changes done to subgraphs before saving.\n        let currentGraphId = this._graph.id;\n        let currentGraphState = this.graph.save();\n        currentGraphState.panning = this._graph.panning;\n        currentGraphState.scaling = this._graph.scaling;\n\n        if (this.newRootGraph !== undefined) {\n            currentGraphId = this.newRootGraph.id;\n            currentGraphState = this.newRootGraph.save();\n        }\n\n        const dataflowState = { graphs: [] };\n\n        // Subgraphs are stored in state.subgraphs; there is no need to store it\n        // in nodes themselves.\n        const recurrentSubgraphSave = (node) => {\n            if (node.subgraph !== undefined) {\n                dataflowState.graphs.push(node.graphState);\n                node.graphState.nodes.forEach(recurrentSubgraphSave);\n            }\n            delete node.graphState;\n        };\n        currentGraphState.nodes.forEach(recurrentSubgraphSave);\n        this.nodeTypes.forEach((node, _) => {\n            node.relatedGraphs?.forEach(({ id }) => {\n                const graphObject = Array.from(this.graphs).find((el) => id === el.id);\n                if (graphObject && !dataflowState.graphs.find((el) => el.id === graphObject.id)) {\n                    dataflowState.graphs.push(graphObject.save());\n                }\n            });\n        });\n\n        currentGraphState.nodes.forEach((node) => {\n            node.color = this.getNodeColor(node);\n        });\n\n        /* eslint-enable no-unused-vars */\n        if (dataflowState.graphs.length) {\n            dataflowState.entryGraph = currentGraphId;\n        }\n\n        dataflowState.graphs = [currentGraphState, ...dataflowState.graphs];\n\n        subgraphStackFrames.reverse().forEach(({ frame, type }) => {\n            switch (type) {\n                case this.subgraphStackGraphTypeEnum.RELATEDGRAPH:\n                    this.switchToRelatedGraph(frame);\n                    break;\n                case this.subgraphStackGraphTypeEnum.SUBGRAPH:\n                    this.switchToSubgraph(frame);\n                    break;\n                default:\n                    break;\n            }\n        });\n\n        return dataflowState;\n    }\n\n    /**\n     * Cleans all graphs in the editor.\n     * @param Determines whether the cleaning process should be stored in history\n     */\n    deepCleanEditor(suppressHistory = true) {\n        this.subgraphStack.forEach(this.backFromSubgraph.bind(this));\n        this.cleanEditor(suppressHistory);\n        this.graphName = undefined;\n    }\n\n    /**\n     * Cleans up the current graph current graph editor.\n     * @param {bool} suppressHistory Determines whether the cleaning process should\n     * be stored in history.\n     */\n    cleanEditor(suppressHistory = true) {\n        while (this.isInSubgraph()) {\n            this.backFromSubgraph();\n        }\n        const graphInstance = this._graph;\n\n        suppressHistoryLogging(suppressHistory);\n        for (let i = graphInstance.connections.length - 1; i >= 0; i -= 1) {\n            graphInstance.removeConnection(graphInstance.connections[i]);\n        }\n        for (let i = graphInstance.nodes.length - 1; i >= 0; i -= 1) {\n            graphInstance.removeNode(graphInstance.nodes[i]);\n        }\n        suppressHistoryLogging(false);\n    }\n\n    unregisterGraphs() {\n        [...this.graphs]\n            .filter((graph) => graph.id !== this._graph.id)\n            .forEach((graph) => this.unregisterGraph(graph));\n        this.subgraphStack = [];\n    }\n\n    unregisterNodes() {\n        this.nodeTypes.forEach((_, nodeKey) => {\n            this.unregisterNodeType(nodeKey);\n        });\n    }\n\n    registerNodeType(type, options) {\n        if (this.events.beforeRegisterNodeType.emit({ type, options }).prevented) {\n            return;\n        }\n\n        const nodeInstance = new type(); // eslint-disable-line new-cap\n        this._nodeTypes.set(nodeInstance.type, {\n            type,\n            category: options?.category ?? 'default',\n            title: options?.title ?? nodeInstance.title,\n            isCategory: options?.isCategory ?? false,\n            color: options?.color,\n            subgraphId: options?.subgraphId,\n            relatedGraphs: options?.relatedGraphs,\n            style: options?.style,\n            pill: options?.pill,\n        });\n\n        this.events.registerNodeType.emit({ type, options });\n    }\n\n    /**\n     * Loads the dataflow into the editor.\n     *\n     * @param state dataflow to load\n     * @param {bool} preventCentering determines whether to center the graph after loading\n     * @param {bool} loadOnly determines whether to load the graph only without adjusting\n     * the graph rendering. Can be used when validating graphs without their browser\n     * representation.\n     * @param templateName {string|null} name of the template, if the graph is a template\n     * @returns list of errors that occurred during loading\n     */\n    async load(\n        state, preventCentering = false, loadOnly = false, templateName = null,\n    ) {\n        // All subgraphs should be unregistered to avoid conflicts later when trying to\n        // load into subgraph (in that case there may be two subgraphs with the same ID, one\n        // of them from the previous session).\n        this.unregisterGraphs();\n        ir.clearRegistry();\n\n        // Load the node state as it is, wait until vue renders new nodes so that\n        // node dimensions can be retrieved from DOM elements and then update the\n        // location based on autolayout results. The editor is set to readonly\n        // during loading to prevent any changes that may happen between graph load\n        // and layout computation\n        const readonlySetting = this.readonly;\n        this.readonly = true;\n        const errors = [];\n\n        if (!state.graphs.length) {\n            return ['No graphs found'];\n        }\n\n        let entryGraph;\n        if (state.entryGraph) {\n            entryGraph = state.graphs.find(\n                (graph) => graph.id === state.entryGraph,\n            );\n\n            if (!entryGraph) {\n                return [`No entry graph found of id '${state.entryGraph}'`];\n            }\n        } else {\n            entryGraph = state.graphs[0]; // eslint-disable-line prefer-destructuring\n        }\n        const { panning, scaling } = entryGraph;\n\n        const usedSubgraphs = new Set();\n\n        this.nodeColors.clear();\n        state.graphs.forEach((graph) => {\n            graph.nodes.forEach((n) => {\n                if (n.subgraph !== undefined) {\n                    const fittingTemplate = state.graphs.filter(\n                        (template) => template.id === n.subgraph,\n                    );\n                    if (fittingTemplate.length !== 1) {\n                        errors.push([`Expected exactly one template with ID ${n.name}, got ${fittingTemplate.length}`]);\n                    }\n                    if (usedSubgraphs.has(n.subgraph) && templateName === null) {\n                        errors.push([`Subgraph ${n.subgraph} has multiple nodes pointing to it - only unique IDs are allowed`]);\n                    }\n                    usedSubgraphs.add(n.subgraph);\n                    [n.graphState] = fittingTemplate;\n                }\n                n.relatedGraphs\n                    ?.filter(({ id }) => state.graphs.find((el) => el.id === id) === undefined)\n                    .forEach(({ id }) => errors.push([`The related graph of id ${id} is not defined`]));\n                this.setNodeColor(n.id, n.color);\n            });\n        });\n\n        try {\n            if (errors.length) return errors;\n\n            state.graphs?.forEach((graph) => {\n                if (!usedSubgraphs.has(graph.id) && entryGraph.id !== graph.id) {\n                    const graphObject = new Graph(this);\n                    errors.push(...graphObject.load(graph));\n                    this.registerGraph(graphObject);\n                }\n            });\n\n            if (!errors.length) {\n                let graphToLoad;\n                if (!templateName) {\n                    state = this.hooks.load.execute(state);\n                    graphToLoad = entryGraph;\n                } else {\n                    // eslint-disable-next-line new-cap\n                    const graphNode = new (this._nodeTypes.get(templateName)).type();\n                    const {\n                        state: preparedSubgraphState, errors: prepareSubgraphErrors,\n                    } = graphNode.prepareSubgraphInstance();\n                    errors.push(...prepareSubgraphErrors);\n                    graphToLoad = preparedSubgraphState;\n                }\n                if (!errors.length) errors.push(...this._graph.load(graphToLoad));\n            }\n        } catch (err) {\n            // If anything goes wrong during dataflow loading, the editor is cleaned and an\n            // appropriate error is returned.\n            this.cleanEditor();\n            this.readonly = readonlySetting;\n            return [err.toString()];\n        }\n        if (Array.isArray(errors) && errors.length && process.env.VUE_APP_GRAPH_DEVELOPMENT_MODE !== 'true') {\n            this.cleanEditor();\n            this.readonly = readonlySetting;\n            return errors;\n        }\n        this.events.loaded.emit();\n        this.graphName = entryGraph.name;\n        this.readonly = readonlySetting;\n\n        // If the editor is run outside of a browser, then\n        // all functionality that is after this line will fail,\n        // as it changes the way the graph is rendered in the browser\n        if (typeof window === 'undefined' || loadOnly) return errors;\n\n        const dfs = (subgraph, path) => {\n            if (subgraph?.nodes !== undefined) {\n                for (let i = 0; i < subgraph.nodes.length; i += 1) {\n                    if (subgraph.nodes[i].subgraph !== undefined) {\n                        if (subgraph.nodes[i].subgraph.id === entryGraph.id) {\n                            return [...path, subgraph.nodes[i]];\n                        }\n                        const returnedPath = dfs(\n                            subgraph.nodes[i].subgraph,\n                            [...path, subgraph.nodes[i]],\n                        );\n                        if (returnedPath.length) {\n                            return returnedPath;\n                        }\n                    }\n                }\n            }\n            return [];\n        };\n\n        // Finding a path to the defined entry and switching to it sequentially\n        const path = dfs(this._graph, []);\n\n        try {\n            path.forEach((node) => {\n                this.switchToSubgraph(node);\n            });\n        } catch (err) {\n            errors.push(err.toString());\n        }\n\n        if (this.layoutManager.layoutEngine.activeAlgorithm !== 'NoLayout') {\n            await nextTick();\n            await this.applyAutolayout(false);\n        }\n\n        // We need graph switched and sidebar rendered for autozoom\n        await nextTick();\n        if (panning !== undefined) {\n            this._graph.panning = panning;\n        }\n        if (scaling !== undefined) {\n            this._graph.scaling = scaling;\n        }\n        if (!preventCentering && scaling === undefined && panning === undefined) {\n            this.centerZoom();\n        }\n        return errors;\n    }\n\n    privatizeInterface(graphId, intf) {\n        if (intf.externalName === undefined) return;\n\n        let graph = [...this.graphs].find((g) => g.id === graphId);\n        let graphNode = graph.graphNode; // eslint-disable-line prefer-destructuring\n\n        intf.externalName = undefined;\n        if (graphNode === undefined) return;\n\n        const { graphIds, sharedInterface } = ir.getRegisteredInterface(intf.id);\n        const graphIdIdx = graphIds.findIndex((id) => id === graphNode.graph.id);\n        graphIds.splice(graphIdIdx, graphIds.length - graphIdIdx);\n\n        graphNode.updateExposedInterfaces(undefined, undefined, true);\n\n        // Update all graphs that used this exposed interface\n        for (let i = graphIdIdx + 1; i < graphIds.length; i += 1) {\n            graph = [...this.graphs].find((g) => g.id === graphIds[graphIdIdx]);\n            graphNode = graph.graphNode; // eslint-disable-line prefer-destructuring\n            graphNode.updateExposedInterfaces(undefined, undefined, true);\n        }\n\n        // If sharedInterface is the same as the interface that is privatized, it means\n        // that the interface is not shared anymore and its entry should be deleted.\n        if (sharedInterface === intf) {\n            ir.deleteRegisteredInterface(intf.id);\n        }\n    }\n\n    /**\n     * Exposes passed interface under the `name` name. The node that has the interface has to\n     * be in the graph with the `graphId` ID.\n     *\n     * @param {string} graphId graph which has the node with the interface\n     * @param {Object} intf interface to expose\n     * @param {string} name name under which the interface will be exposed. If set to `undefined`,\n     * external name will be inferred from the name of the interface.\n     */\n    exposeInterface(graphId, intf, name = undefined) {\n        const graph = [...this.graphs].find((g) => g.id === graphId);\n        const graphNode = graph.graphNode; // eslint-disable-line prefer-destructuring\n        intf.externalName = name ?? graph.resolveNewExposedName(intf.name);\n        if (graphNode === undefined) return;\n        // After changing the external name, the interface has to be updated in the\n        // graph node to reflect the changes in the graph.\n        graphNode.updateExposedInterfaces();\n    }\n\n    /**\n     * Calculates the width, height of the editor and the width of the sidebar.\n     * It is assumed that the view is rendered in the browser,\n     * otherwise an error will be thrown.\n     *\n     * @returns {Object} object with calculated sizes\n     */\n    static editorSize() {\n        if (typeof document === 'undefined') {\n            throw new Error('The editor is in browserless mode. Cannot obtain editor size.');\n        }\n\n        const terminalHeight =\n            document.getElementsByClassName('terminal-wrapper')[0]?.offsetHeight ?? 0;\n        const navbarHeight = document.getElementsByClassName('wrapper')[0]?.offsetHeight ?? 0;\n        const nodePalette = document.getElementsByClassName('baklava-node-palette');\n        let sideBarWidth = 0;\n        if (nodePalette.length !== 0) {\n            const paletteRect = nodePalette[0].getBoundingClientRect();\n            sideBarWidth = Math.max(paletteRect.right, 0);\n        }\n\n        const editorHeight = window.innerHeight - terminalHeight - navbarHeight;\n        const editorWidth = window.innerWidth - sideBarWidth;\n\n        return {\n            editorWidth,\n            editorHeight,\n            sideBarWidth,\n        };\n    }\n\n    /**\n     * Centers the currently displayed graph in the editor.\n     * The function calculates the scaling and panning values to center the graph\n     * in the editor and sets them in the graph.\n     * The function assumes that the editor is rendered in the browser,\n     * otherwise an error will be thrown.\n     */\n    centerZoom() {\n        if (!Array.isArray(this._graph.nodes) || this._graph.nodes.length === 0) return;\n        if (typeof document === 'undefined') {\n            throw new Error('The editor is in browserless mode. Cannot obtain editor size.');\n        }\n\n        const {\n            editorWidth,\n            editorHeight,\n            sideBarWidth,\n        } = PipelineManagerEditor.editorSize();\n\n        const {\n            graphHeight,\n            graphWidth,\n            leftmostX,\n            topmostY,\n        } = this._graph.size();\n\n        const margin = 100;\n\n        const scalingY = editorHeight / (graphHeight + 2 * margin);\n        const scalingX = editorWidth / (graphWidth + 2 * margin);\n\n        if (scalingX > scalingY) {\n            const graphCenter = (graphWidth + 2 * margin) / 2;\n            const editorCenter = (editorWidth / 2) * (1 / scalingY);\n\n            const translationX = editorCenter - graphCenter;\n\n            this._graph.panning = {\n                x: -(leftmostX - margin - translationX - sideBarWidth / scalingY),\n                y: -(topmostY - margin),\n            };\n            this._graph.scaling = scalingY;\n        } else {\n            const graphCenter = (graphHeight + 2 * margin) / 2;\n            const editorCenter = (editorHeight / 2) * (1 / scalingX);\n\n            const translationY = editorCenter - graphCenter;\n\n            this._graph.panning = {\n                x: -(leftmostX - margin - sideBarWidth / scalingX),\n                y: -(topmostY - margin - translationY),\n            };\n            this._graph.scaling = scalingX;\n        }\n    }\n\n    nodeURLsEmpty() {\n        return this.nodeURLs.size === 0;\n    }\n\n    getNodeURLs(nodeName) {\n        const urls = this.nodeURLs.get(nodeName) || {};\n\n        const fullUrls = [];\n        Object.entries(urls).forEach(([urlName, url]) => {\n            const t = { ...this.baseURLs.get(urlName) };\n            t.url += url;\n            fullUrls.push(t);\n        });\n\n        return fullUrls;\n    }\n\n    getNodeIconPath(nodeName) {\n        return this.nodeIcons.get(nodeName) || undefined;\n    }\n\n    getPillText(nodeName) {\n        const nodeType = this.nodeTypes.get(nodeName);\n        if (nodeType?.pill !== undefined) return nodeType.pill?.text;\n        if (nodeType?.style !== undefined) return this.getNodeStyle(nodeType.style)?.pill?.text;\n        return undefined;\n    }\n\n    getNodeCategory(nodeName) {\n        return this.nodeTypes.get(nodeName).category || undefined;\n    }\n\n    getNodeColor(node) {\n        const nodeColor = this.nodeColors.get(node.id);\n        if (nodeColor !== undefined) return nodeColor;\n\n        const nodeType = this.nodeTypes.get(node.type);\n        if (nodeType?.color !== undefined) return nodeType.color;\n        if (nodeType?.style !== undefined) return this.getNodeStyle(nodeType.style)?.color;\n        return undefined;\n    }\n\n    setNodeColor(nodeId, color) {\n        if (color !== undefined) {\n            this.nodeColors.set(nodeId, color);\n        }\n    }\n\n    getStyleIcon(nodeName) {\n        const nodeType = this.nodeTypes.get(nodeName);\n        if (nodeType?.style !== undefined) return this.getNodeStyle(nodeType.style)?.icon;\n        return undefined;\n    }\n\n    getNodeStyle(style) {\n        if (!Array.isArray(style)) {\n            style = [style];\n        }\n\n        return Object.assign({}, ...style\n            .map((styleName) => this.nodeStyles.get(styleName))\n            .filter((value) => value !== undefined));\n    }\n\n    getPillColor(nodeName) {\n        const nodeType = this.nodeTypes.get(nodeName);\n        const pill = nodeType?.pill !== undefined\n            ? nodeType.pill\n            : this.getNodeStyle(nodeType.style).pill;\n        if (pill !== undefined) return pill.color ?? '#ffffff';\n        return undefined;\n    }\n\n    /* eslint-disable class-methods-use-this */\n    getTextColor(color) {\n        if (!color) {\n            return 'white';\n        }\n        // calculate lightness\n        const rgb = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);\n        const r = parseInt(rgb[1], 16) / 255;\n        const g = parseInt(rgb[2], 16) / 255;\n        const b = parseInt(rgb[3], 16) / 255;\n        const lightness = (Math.max(r, g, b) + Math.min(r, g, b)) / 2;\n\n        if (lightness > 0.5) {\n            return 'black';\n        }\n\n        return 'white';\n    }\n\n    isGraphNode(nodeName) {\n        if (!this.nodeTypes.has(nodeName)) return false;\n        return this.nodeTypes.get(nodeName).subgraphId !== undefined;\n    }\n\n    nodeHasRelatedGraphs(node) {\n        return (node.relatedGraphs ?? this.nodeTypes.get(node.type)?.relatedGraphs) !== undefined;\n    }\n\n    addGraphTemplate(template, graphNode) {\n        if (this.events.beforeAddGraphTemplate.emit(template).prevented) {\n            return;\n        }\n        this._graphTemplates.push(template);\n        this.graphTemplateEvents.addTarget(template.events);\n        this.graphTemplateHooks.addTarget(template.hooks);\n\n        const customGraphNodeType = CreateCustomGraphNodeType(template, graphNode);\n        this.registerNodeType(customGraphNodeType, {\n            category: graphNode.category,\n            title: graphNode.title,\n            isCategory: graphNode.isCategory,\n            color: graphNode.color,\n            style: graphNode.style,\n            pill: graphNode.pill,\n            subgraphId: graphNode.subgraphId,\n            relatedGraphs: graphNode?.relatedGraphs,\n        });\n\n        this.events.addGraphTemplate.emit(template);\n    }\n\n    switchGraph(subgraphNode) {\n        if (this._switchGraph === undefined) {\n            const { switchGraph } = useGraph();\n            this._switchGraph = switchGraph;\n        }\n        // disable history logging for the switch - don't push nodes being created here\n        suppressHistoryLogging(true);\n\n        if (subgraphNode.subgraph === undefined) {\n            throw Error(\n                `Node \"${subgraphNode.name}\" does contain a subgraph.`,\n            );\n        }\n        this._graph = subgraphNode.subgraph;\n        this._switchGraph(subgraphNode.subgraph);\n        this.graphName = this._graph.name;\n\n        suppressHistoryLogging(false);\n        nextTick().then(() => {\n            const graph = this.graph.save();\n            this.layoutManager.registerGraph(graph);\n            this.layoutManager\n                .computeLayout(graph)\n                .then(this.updateNodesPosition.bind(this))\n                .then(() => {\n                    nextTick().then(() => {\n                        if (\n                            !this._graph.wasCentered\n                        ) {\n                            this.centerZoom();\n                            this._graph.wasCentered = true;\n                        }\n                    });\n                });\n        });\n    }\n\n    /**\n    * Switch to a subgraph by obtaining the current graph from the subgraph node\n    * and pushing the subgraph node to the stack.\n    *\n    * @param {Node} subgraphNode A subgraph node containing a subgraph,\n    * to which a layout should be switched.\n    * */\n    switchToSubgraph(subgraphNode) {\n        if (subgraphNode && subgraphNode.subgraph) {\n            this.subgraphStack.push(subgraphNode.graph);\n            this.switchGraph(subgraphNode);\n        }\n    }\n\n    /**\n    * Switch to a given graph object.\n    *\n    * @param {object} targetGraph A graph object to which the layout should be switched\n    * @param {bool} subgraphStack Determines whether the graph should be added to subgraph stack\n    * */\n    switchToGraph(targetGraph, subgraphStack = false) {\n        if (!targetGraph) return;\n\n        if (this._switchGraph === undefined) {\n            const { switchGraph } = useGraph();\n            this._switchGraph = switchGraph;\n        }\n        // disable history logging for the switch - don't push nodes being created here\n        suppressHistoryLogging(true);\n\n        if (subgraphStack) {\n            this.subgraphStack.push(this._graph);\n        } else if (this.subgraphStack.length > 0) {\n            this.subgraphStack.pop();\n        }\n        this._graph = targetGraph;\n        this._switchGraph(this._graph);\n        this.graphName = this._graph.name;\n\n        nextTick().then(() => {\n            const graph = this.graph.save();\n            this.layoutManager.registerGraph(graph);\n            this.layoutManager\n                .computeLayout(graph)\n                .then(this.updateNodesPosition.bind(this))\n                .then(() => {\n                    nextTick().then(() => {\n                        if (\n                            !this._graph.wasCentered\n                        ) {\n                            this.centerZoom();\n                            this._graph.wasCentered = true;\n                        }\n                    });\n                });\n        });\n\n        suppressHistoryLogging(false);\n    }\n\n    /**\n    * Switch to a related by matching the ID to a loaded graph instancce\n    * and pushing the current graph to the stack.\n    *\n    * @param {relatedGraphID} An ID of the graph, to which a layout should be switched.\n    * */\n    switchToRelatedGraph(relatedGraphID) {\n        const relatedGraph = Array.from(this.graphs).find((item) => item.id === relatedGraphID);\n        this.switchToGraph(relatedGraph, true);\n    }\n\n    /**\n     * Switches back from a displayed graph.\n     * The function changes the currently displayed graph and propagates changes in interfaces\n     * back to the graph node.\n     *\n     * It also updates the graph node's interfaces to match the ones in the graph.\n     * It checks for existing interface nodes, checks which were added, removed and changed\n     * and updates the graph node's interfaces accordingly.\n     */\n    backFromSubgraph() {\n        const newGraph = this.subgraphStack.pop(); // eslint-disable-line no-unused-vars\n\n        suppressHistoryLogging(true);\n\n        this._graph = newGraph;\n        this._switchGraph(this._graph);\n        this.graphName = this._graph.name;\n\n        suppressHistoryLogging(false);\n    }\n\n    /**\n    * Changes top level graph to one of the other graphs in the editor.\n    *\n    * @param {string} graphId ID of the new top level graph.\n    * */\n    changeTopLevelGraph(graphId) {\n        const rootGraph = Array.from(this.graphs).find((graph) => graph.id === graphId);\n        this.newRootGraph = rootGraph;\n    }\n\n    findInterface(intfId) {\n        for (let i = 0; i < this.graph.nodes.length; i += 1) {\n            const foundIntf = Object.values(this.graph.nodes[i].inputs).concat(\n                Object.values(this.graph.nodes[i].outputs),\n            ).find(\n                (intf) => intf.id === intfId,\n            );\n            if (foundIntf) return foundIntf;\n        }\n        return null;\n    }\n\n    unwrapSubgraph(node) {\n        const subgraphNodes = Object.values(node.subgraph._nodes);\n        // Calculate center point of subgraph nodes\n        const meanX = subgraphNodes.map((n) => n.position.x).reduce(\n            (sum, value) => sum + value, 0,\n        ) / subgraphNodes.length;\n        const meanY = subgraphNodes.map((n) => n.position.y).reduce(\n            (sum, value) => sum + value, 0,\n        ) / subgraphNodes.length;\n        // Remove selections\n        this.graph.selectedNodes = [];\n        // Create, reposition and select subgraph nodes\n        subgraphNodes.forEach((subgraphNode) => {\n            const state = subgraphNode.save();\n            const addedNode = this.graph.addNode(subgraphNode);\n            if (addedNode) {\n                // Set position relative to removed node\n                addedNode.position.x += node.position.x - meanX;\n                addedNode.position.y += node.position.y - meanY;\n                this.graph.selectedNodes.push(addedNode);\n                // Reset connections count\n                Object.values(addedNode.inputs).concat(\n                    Object.values(addedNode.outputs),\n                ).forEach(\n                    (intf) => { intf.connectionCount = 0; },\n                );\n                addedNode.load(state);\n            }\n        });\n\n        const subgraphNodeConnections = this.graph.connections.filter(\n            (c) => c.from.nodeId === node.id || c.to.nodeId === node.id,\n        );\n        this.graph.removeNode(node);\n        Object.values(node.subgraph.connections).concat(\n            subgraphNodeConnections,\n        ).forEach((connection) => {\n            if (connection.from.name === 'Connection' || connection.to.name === 'Connection') { return; }\n\n            // Finding interfaces in newly added nodes that correspond to the ones in the connection\n            const fromInterface = this.findInterface(connection.from.id);\n            const toInterface = this.findInterface(connection.to.id);\n\n            if (fromInterface && toInterface) {\n                const createdConnection = this.graph.addConnection(fromInterface, toInterface);\n                (connection.anchors ?? []).forEach((anchor, index) => {\n                    let newAnchor;\n                    // Only anchors from within the graph node should be shifted\n                    if (node.subgraph.connections.includes(connection)) {\n                        newAnchor = {\n                            x: anchor.x + node.position.x - meanX,\n                            y: anchor.y + node.position.y - meanY,\n                        };\n                    } else {\n                        newAnchor = {\n                            x: anchor.x,\n                            y: anchor.y,\n                        };\n                    }\n\n                    this.graph.addAnchor(newAnchor, createdConnection, index);\n                });\n            }\n        });\n    }\n\n    isInSubgraph() {\n        return this.subgraphStack.length > 0;\n    }\n\n    async applyAutolayout(resetLocations = true) {\n        const state = this.graph.save();\n        if (resetLocations) {\n            state.nodes.forEach((node) => {\n                node.position = undefined;\n            });\n        }\n        this.layoutManager.registerGraph(state);\n        const updatedGraph = await this.layoutManager.computeLayout(state);\n        this.updateNodesPosition(updatedGraph);\n    }\n\n    updateNodesPosition(updatedGraph) {\n        updatedGraph.nodes.forEach((updatedState) => {\n            const node = this.graph.nodes.filter(\n                (nodeInstance) => updatedState.id === nodeInstance.id,\n            )[0];\n            node.position = updatedState.position;\n        });\n    }\n\n    updateCurrentSubgraphName(name) {\n        this._graph.name = name;\n    }\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Implements custom version of baklava's Graph object\n */\n\nimport {\n    GraphTemplate, DummyConnection, Connection,\n} from '@baklavajs/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { BaklavaEvent } from '@baklavajs/events';\nimport { startTransaction, commitTransaction } from '../core/History.ts';\nimport { updateInterfacePosition } from './CustomNode.js';\n\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-underscore-dangle */\nexport default function createPipelineManagerGraph(graph) {\n    // Add an event for adding an anchor to the graph\n    graph.events.addAnchor = new BaklavaEvent();\n    graph.events.removeAnchor = new BaklavaEvent();\n\n    // Add an event for editing node\n    graph.events.editNode = new BaklavaEvent();\n\n    // Graph node that represents the graph itself. Root graph does not have a node graph assigned.\n    graph.graphNode = undefined;\n\n    graph.checkConnection = function checkConnection(from, to) {\n        if (!from || !to) {\n            return { connectionAllowed: false, error: 'Invalid from and to references.' };\n        }\n\n        const fromNode = this.findNodeById(from.nodeId);\n        const toNode = this.findNodeById(to.nodeId);\n\n        if (fromNode && toNode && fromNode === toNode && !this.editor.allowLoopbacks) {\n            return { connectionAllowed: false, error: 'Loopbacks are not allowed.' };\n        }\n\n        // reverse connection so that 'from' is input and 'to' is output\n        if (\n            (from.direction === 'input' && to.direction === 'output') ||\n            (from.direction === 'input' && to.direction === 'inout') ||\n            (from.direction === 'inout' && to.direction === 'output')\n        ) {\n            const tmp = from;\n            from = to;\n            to = tmp;\n        }\n\n        if (from.isInput && from.direction !== 'inout') {\n            return {\n                connectionAllowed: false,\n                error: 'Connections are only allowed from output or inout interfaces.',\n            };\n        }\n\n        if (!to.isInput) {\n            return {\n                connectionAllowed: false,\n                error: 'Connections are only allowed to input or inout interfaces.',\n            };\n        }\n\n        if (this.connections.some((c) => c.from === from && c.to === to)) {\n            return { connectionAllowed: false, error: 'Duplicate connections are not allowed.' };\n        }\n\n        if (from.maxConnectionsCount > 0 && from.connectionCount + 1 > from.maxConnectionsCount) {\n            return {\n                connectionAllowed: false,\n                error: `Too many connections from an input interface '${from.id}', maximum of '${from.maxConnectionsCount}' are allowed.`,\n            };\n        }\n\n        if (\n            (to.maxConnectionsCount === 0 || to.maxConnectionsCount === undefined) &&\n            to.connectionCount > 0\n        ) {\n            return {\n                connectionAllowed: false,\n                error: `By default only one connection to an input interface '${to.id}' allowed.`,\n            };\n        }\n\n        if (to.maxConnectionsCount > 0 && to.connectionCount + 1 > to.maxConnectionsCount) {\n            return {\n                connectionAllowed: false,\n                error: `Too many connections to an output interface '${to.id}', maximum of '${to.maxConnectionsCount}' are allowed.`,\n            };\n        }\n\n        if (from.type && to.type) {\n            const fromTypes =\n                typeof from.type === 'string' || from.type instanceof String\n                    ? [from.type]\n                    : from.type;\n            const toTypes =\n                typeof to.type === 'string' || to.type instanceof String ? [to.type] : to.type;\n\n            const commonType = fromTypes.find((t) => toTypes.includes(t));\n\n            if (commonType === undefined) {\n                return {\n                    connectionAllowed: false,\n                    error: `No common types between interfaces. Interface '${from.id}' supports types '${fromTypes}' and interface '${to.id}' supports types '${toTypes}'.`,\n                };\n            }\n        }\n\n        if (this.events.checkConnection.emit({ from, to }).prevented) {\n            return {\n                connectionAllowed: false,\n                error: `Connection between an input interface '${from.id}' and an output interface '${to.id}' was prevented`,\n            };\n        }\n\n        const hookResults = this.hooks.checkConnection.execute({ from, to });\n        if (hookResults.some((hr) => !hr.connectionAllowed)) {\n            return {\n                connectionAllowed: false,\n                errors: `Connection between an input interface '${from.id}' and an output interface '${to.id}' was prevented`,\n            };\n        }\n\n        // List of connections that are removed once the dummyConnection is created\n        const connectionsInDanger = [];\n        return {\n            connectionAllowed: true,\n            dummyConnection: new DummyConnection(from, to),\n            connectionsInDanger,\n        };\n    };\n\n    /**\n     * Adds an anchor to the connection and creates an event that\n     * the anchor was added, which is used by history system.\n     *\n     * @param anchor anchor to be added\n     * @param connection connection to which the anchor is added\n     * @param position position of the anchor in the connection\n     */\n    graph.addAnchor = function addAnchor(anchor, connection, position) {\n        const anchorToAdd = {\n            x: anchor.x,\n            y: anchor.y,\n            id: uuidv4(),\n        };\n        if (connection.anchors === undefined) connection.anchors = [];\n\n        connection.anchors.splice(position, 0, anchorToAdd);\n        graph.events.addAnchor.emit([connection, (position * 3 + 1)]);\n    };\n\n    // Replaces given instance of a node with a node of type `newNodeName`\n    // All properties that are common preserve their values\n    // All connections that were connected to the interfaces that are common\n    // for those two nodes are preserved as well.\n    graph.replaceNode = function replaceNode(oldNode, newNodeName) {\n        const oldPosition = oldNode.position;\n        const newNode = this.editor.nodeTypes.get(newNodeName);\n        const newNodeInstance = new newNode.type(); // eslint-disable-line new-cap\n\n        // Restoring a custom title of the node\n        if (oldNode.title !== oldNode.type) {\n            newNodeInstance.title = oldNode.title;\n        }\n\n        // Restoring properties and interfaces\n        Object.entries({ ...oldNode.inputs, ...oldNode.outputs }).forEach(([name, intf]) => {\n            if (intf.direction !== undefined) {\n                if (Object.prototype.hasOwnProperty.call(newNodeInstance.inputs, name)) {\n                    updateInterfacePosition(\n                        newNodeInstance,\n                        newNodeInstance.inputs[name],\n                        intf.side,\n                        intf.sidePosition,\n                        false,\n                        false,\n                    );\n                }\n                if (Object.prototype.hasOwnProperty.call(newNodeInstance.outputs, name)) {\n                    updateInterfacePosition(\n                        newNodeInstance,\n                        newNodeInstance.outputs[name],\n                        intf.side,\n                        intf.sidePosition,\n                        false,\n                        false,\n                    );\n                }\n                // If the new node has the same property of the same type as it could be overridden\n            } else if (\n                Object.prototype.hasOwnProperty.call(newNodeInstance.inputs, name) &&\n                newNodeInstance.inputs[name].componentName === intf.componentName\n            ) {\n                newNodeInstance.inputs[name].value = intf.value;\n            }\n        });\n\n        // Restoring connections\n        const interfaces = [...Object.values(oldNode.inputs), ...Object.values(oldNode.outputs)];\n        const connections = this.connections.filter(\n            (c) => interfaces.includes(c.from) || interfaces.includes(c.to),\n        );\n\n        const connectionsToRestore = [];\n\n        Object.entries({ ...oldNode.inputs, ...oldNode.outputs }).forEach(([name, intf]) => {\n            if (intf.direction === undefined) return;\n\n            // Rewiring connections to new interfaces\n            connections.forEach((conn) => {\n                if (Object.prototype.hasOwnProperty.call(newNodeInstance.inputs, name)) {\n                    if (conn.from === intf) {\n                        const newConn = new Connection(newNodeInstance.inputs[name], conn.to);\n                        newConn.anchors = conn.anchors;\n                        connectionsToRestore.push(newConn);\n                    } else if (conn.to === intf) {\n                        const newConn = new Connection(conn.from, newNodeInstance.inputs[name]);\n                        newConn.anchors = conn.anchors;\n                        connectionsToRestore.push(newConn);\n                    }\n                }\n\n                if (Object.prototype.hasOwnProperty.call(newNodeInstance.outputs, name)) {\n                    if (conn.from === intf) {\n                        const newConn = new Connection(newNodeInstance.outputs[name], conn.to);\n                        newConn.anchors = conn.anchors;\n                        connectionsToRestore.push(newConn);\n                    } else if (conn.to === intf) {\n                        const newConn = new Connection(conn.from, newNodeInstance.outputs[name]);\n                        newConn.anchors = conn.anchors;\n                        connectionsToRestore.push(newConn);\n                    }\n                }\n            });\n        });\n\n        newNodeInstance.position = oldPosition;\n\n        startTransaction();\n\n        this.removeNode(oldNode);\n        this.addNode(newNodeInstance);\n        connectionsToRestore.forEach((conn) => this.internalAddConnection(conn));\n\n        commitTransaction();\n\n        return newNodeInstance;\n    };\n\n    graph.addNode = function addNode(node, graphLoadingState, nodeId) {\n        if (this.events.beforeAddNode.emit(node).prevented) {\n            return;\n        }\n        this.nodeEvents.addTarget(node.events);\n        this.nodeHooks.addTarget(node.hooks);\n        node.registerGraph(this);\n\n        if (node.template !== undefined) {\n            const newState = JSON.parse(JSON.stringify(node.template.save()));\n            newState.id ??= uuidv4();\n            node.template = new GraphTemplate(newState, this.editor);\n        }\n\n        this._nodes.push(node);\n        // when adding the node to the array, it will be made reactive by Vue.\n        // However, our current reference is the non-reactive version.\n        // Therefore, we need to get the reactive version from the array.\n        node = this.nodes.find((n) => n.id === node.id);\n        node.onPlaced(graphLoadingState, nodeId);\n        this.events.addNode.emit(node);\n        return node; // eslint-disable-line consistent-return\n    };\n\n    graph.destroy = function destroy() {\n        // Remove possibility of removing graphs - this ignores changes made by\n        // default switchGraph (unregistering from editor and removing nodes) and\n        // allows to later reuse this instance\n\n        // TODO: This causes memory leaks, as when reloading a graph, all non-destroyed\n        // graphs linger are are completely unnaccessible\n    };\n\n    graph.load = function load(state) {\n        const errors = [];\n\n        // Clear current state\n        for (let i = this.connections.length - 1; i >= 0; i -= 1) {\n            this.removeConnection(this.connections[i]);\n        }\n        for (let i = this.nodes.length - 1; i >= 0; i -= 1) {\n            this.removeNode(this.nodes[i]);\n        }\n\n        // Load state\n        this.id = state.id ?? uuidv4();\n        this.name = state.name ?? undefined;\n\n        state.nodes.forEach((n) => {\n            const nodeInformation = this.editor.nodeTypes.get(n.name);\n\n            if (!nodeInformation) {\n                errors.push(`Node type ${n.name} is not registered`);\n            } else {\n                const node = new nodeInformation.type(); // eslint-disable-line new-cap\n\n                // The node state may not have an id, so we it has to be assigned manually\n                // if needed\n                n.id ??= uuidv4();\n\n                this.addNode(node, state.graphLoadingState, n.id);\n                const nodeErrors = node.load(n);\n                if (Array.isArray(nodeErrors) && nodeErrors.length) {\n                    errors.push(...nodeErrors);\n                }\n            }\n        });\n\n        // Assigning ids to connections that do not have them\n        state.connections.forEach((c) => {\n            c.id ??= uuidv4();\n        });\n\n        state.connections.forEach((c) => {\n            const fromIf = this.findNodeInterface(c.from);\n            const toIf = this.findNodeInterface(c.to);\n            if (!fromIf) {\n                errors.push(\n                    `Connection of id '${c.id}' invalid. Could not find interface with id '${c.from}'`,\n                );\n            } else if (!fromIf.port) {\n                errors.push(\n                    `Connection of id '${c.id}' invalid. Source of the connection is not an Interface`,\n                );\n            } else if (!toIf) {\n                errors.push(\n                    `Connection of id '${c.id}' invalid. Could not find interface with id '${c.to}'`,\n                );\n            } else if (!toIf.port) {\n                errors.push(\n                    `Connection of id '${c.id}' invalid. Destination of the connection is not an Interface`,\n                );\n            } else if (\n                state.connections.some(\n                    (conn) => conn.id === c.id && (conn.from !== c.from || conn.to !== c.to),\n                )\n            ) {\n                errors.push(`Connection of id '${c.id}' invalid. ID is already taken.`);\n            } else {\n                // Manually adding connections instead of using `addConnection` from baklavajs\n                // as we want to get a feedback message from `checkConnection` function\n                // which is suppressed in baklavajs functionality\n                const checkConnectionResult = this.checkConnection(fromIf, toIf);\n                if (!checkConnectionResult.connectionAllowed) {\n                    errors.push(\n                        `Could not create connection of id '${c.id}'. ${checkConnectionResult.error}`,\n                    );\n                } else {\n                    checkConnectionResult.connectionsInDanger.forEach((connectionToRemove) => {\n                        const instance = this.connections.find(\n                            (conn) => conn.id === connectionToRemove.id,\n                        );\n                        if (instance) {\n                            this.removeConnection(instance);\n                        }\n                    });\n\n                    const conn = new Connection(\n                        checkConnectionResult.dummyConnection.from,\n                        checkConnectionResult.dummyConnection.to,\n                    );\n\n                    c.anchors?.forEach((anchor, index) => {\n                        graph.addAnchor(anchor, conn, index);\n                    });\n                    this.internalAddConnection(conn);\n                }\n            }\n        });\n\n        this.hooks.load.execute(state);\n        return errors;\n    };\n\n    graph.size = function size() {\n        const sizes = this.nodes.map((node) => {\n            const HTMLelement = document.getElementById(node.id);\n            return {\n                width: HTMLelement.offsetWidth,\n                height: HTMLelement.offsetHeight,\n                position: node.position,\n            };\n        });\n        const margin = 100;\n\n        const rightmostX = Math.max(...sizes.map((node) => node.position.x + node.width)) + margin;\n        const leftmostX = Math.min(...sizes.map((node) => node.position.x)) - margin;\n\n        const bottommostY =\n            Math.max(...sizes.map((node) => node.position.y + node.height)) + margin;\n        const topmostY = Math.min(...sizes.map((node) => node.position.y)) - margin;\n\n        const graphWidth = rightmostX - leftmostX;\n        const graphHeight = bottommostY - topmostY;\n\n        return {\n            graphHeight,\n            graphWidth,\n            rightmostX,\n            leftmostX,\n            bottommostY,\n            topmostY,\n        };\n    };\n\n    graph.save = function save() {\n        const state = {\n            id: this.id,\n            name: this.name,\n            nodes: this.nodes.map((n) => n.save()),\n            connections: this.connections.map((c) => ({\n                id: c.id,\n                from: c.from.id,\n                to: c.to.id,\n                anchors: c.anchors?.map((anchor) => ({\n                    x: anchor.x,\n                    y: anchor.y,\n                })),\n            })),\n            scaling: this.scaling,\n            panning: this.panning,\n        };\n        return this.hooks.save.execute(state);\n    };\n\n    graph.removeSelectedNodes = function removeSelectedNodes() {\n        for (let i = this.selectedNodes.length - 1; i >= 0; i -= 1) {\n            this.removeNode(this.selectedNodes[i]);\n        }\n    };\n\n    graph.removeNode = function removeNode(node) {\n        if (this.nodes.includes(node)) {\n            if (this.events.beforeRemoveNode.emit(node).prevented) {\n                return;\n            }\n            const interfaces = [...Object.values(node.inputs), ...Object.values(node.outputs)];\n            this.connections\n                .filter((c) => interfaces.includes(c.from) || interfaces.includes(c.to))\n                .forEach((c) => this.removeConnection(c));\n            this._nodes.splice(this.nodes.indexOf(node), 1);\n            this.events.removeNode.emit(node);\n            node.onDestroy();\n            this.nodeEvents.removeTarget(node.events);\n            this.nodeHooks.removeTarget(node.hooks);\n        }\n    };\n\n    graph.removeNodeOnly = function removeNodeOnly(node) {\n        this._nodes.splice(this.nodes.indexOf(node), 1);\n        this.events.removeNode.emit(node);\n        node.onDestroy();\n        this.nodeEvents.removeTarget(node);\n        this.nodeHooks.removeTarget(node);\n    };\n\n    graph.editNode = function editNode(node) {\n        this.events.editNode.emit(node);\n    };\n\n    graph.obtainExposedNames = function obtainExposedNames() {\n        const exposedNames = [];\n        this._nodes.forEach((node) => {\n            Object.values({ ...node.inputs, ...node.outputs }).forEach((intf) => {\n                if (intf.externalName !== undefined) {\n                    exposedNames.push(intf.externalName);\n                }\n            });\n        });\n        return exposedNames;\n    };\n\n    graph.isIncorrectExternalName = function isIncorrectExternalName(name, exposedNames) {\n        const sameExposedNames = exposedNames.filter((n) => n === name).length;\n\n        // Extract interface names from graph node\n        const interfaces = [\n            ...Object.keys(this.graphNode.inputs),\n            ...Object.keys(this.graphNode.outputs),\n        ].map((intf) => intf.split('_'))\n            .filter((intf) => intf[0] !== 'property')\n            .map((intf) => intf[1]);\n\n        const sameInterfaceNames = interfaces.filter((n) => n === name).length;\n        return name.length === 0 || sameExposedNames !== 0 || sameInterfaceNames !== 0;\n    };\n\n    graph.resolveNewExposedName = function resolveNewExposedName(name) {\n        const exposedNames = this.obtainExposedNames();\n\n        // Check if the external name is taken and add a suffix if it is\n        let suffix = 1;\n        let tmpName = name;\n        while (this.isIncorrectExternalName(tmpName, exposedNames)) {\n            tmpName = `${name}_${suffix}`;\n            suffix += 1;\n        }\n        return tmpName;\n    };\n\n    return graph;\n}\n","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n *\n */\n\nimport { NodeInterface, Graph } from '@baklavajs/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport { parseInterfaces } from '../core/interfaceParser.js';\nimport { updateInterfacePosition } from './CustomNode.js';\nimport {\n    CustomNode,\n    parseProperties,\n    createProperties,\n    createBaklavaInterfaces,\n    updateSubgraphInterfaces,\n} from '../core/NodeFactory.js';\nimport { ir } from '../core/interfaceRegistry.ts';\n\n/**\n  * Function used to update properties of the graph node based on its specification.\n  *\n  * @param {Object} graphNode graph node object\n  *\n  * @returns properties ready to be loaded\n  */\nfunction prepareProperties(graphNode) {\n    const properties = graphNode.properties ?? [];\n\n    const parsedProperties = parseProperties(properties);\n    if (Array.isArray(parsedProperties) && parsedProperties.length) {\n        return parsedProperties.map((error) => `Node ${graphNode.name} invalid. ${error}`);\n    }\n    return createProperties(parsedProperties);\n}\n\n/**\n  * Function used to update interfaces of the graph node based on its specification.\n  * This includes only interfaces of the node, not external interfaces of the subgraph.\n  *\n  * @param {Object} graphNode graph node object\n  *\n  * @returns interfaces ready to be loaded\n  */\nfunction prepareInterfaces(graphNode) {\n    const interfaces = graphNode.interfaces ?? [];\n\n    const parsedInterfaces = parseInterfaces(interfaces, [], []);\n    if (Array.isArray(parsedInterfaces) && parsedInterfaces.length) {\n        return parsedInterfaces.map((error) => `Node ${graphNode.name} invalid. ${error}`);\n    }\n    return createBaklavaInterfaces(parsedInterfaces);\n}\n\nexport default function CreateCustomGraphNodeType(template, graphNode) {\n    const [nodeInputs, newNodeOutputs] = prepareInterfaces(graphNode);\n    const properties = prepareProperties(graphNode);\n    const newNodeInputs = {\n        ...nodeInputs,\n        ...properties,\n    };\n\n    return class CustomGraphNodeType extends CustomNode {\n        type = graphNode.name;\n\n        title = graphNode.name;\n\n        template = template;\n\n        nodeInterfaces = { ...newNodeInputs, ...newNodeOutputs };\n\n        constructor() {\n            super(\n                graphNode.name,\n                graphNode.layer,\n                newNodeInputs,\n                newNodeOutputs,\n                graphNode.twoColumn ?? false,\n                graphNode.description ?? '',\n                graphNode.extends ?? [],\n                graphNode.extending ?? [],\n                graphNode.siblings ?? [],\n                graphNode.width ?? 300,\n                graphNode.relatedGraphs,\n            );\n        }\n\n        save() {\n            const state = super.save();\n            state.subgraph = this.subgraph.id;\n            state.graphState = this.subgraph.save();\n            return state;\n        }\n\n        /* eslint-disable no-param-reassign */\n        load(state) {\n            this.hooks.beforeLoad.execute(state);\n\n            const out = parseInterfaces(state.interfaces ?? [], [], []);\n            if (Array.isArray(out) && out.length) {\n                return out;\n            }\n            let { inputs, outputs } = out;\n\n            inputs = Object.values(inputs);\n            outputs = Object.values(outputs);\n\n            if (state.graphState !== undefined) {\n                delete state.graphState.interfaces;\n                delete state.subgraph;\n\n                // Loading the subgraph of the graph node first, before creating\n                // interfaces based on the nodes in the subgraph. Thanks to that\n                // the originally exposed interfaces (coming from regular nodes)\n                // are found first.\n                const errors = this.subgraph.load(state.graphState);\n                if (errors.length) {\n                    return errors;\n                }\n            }\n\n            this.updateExposedInterfaces(inputs, outputs);\n            // Default position should be undefined instead of (0, 0) so that it can be set\n            // by autolayout\n            this.position = state.position;\n            this.title = state.instanceName ?? '';\n\n            super.load(state);\n\n            this.events.loaded.emit(this);\n            return [];\n        }\n\n        /**\n         * Function used to update exposed interfaces of the graph node based on the\n         * nodes inside the graph, their interfaces and their external names.\n         *\n         * @param {Array} inputs inputs of the graph node. If not provided, the function\n         * will use the current inputs of the graph node.\n         * @param {Array} outputs outputs of the graph node. If not provided, the function\n         * will use the current outputs of the graph node.\n         * @param {boolean} privatize whether to check for privatized (removed) interfaces\n         */\n        updateExposedInterfaces(inputs = undefined, outputs = undefined, privatize = false) {\n            // Update interfaces based on subgraph interfaces and their external names\n            const evaluatedIntf = updateSubgraphInterfaces(\n                this.subgraph.nodes,\n                inputs ?? Object.values(this.inputs),\n                outputs ?? Object.values(this.outputs),\n            );\n            if (Array.isArray(evaluatedIntf) && evaluatedIntf.length) {\n                throw new Error(\n                    `Internal error occurred while exposing an interface.\\n` +\n                    `Reason: ${evaluatedIntf.join('. ')}`,\n                );\n            }\n\n            // After resolving exposed interfaces, the graph node is updated accordingly.\n            this.updateInterfaces(evaluatedIntf.inputs, evaluatedIntf.outputs, privatize);\n        }\n\n        /**\n         * Function called when the node is created using the nodePalette\n         *\n         * @param {Object|undefined} graphLoadingState Information about loaded graphs.\n         * @param {string|undefined} nodeId New ID of the subgraph node.\n         */\n        onPlaced(graphLoadingState, nodeId) {\n            this.initialize(graphLoadingState, nodeId);\n        }\n\n        /**\n         * Creates a new graph node instance based on the template, loads its graph state\n         * and updates exposed interfaces based on the nodes in the subgraph.\n         *\n         * @param {Object|undefined} graphLoadingState  Information about loaded graphs.\n         * @param {string|undefined} nodeId New ID of the subgraph node.\n         */\n        initialize(graphLoadingState, nodeId) {\n            if (this.subgraph) {\n                this.subgraph.destroy();\n            }\n            const graph = new Graph(this.template.editor);\n\n            const { state, errors } = this.prepareSubgraphInstance(graphLoadingState, nodeId);\n            if (!errors.length) errors.push(...graph.load(state));\n            if (errors.length) {\n                throw new Error(\n                    `Internal error occurred while initializing ${graph.type} graph. ` +\n                    `Reason: ${errors.join('. ')}`,\n                );\n            }\n\n            graph.template = this.template;\n            this.subgraph = graph;\n            graph.graphNode = this;\n\n            this.updateExposedInterfaces([], []);\n\n            this._title = this.template.name; // eslint-disable-line no-underscore-dangle\n            this.events.update.emit(null);\n        }\n\n        /**\n         * Function used to check which interfaces had been privatized from within\n         * the subgraph and need to be removed as a result.\n         *\n         * @param {Array} newInterfaces interfaces to be added to the graph node\n         * @param {Array} currentInterfaces interfaces already in the graph node\n         */\n        privatizeInterfaces(newInterfaces, currentInterfaces) {\n            Object.entries(currentInterfaces).forEach(([nodeKey, nodeIntf]) => {\n                // If current interface cannot be found in `newInterfaces`, it means that\n                // it was removed.\n                if (newInterfaces.find((intf) => intf.id === nodeIntf.id) === undefined) {\n                    // Only remove subgraph interfaces, not properties or node interfaces\n                    if (!Object.keys(this.nodeInterfaces).some((key) => key === nodeKey)) {\n                        const container = nodeIntf.direction === 'output' ? 'output' : 'input';\n                        this.removeInterface(container, nodeKey);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Function used to update interfaces of the graph node. It makes use of InterfaceRegistry\n         * object to create interfaces that share part of the state of the exposed interfaces.\n         *\n         * @param {Array} newInputs inputs to be added to the graph node\n         * @param {Array} newOutputs outputs to be added to the graph node\n         * @param {boolean} privatize whether to check for privatized (removed) interfaces\n         */\n        updateInterfaces(newInputs, newOutputs, privatize = false) {\n            const newInterfaces = [...newInputs, ...newOutputs];\n            const currentInterfaces = { ...this.inputs, ...this.outputs };\n\n            if (privatize) {\n                this.privatizeInterfaces(newInterfaces, currentInterfaces);\n            }\n\n            newInterfaces.forEach((nodeIntf) => {\n                // If new interface cannot be found in the current interfaces, it means that\n                // it has to be created\n                const foundIntf = Object.values(currentInterfaces).find(\n                    (intf) => intf.id === nodeIntf.id,\n                );\n\n                if (foundIntf === undefined) {\n                    const ni = new NodeInterface(nodeIntf.name);\n                    Object.assign(ni, nodeIntf);\n                    ir.pushGraphIdToRegistry(ni.id, this.subgraph.id);\n                    ir.createSharedInterface(ni);\n\n                    const container = nodeIntf.direction === 'output' ? 'output' : 'input';\n                    this.addInterface(container, `${nodeIntf.direction}_${nodeIntf.name}`, ni);\n                } else {\n                    Object.assign(foundIntf, nodeIntf);\n                }\n            });\n\n            Object.values(currentInterfaces).forEach((nodeIntf) => {\n                updateInterfacePosition(this, nodeIntf, nodeIntf.side, undefined, false, false);\n            });\n        }\n\n        /**\n         * The function uses its internal static template to create a new graph state\n         * based on the template. It creates a new graph node ID and maps all interfaces\n         * to new IDs. The function is used to create a new graph state that can be loaded\n         * by the graph node.\n         *\n         * @param {Object|undefined} graphLoadingState Information about loaded graphs.\n         * @param {string|undefined} newSubgraphNodeId New ID of the subgraph node.\n         *\n         * @returns graph state ready to be loaded\n         */\n        prepareSubgraphInstance(graphLoadingState, newSubgraphNodeId) {\n            const errors = [];\n\n            // Ensure subgraph nodes have IDs to distinguish instances in nested layers\n            const predicate = (node) => node.subgraph !== undefined && node.id === undefined;\n            if (this.template.nodes.some(predicate)) errors.push('Node defining a nested graph in a subgraph template should have their own ID');\n            if (errors.length) return { errors };\n\n            const isRoot = graphLoadingState === undefined;\n            graphLoadingState ??= {\n                // New subgraph node ID -> Specification subgraph node ID\n                newToSpecNodeIds: new Map(),\n                // Subgraph node ID -> (Exposed Interface name -> New Interface ID)\n                newInterfaceIds: new Map(),\n            };\n\n            /* Nodes */\n\n            const { newToSpecNodeIds } = graphLoadingState;\n            const specSubgraphNodeId = newToSpecNodeIds.get(newSubgraphNodeId);\n\n            const createNewNodeId = (node) => {\n                const newId = uuidv4();\n                if (node.subgraph !== undefined) newToSpecNodeIds.set(newId, node.id);\n                return newId;\n            };\n\n            const addNewNodeId = (node) => ({ ...node, id: createNewNodeId(node) });\n\n            /* Interfaces and connections */\n\n            const connections = this.template.connections.map((c) => ({ ...c, id: uuidv4() }));\n            const { newInterfaceIds } = graphLoadingState;\n\n            const getOrGenerate = (map, key, factory = uuidv4) => {\n                if (!map.has(key)) map.set(key, factory());\n                return map.get(key);\n            };\n\n            const getOrGenerateInterfaceId = (node, intf) => {\n                // Exposed interface - generate and store\n                // Note: All interfaces in a subgraph node are treated as exposed,\n                // therefore all of them are looked up in the subgraph.\n                // This may be subject to change in future\n                const nodeId = node.subgraph !== undefined ? node.id : specSubgraphNodeId;\n                const idMap = getOrGenerate(newInterfaceIds, nodeId, () => new Map());\n\n                // Regular interface\n                const nonExposed = node.subgraph === undefined && intf.externalName === undefined;\n                // Exposed interface is not indicated in the nested subgraph node\n                const exposedNotInSubgraphNode = !isRoot\n                    && intf.externalName !== undefined\n                    && (specSubgraphNodeId === undefined || !idMap.has(intf.externalName));\n\n                return (nonExposed || exposedNotInSubgraphNode)\n                    ? uuidv4()\n                    : getOrGenerate(idMap, intf.externalName ?? intf.name);\n            };\n\n            const createNewInterfaceId = (oldId, node) => {\n                const intf = Object.values(node.inputs)\n                    .concat(Object.values(node.outputs))\n                    .find((i) => i.id === oldId);\n\n                const newId = getOrGenerateInterfaceId(node, intf);\n\n                // Side-effect: modify connections to have new interface IDs\n                connections.filter((c) => c.from === oldId).forEach((c) => { c.from = newId; });\n                connections.filter((c) => c.to === oldId).forEach((c) => { c.to = newId; });\n\n                return newId;\n            };\n\n            const addNewId = (intf, node) => ({ ...intf, id: createNewInterfaceId(intf.id, node) });\n\n            const mapNodeInterfaces = (interfaces, node) => Object.entries(interfaces)\n                .reduce((acc, [name, intf]) => ({ ...acc, [name]: addNewId(intf, node) }), {});\n\n            const addNewInterfaceIds = (node) => ({\n                ...node,\n                inputs: mapNodeInterfaces(node.inputs, node),\n                outputs: mapNodeInterfaces(node.outputs, node),\n            });\n\n            // Apply changes\n\n            return {\n                state: {\n                    id: uuidv4(),\n                    nodes: this.template.nodes.map(addNewInterfaceIds).map(addNewNodeId),\n                    connections,\n                    graphLoadingState,\n                },\n                errors,\n            };\n        }\n    };\n}\n","<!--\nCopyright (c) 2022-2024 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nInterface that is used to display inputs, outputs and properties of a node.\n\nThe custom implementations introduces wrapper functions that prevent the user\nfrom creating and deleting connections or altering nodes' values if the editor is read-only.\n-->\n\n<template>\n    <div\n        :id=\"intf.id\"\n        ref=\"el\"\n        class=\"baklava-node-interface\"\n        :class=\"newClasses\"\n    >\n        <div\n            class=\"__port\"\n            v-if=\"intf.port\"\n            @mouseenter=\"startHoverWrapper\"\n            @mouseleave=\"endHoverWrapper\"\n            @pointerdown.left=\"onMouseDown\"\n            :class=\"{ greyedout_arrow: highlighted, picked: picked, '__square': isExposed }\"\n        >\n            <div\n                v-if=\"isExposed && (hovered || editExternalName)\"\n                :class=\"{\n                    '__port_name_left': intf.side === 'left',\n                    '__port_name_right': intf.side === 'right'\n                }\"\n            >\n                <input\n                    v-if=\"editExternalName\"\n                    v-model=\"inputExternalName\"\n                    ref=\"externalNameInput\"\n                    type=\"text\"\n                    spellcheck=\"false\"\n                    autocomplete=\"off\"\n                    class=\"__port_input\"\n                    :class=\"{ '__error': externalNameInputIncorrect }\"\n                    placeholder=\"External name\"\n                    @focusout=\"externalNameFocusOutCallback\"\n                    @keydown.enter.exact.stop=\"(e) => { e.target.blur(); }\"\n                    @input=\"externalNameInputCallback\"\n                    @pointerdown.left.stop=\"(e) => e.stopPropagation()\"\n                    @keydown.ctrl.stop=\"(e) => e.stopPropagation()\"\n                />\n                <span\n                    v-else\n                    @pointerdown.left.stop=\"enableExternalNameEdit\"\n                    @keydown.stop\n                >\n                    {{ intf.externalName }}\n                </span>\n            </div>\n            <Arrow\n                v-if=\"displayArrow\"\n                :noninteractable=\"true\"\n                color=\"black\"\n                scale=\"big\"\n                :rotate=\"arrowRotation\"\n            />\n        </div>\n\n        <!-- @keydown.stop is added so that events are not bubbled up to the editor -->\n        <component\n            :is=\"intf.component\"\n            v-if=\"showComponent\"\n            v-model=\"intf.value\"\n            :node=\"node\"\n            :intf=\"intf\"\n            @keydown.stop\n            :tabindex=\"tabindexValue\"\n        />\n        <span v-else>\n            {{ intf.name }}\n        </span>\n    </div>\n</template>\n\n<script>\nimport {\n    defineComponent, ref, computed, nextTick,\n} from 'vue';\nimport {\n    Components, useViewModel, useGraph, TextInterface,\n} from '@baklavajs/renderer-vue';\nimport Arrow from '../icons/Arrow.vue';\nimport doubleClick from '../core/doubleClick';\nimport { DYNAMIC_INTERFACE_SUFFIX } from '../core/interfaceParser';\n\nexport default defineComponent({\n    extends: Components.NodeInterface,\n    props: {\n        highlighted: Boolean,\n        picked: Boolean,\n        switchSides: {},\n        toggleGroup: { default: () => {}, required: false },\n        updateDynamicInterfaces: { default: () => {}, required: false },\n        tabindexValue: { default: -1, required: false },\n    },\n    components: {\n        Arrow,\n    },\n    setup(props) {\n        const {\n            el, isConnected, showComponent, startHover, endHover, openSidebar,\n        } =\n            Components.NodeInterface.setup(props);\n\n        const { viewModel } = useViewModel();\n        const { graph } = useGraph();\n\n        props.intf.events.beforeSetValue.unsubscribe(props.intf);\n        props.intf.events.beforeSetValue.subscribe(props.intf, (value, prevent) => {\n            if (viewModel.value.editor.readonly) {\n                prevent();\n            }\n\n            if (\n                (props.intf.min !== undefined && value < props.intf.min) ||\n                (props.intf.max !== undefined && value > props.intf.max)\n            ) {\n                prevent();\n            }\n        });\n\n        if (props.intf.group) {\n            props.toggleGroup(props.intf);\n            props.intf.events.setValue.unsubscribe(props.intf);\n            props.intf.events.setValue.subscribe(props.intf, () => props.toggleGroup(props.intf));\n        }\n\n        if (props.intf.name.endsWith(DYNAMIC_INTERFACE_SUFFIX)) {\n            props.updateDynamicInterfaces(props.intf);\n            props.intf.events.setValue.unsubscribe(props.intf);\n            props.intf.events.setValue.subscribe(props.intf, () =>\n                props.updateDynamicInterfaces(props.intf),\n            );\n        }\n\n        const hovered = ref(false);\n        const startHoverWrapper = () => {\n            hovered.value = true;\n            if (!viewModel.value.editor.readonly) {\n                startHover();\n            }\n        };\n\n        const endHoverWrapper = () => {\n            hovered.value = false;\n            if (!viewModel.value.editor.readonly) {\n                endHover();\n            }\n        };\n\n        /* eslint-disable vue/no-mutating-props,no-param-reassign */\n        const onMouseDown = doubleClick(700, () => {\n            if (!viewModel.value.editor.readonly) {\n                props.switchSides(props.intf);\n                endHover();\n            }\n        });\n\n        const displayArrow = props.intf.port && props.intf.direction !== 'inout';\n        const arrowRotation = computed(() => {\n            if (props.intf.direction === 'input') {\n                if (props.intf.side === 'left') {\n                    return 'right';\n                }\n                if (props.intf.side === 'right') {\n                    return 'down';\n                }\n            }\n            if (props.intf.direction === 'output') {\n                if (props.intf.side === 'left') {\n                    return 'down';\n                }\n                if (props.intf.side === 'right') {\n                    return 'right';\n                }\n            }\n            return 'down';\n        });\n\n        const newClasses = computed(() => ({\n            '--input': props.intf.side === 'left',\n            '--output': props.intf.side === 'right',\n            '--connected': isConnected.value,\n            __readonly: viewModel.value.editor.readonly,\n        }));\n\n        const isExposed = computed(() =>\n            props.intf.externalName !== undefined,\n        );\n\n        // External name editing\n        const externalNameComponent = new TextInterface('External name', props.intf.externalName).setPort(false);\n        externalNameComponent.componentName = 'TextInterface';\n\n        const editExternalName = ref(false);\n        const externalNameInputIncorrect = ref(false);\n        const externalNameInput = ref(null);\n        const externalNames = [];\n\n        const inputExternalName = ref(props.intf.externalName);\n\n        /**\n         * Update the list of external names of the interfaces in the current graph.\n         */\n        const updateExternalNames = () => {\n            externalNames.splice(0, externalNames.length);\n            externalNames.push(...graph.value.obtainExposedNames());\n            externalNames.splice(externalNames.indexOf(props.intf.externalName), 1);\n        };\n\n        const enableExternalNameEdit = (e) => {\n            // Get the list of external names of the interfaces in the subgraph\n            updateExternalNames();\n\n            editExternalName.value = true;\n            e.preventDefault();\n\n            // Wait for the next tick to focus the input, so that it is rendered first\n            nextTick().then(() => {\n                externalNameInput.value.focus();\n                externalNameInput.value.select();\n                externalNameInputIncorrect.value = graph.value.isIncorrectExternalName(\n                    props.intf.externalName,\n                    externalNames,\n                );\n            });\n        };\n\n        const externalNameInputCallback = (e) => {\n            externalNameInputIncorrect.value = graph.value.isIncorrectExternalName(\n                e.target.value,\n                externalNames,\n            );\n        };\n\n        const externalNameFocusOutCallback = () => {\n            editExternalName.value = false;\n            externalNameInputIncorrect.value = false;\n            const newExternalName = graph.value.resolveNewExposedName(inputExternalName.value);\n            inputExternalName.value = newExternalName;\n\n            viewModel.value.editor.exposeInterface(\n                graph.value.id,\n                props.intf,\n                newExternalName,\n            );\n        };\n\n        return {\n            arrowRotation,\n            displayArrow,\n            editExternalName,\n            el,\n            enableExternalNameEdit,\n            endHover,\n            endHoverWrapper,\n            externalNameInput,\n            externalNameInputIncorrect,\n            externalNameInputCallback,\n            externalNameFocusOutCallback,\n            hovered,\n            isConnected,\n            inputExternalName,\n            newClasses,\n            onMouseDown,\n            openSidebar,\n            showComponent,\n            isExposed,\n            startHover,\n            startHoverWrapper,\n        };\n    },\n});\n</script>\n","import { render } from \"./CustomInterface.vue?vue&type=template&id=7a8d178e\"\nimport script from \"./CustomInterface.vue?vue&type=script&lang=js\"\nexport * from \"./CustomInterface.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<!--\nCopyright (c) 2022-2023 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nInterface that is used to display inputs, outputs and properties of a node.\n\nThe custom implementations introduces wrapper functions that prevent the user\nfrom creating and deleting connections or altering nodes' values if the editor is read-only.\n-->\n\n<template>\n    <transition name=\"slide-fade\">\n        <div ref=\"el\">\n                <a\n                    v-for=\"url in nodeRef.URLs\"\n                    :key=\"url.name\"\n                    :href=\"url.url\"\n                    class=\"__url\"\n                    target=\"_blank\"\n                    draggable=\"false\"\n                    @pointerdown.left.stop\n                >\n                    <div class=\"link_item\">\n                        <img\n                            v-if=\"url.icon !== undefined\"\n                            :src=\"getIconPath(url.icon)\"\n                            draggable=\"false\"\n                        />\n                        <span>{{ url.name }}</span>\n                        <br>\n                    </div>\n                </a>\n        </div>\n    </transition>\n</template>\n\n<script>\nimport { defineComponent, ref } from 'vue';\nimport { useViewModel } from '@baklavajs/renderer-vue';\n\nexport default defineComponent({\n    props: {\n        node: {\n            required: true,\n        },\n    },\n    setup(props) {\n        const el = ref(null);\n        const { viewModel } = useViewModel();\n        const getIconPath = (name) => viewModel.value.cache[`./${name}`] ?? name;\n        const nodeRef = ref(props.node);\n\n        return {\n            el,\n            getIconPath,\n            nodeRef,\n        };\n    },\n});\n</script>\n\n<style lang='scss' scoped>\na {\n    color: white;\n    text-decoration: none;\n    word-wrap: normal;\n    width: 100%;\n\n     > .link_item {\n        border: 1px solid #737373;\n        border-bottom: 0px solid;\n        > img {\n            display: inline-block;\n            vertical-align: middle;\n            margin: 1em 1em 1em 1em;\n            width: auto;\n            height: 100%;\n            max-height: 1.75em;\n        }\n\n        > span {\n            vertical-align: middle;\n            font-size: $fs-small;\n        }\n        &:hover > span {\n            color: $green;\n        }\n    }\n}\n\n</style>\n","import { render } from \"./LinkMenu.vue?vue&type=template&id=28f02260&scoped=true\"\nimport script from \"./LinkMenu.vue?vue&type=script&lang=js\"\nexport * from \"./LinkMenu.vue?vue&type=script&lang=js\"\n\nimport \"./LinkMenu.vue?vue&type=style&index=0&id=28f02260&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-28f02260\"]])\n\nexport default __exports__","<!--\nCopyright (c) 2022-2024 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!-- eslint-disable vue/no-multiple-template-root -->\n<template>\n    <Tooltip\n        ref=\"tooltipRef\"\n        :left=\"tooltip.left\"\n        :top=\"tooltip.top\"\n        :text=\"tooltip.text\"\n        v-show=\"tooltip.visible\"\n    />\n    <div\n        class=\"baklava-sidebar prevent-select\"\n        ref=\"sidebarRef\"\n        :class=\"{\n            '--open': graph.sidebar.visible,\n            '--hidehud': editorManager.editor.hideHud,\n            '--preview': editorManager.editor.preview,\n            'hidden-navbar': $isMobile,\n        }\"\n        :style=\"styles\"\n    >\n        <div class=\"__resizer\" @mousedown=\"startResize\" />\n        <div v-if=\"node\" class=\"__content\">\n            <div class=\"__header\">\n                <Cross tabindex=\"-1\" class=\"__close\" @click=\"close\" />\n                <img\n                    class=\"__node-icon\"\n                    v-if=\"nodeIconPath !== undefined\"\n                    :src=\"nodeIconPath\"\n                />\n                <div class=\"__node-name\">\n                    {{ displayedName }}\n                </div>\n                <a\n                    v-for=\"url in nodeURLs\"\n                    :key=\"url.name\"\n                    :href=\"url.url\"\n                    class=\"__url\"\n                    target=\"_blank\"\n                    draggable=\"false\"\n                    @pointerover=\"(ev) => onPointerOver(url.name, ev)\"\n                    @pointerleave=\"onPointerLeave\"\n                    tabindex=\"-1\"\n                >\n                    <img\n                        v-if=\"url.icon !== undefined\"\n                        :src=\"getIconPath(url.icon)\"\n                        :alt=\"url.name\"\n                        draggable=\"false\"\n                    />\n                </a>\n            </div>\n            <div v-if=\"editorManager.baklavaView.settings.showIds\" class=\"__id\">\n                <div class=\"__title\">Node ID</div>\n                <div class=\"__value\">\n                    {{ node.id }}\n                </div>\n                <div v-if=\"subgraphId\" class=\"__title\">Subgraph ID</div>\n                <div v-if=\"subgraphId\" class=\"__value\">\n                    {{ subgraphId }}\n                </div>\n            </div>\n            <div v-show=\"prettyCategory\" class=\"__category\">\n                <div class=\"__title\">Category</div>\n                <div class=\"__category-name\">\n                    {{ prettyCategory }}\n                </div>\n            </div>\n            <div v-if=\"!editorManager.editor.readonly\" class=\"__replace\">\n                <div class=\"__replace_entry\" v-if=\"replacementParents.length\">\n                    <div class=\"__replace_title\">Generalize:</div>\n                    <div\n                        v-for=\"parent in replacementParents\"\n                        :key=\"parent\"\n                        class=\"__replace_button\"\n                    >\n                        <component :is=\"parent.component\" :intf=\"parent\" tabindex=\"-1\" />\n                    </div>\n                </div>\n                <div class=\"__replace_entry\" v-if=\"replacementChildren.length\">\n                    <div class=\"__replace_title\">Specialize:</div>\n                    <div v-for=\"child in replacementChildren\" :key=\"child\" class=\"__replace_button\">\n                        <component :is=\"child.component\" :intf=\"child\" tabindex=\"-1\" />\n                    </div>\n                </div>\n                <div class=\"__replace_entry\" v-if=\"replacementSiblings.length\">\n                    <div class=\"__replace_title\">Choose other type:</div>\n                    <div\n                        v-for=\"sibling in replacementSiblings\"\n                        :key=\"sibling\"\n                        class=\"__replace_button\"\n                    >\n                        <component :is=\"sibling.component\" :intf=\"sibling\" tabindex=\"-1\" />\n                    </div>\n                </div>\n            </div>\n            <div class=\"__properties\" v-if=\"displayedProperties.length\">\n                <div class=\"__title\">Properties</div>\n                <div v-for=\"input in displayedProperties\" :key=\"input.id\" class=\"__property\">\n                    <div class=\"__property-name\">\n                        {{ getOptionName(input.componentName) ? `${input.name}:` : '' }}\n                    </div>\n                    <CustomInterface\n                        :node=\"node\"\n                        :intf=\"input\"\n                        :toggleGroup=\"toggleGroup\"\n                        :updateDynamicInterfaces=\"updateDynamicInterfaces\"\n                        tabindex=\"-1\"\n                    />\n                </div>\n            </div>\n\n            <div v-show=\"desc\">\n                <div class=\"__title\">\n                    Description\n                </div>\n                <div class=\"__markdown-content\" >\n                    <span v-html=\"desc\" class=\"node_description\"></span>\n                </div>\n            </div>\n\n            <div\n                class=\"__interface_groups\"\n                v-if=\"interfaceGroupsCheckboxes.length > 0 && !editorManager.editor.readonly\"\n            >\n                <div class=\"__title\">Interface Groups</div>\n                <div\n                    v-for=\"intfG in interfaceGroupsCheckboxes\"\n                    :key=\"intfG.id\"\n                    class=\"__group\"\n                >\n                    <component :is=\"intfG.component\" :intf=\"intfG\"></component>\n                </div>\n                <div class=\"__group-assign\">\n                    <component\n                        :is=\"interfaceGroupsButton.component\"\n                        :intf=\"interfaceGroupsButton\"\n                        :class=\"interfaceGroupsButtonClasses\"\n                        tabindex=\"-1\"\n                    ></component>\n                </div>\n            </div>\n            <div v-show=\"interfaceGroupsOutput.length\" class=\"__error_outputs\">\n                <div class=\"__title\">Conflicts:</div>\n                <!-- eslint-disable vue/require-v-for-key -->\n                <p v-for=\"output in interfaceGroupsOutput\">\n                    {{ output }}\n                </p>\n            </div>\n            <NodeSpecificationEditor :node=\"node\" :scrollHandle=\"sidebarRef\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport { computed, defineComponent, watch, ref, nextTick } from 'vue'; // eslint-disable-line object-curly-newline\nimport { CheckboxInterface, ButtonInterface } from '@baklavajs/renderer-vue'; // eslint-disable-line object-curly-newline\nimport showdown from 'showdown';\nimport CustomInterface from './CustomInterface.vue';\nimport Cross from '../icons/Cross.vue';\nimport Tooltip from '../components/Tooltip.vue';\nimport EditorManager from '../core/EditorManager';\n\nimport { validateInterfaceGroupsNames } from '../core/interfaceParser';\nimport { getOptionName } from './CustomNode.js';\nimport NodeSpecificationEditor from '../components/NodeSpecificationEditor.vue';\n\nexport default defineComponent({\n    components: {\n        Cross,\n        CustomInterface,\n        CheckboxInterface,\n        NodeSpecificationEditor,\n        Tooltip,\n    },\n    emits: ['sidebar-open'],\n    setup(_props, { emit }) {\n        const editorManager = EditorManager.getEditorManagerInstance();\n        const viewModel = computed(() => editorManager.baklavaView);\n        const graph = computed(() => viewModel.value.displayedGraph);\n\n        const converter = new showdown.Converter({\n            smartIndentationFix: true,\n            simpleLineBreaks: true,\n        });\n\n        const width = ref(300);\n\n        const node = computed(() => {\n            const id = graph.value.sidebar.nodeId;\n            return graph.value.nodes.find((x) => x.id === id);\n        });\n\n        const category = computed(() => graph.value.editor.nodeTypes.get(node.value.type).category);\n        const prettyCategory = computed(() => `${category.value.split('/').join(' / ')}`);\n\n        const subgraphId = computed(() => graph.value.editor.nodeTypes.get(\n            node.value.type,\n        ).subgraphId);\n\n        const desc = computed(() => {\n            let html = converter.makeHtml(node.value?.description ?? '');\n            const aTagRe = /<a href=\"[a-zA-Z0-9-$_.+!*'()/&?=:%]+\">/gm;\n            html.match(aTagRe)?.forEach((match) => {\n                const hrefParts = match.split('\"');\n                // Forces the link to open in a new tab instead of closing the pipeline manager\n                const newEnd = ` tabindex=\"-1\" target=\"_blank\"${hrefParts[2]}`;\n                const newHref = [hrefParts[0], hrefParts[1], newEnd].join('\"');\n                html = html.replace(match, newHref);\n            });\n            return html;\n        });\n\n        const nodeIcon = computed(() => viewModel.value.editor.getNodeIconPath(node.value?.type));\n        const nodeURLs = computed(() => viewModel.value.editor.getNodeURLs(node.value?.type));\n\n        const getIconPath = (name) => viewModel.value.cache[`./${name}`] ?? name;\n        const nodeIconPath = computed(() => getIconPath(nodeIcon.value));\n        const sidebarVisible = computed(() => graph.value.sidebar.visible);\n\n        watch(node, () => {\n            if (node.value === undefined) {\n                graph.value.sidebar.visible = false;\n            }\n        });\n        watch(sidebarVisible, (newValue) => {\n            if (newValue) emit('sidebar-open');\n        });\n\n        const tooltipRef = ref(null);\n        const tooltip = ref(null);\n        const sidebarRef = ref(null);\n\n        tooltip.value = {\n            top: 0,\n            left: 0,\n            visible: false,\n            text: '',\n        };\n\n        const onPointerOver = (name, ev) => {\n            tooltip.value.text = name;\n            tooltip.value.visible = true;\n\n            // We need to wait for the next frame to get the tooltips width first to get its width\n            nextTick().then(() => {\n                const right = ev.clientX - ev.offsetX + ev.currentTarget.offsetWidth / 2 +\n                    tooltipRef.value.$el.clientWidth;\n\n                tooltip.value.top = ev.clientY - ev.offsetY + ev.currentTarget.offsetHeight;\n\n                // If the tooltip is out of user view port it is moved to the left\n                if (right > window.innerWidth) {\n                    tooltip.value.left = ev.clientX - ev.offsetX + ev.currentTarget.offsetWidth / 2\n                        - tooltipRef.value.$el.clientWidth / 2;\n                } else {\n                    tooltip.value.left = ev.clientX - ev.offsetX + ev.currentTarget.offsetWidth / 2;\n                }\n            });\n        };\n\n        const toggleGroup = (intf) => {\n            intf.group.forEach((name) => {\n                node.value.inputs[name].hidden = !intf.value;\n            });\n        };\n\n        const updateDynamicInterfaces = (intf) => {\n            node.value.updateDynamicInterfaces(intf);\n        };\n\n        const onPointerLeave = () => {\n            tooltip.value.visible = false;\n        };\n\n        const styles = computed(() => ({\n            width: `${width.value}px`,\n        }));\n\n        const close = () => {\n            graph.value.sidebar.visible = false;\n        };\n\n        const onMouseMove = (ev) => {\n            ev.preventDefault();\n            width.value -= ev.movementX;\n        };\n\n        const startResize = () => {\n            width.value = sidebarRef.value.offsetWidth;\n            window.addEventListener('mousemove', onMouseMove);\n            window.addEventListener(\n                'mouseup',\n                (ev) => {\n                    ev.preventDefault();\n                    window.removeEventListener('mousemove', onMouseMove);\n                },\n                { once: true },\n            );\n        };\n\n        const displayedProperties = computed(() =>\n            Object.values(node.value.inputs).filter((intf) => !intf.port),\n        );\n\n        const interfaceGroups = computed(() =>\n            Object.values({ ...node.value.inputs, ...node.value.outputs }).filter(\n                (ni) => ni.interfaces !== undefined,\n            ),\n        );\n\n        const interfaceGroupsOutput = ref('');\n        const interfaceGroupsButtonClasses = computed(() => ({\n            '--disabled': interfaceGroupsOutput.value !== '',\n        }));\n\n        const interfaceGroupsCheckboxes = computed(() => {\n            const checkboxes = ref([]);\n            // So that interfaces are recomputed when this value changes\n            graph.value.sidebar.visible; // eslint-disable-line no-unused-expressions\n\n            interfaceGroups.value.forEach((intfG) => {\n                const checkbox = new CheckboxInterface(intfG.name, !intfG.hidden).setPort(false);\n                checkbox.events.setValue.subscribe(this, () => {\n                    const errors = validateInterfaceGroupsNames(\n                        enabledInterfaceGroups.value, // eslint-disable-line no-use-before-define\n                        node.value.inputs,\n                        node.value.outputs,\n                    );\n\n                    if (errors.length) {\n                        interfaceGroupsOutput.value = errors.map(\n                            ([parsedIntfName, intfDirection, groupName]) =>\n                                `Reused ${intfDirection} - ${parsedIntfName} for interface group ${groupName}`,\n                        );\n                    } else {\n                        interfaceGroupsOutput.value = '';\n                    }\n                });\n                checkbox.componentName = 'CheckboxInterface';\n                checkbox.intfG = intfG;\n                checkboxes.value.push(checkbox);\n            });\n\n            return checkboxes.value;\n        });\n\n        const enabledInterfaceGroups = computed(() => {\n            const enabledInterfaceGroupsCheckboxes = [];\n\n            interfaceGroupsCheckboxes.value.forEach((intf) => {\n                if (intf.value) {\n                    enabledInterfaceGroupsCheckboxes.push(\n                        `${intf.intfG.direction}_${intf.intfG.name}`,\n                    );\n                }\n            });\n            return enabledInterfaceGroupsCheckboxes;\n        });\n\n        const interfaceGroupsButton = computed(() => {\n            const checkbox = new ButtonInterface('Assign', () => {\n                interfaceGroupsCheckboxes.value.forEach((intf) => {\n                    node.value.toggleInterfaceGroup(intf.intfG, intf.value);\n                });\n                interfaceGroupsOutput.value = '';\n            });\n            checkbox.componentName = 'ButtonInterface';\n            return checkbox;\n        });\n\n        const replacementButtons = (list) => {\n            const buttons = ref([]);\n\n            (list ?? []).forEach((eName) => {\n                const button = new ButtonInterface(eName, () => {\n                    const newNode = graph.value.replaceNode(node.value, eName);\n                    graph.value.sidebar.nodeId = newNode.id;\n                });\n                button.componentName = 'ButtonInterface';\n                buttons.value.push(button);\n            });\n            return buttons.value;\n        };\n\n        const nodeSiblings = computed(() => {\n            const siblings = new Set();\n            (node.value.extends ?? []).forEach((eName) => {\n                const extended = editorManager.baklavaView.editor.parentNodes.get(eName);\n                if (extended !== undefined) {\n                    extended.extending?.forEach((e) => siblings.add(e));\n                }\n            });\n            siblings.delete(node.value.type);\n            return Array.from(siblings);\n        });\n\n        const replacementParents = computed(() => replacementButtons(node.value.extends));\n        const replacementChildren = computed(() => replacementButtons(node.value.extending));\n        const replacementSiblings = computed(() => replacementButtons(nodeSiblings.value));\n\n        const displayedName = computed(() => {\n            if (node.value.title === '' || node.value.title === undefined) {\n                return node.value.type;\n            }\n            return node.value.title;\n        });\n\n        return {\n            graph,\n            node,\n            styles,\n            startResize,\n            close,\n            displayedProperties,\n            interfaceGroups,\n            interfaceGroupsCheckboxes,\n            interfaceGroupsButton,\n            interfaceGroupsOutput,\n            interfaceGroupsButtonClasses,\n            nodeIconPath,\n            nodeURLs,\n            getIconPath,\n            desc,\n            tooltip,\n            onPointerOver,\n            onPointerLeave,\n            tooltipRef,\n            sidebarRef,\n            toggleGroup,\n            getOptionName,\n            prettyCategory,\n            replacementParents,\n            replacementChildren,\n            replacementSiblings,\n            editorManager,\n            displayedName,\n            updateDynamicInterfaces,\n            subgraphId,\n        };\n    },\n});\n</script>\n<style lang=\"scss\" scoped>\n.prevent-select {\n    -webkit-user-select: none; /* Safari */\n    -ms-user-select: none; /* IE 10 and IE 11 */\n    user-select: none; /* Standard syntax */\n\n    & > .__content {\n        -webkit-user-select: text; /* Safari */\n        -ms-user-select: text; /* IE 10 and IE 11 */\n        user-select: text; /* Standard syntax */\n    }\n}\n</style>\n","import { render } from \"./CustomSidebar.vue?vue&type=template&id=0792ce83&scoped=true\"\nimport script from \"./CustomSidebar.vue?vue&type=script&lang=js\"\nexport * from \"./CustomSidebar.vue?vue&type=script&lang=js\"\n\nimport \"./CustomSidebar.vue?vue&type=style&index=0&id=0792ce83&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-0792ce83\"]])\n\nexport default __exports__","/*\n * Copyright (c) 2022-2024 Antmicro <www.antmicro.com>\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Implements additional functions for CustomNode\n */\n\nimport { useViewModel, useGraph } from '@baklavajs/renderer-vue';\n\n/**\n * The function decides whether a name for the option should be displayed.\n *\n * @param optionType Name of the option component\n * @returns True if the name should be displayed, false otherwise.\n */\nexport function getOptionName(optionType) {\n    switch (optionType) {\n        case 'InputInterface':\n        case 'TextAreaInterface':\n        case 'SelectInterface':\n        case 'ListInterface':\n        case 'TextInterface':\n        case 'HexInterface':\n            return true;\n        case 'NumberInterface':\n        case 'IntegerInterface':\n        case 'CheckboxInterface':\n        case 'SliderInterface':\n        case 'NodeInterface':\n        default:\n            return false;\n    }\n}\n\n/**\n * Updates a side and optionally a sidePosition of an interface\n *\n * @param node in which the interface is updated\n * @param intf interface to update\n * @param newSide new side of the interface\n * @param newSidePosition new position of the interface. If it is occupied\n * @param swap if true then if an interface is found in 'newSidePosition' then they\n * are swapped\n * then an old interface is moved.\n */\n/* eslint-disable no-param-reassign */\nexport function updateInterfacePosition(\n    node,\n    intf,\n    newSide,\n    newSidePosition = undefined,\n    swap = false,\n    editNode = true,\n) {\n    if (editNode) {\n        const { graph } = useGraph();\n        graph.value.editNode(node);\n    }\n\n    const oldSidePosition = intf.sidePosition;\n\n    intf.side = newSide;\n    if (newSidePosition !== undefined) {\n        intf.sidePosition = newSidePosition;\n    }\n\n    const found = [\n        ...Object.values(node.inputs),\n        ...Object.values(node.outputs),\n    ].find(\n        (io) => io.id !== intf.id &&\n            io.sidePosition === intf.sidePosition &&\n            io.side === intf.side,\n    );\n\n    if (found !== undefined) {\n        if (newSidePosition !== undefined && swap) {\n            found.sidePosition = oldSidePosition;\n        } else {\n            const intfToMove = newSidePosition === undefined ? intf : found;\n\n            // Finding the first non occupied side position on that side\n            const sameSide = [\n                ...Object.values(node.inputs),\n                ...Object.values(node.outputs),\n            ].filter((io) => io.side === intfToMove.side && !io.hidden);\n            const occupiedPositions = sameSide.map((io) => io.sidePosition);\n\n            let proposedPosition = 0;\n            while (occupiedPositions.includes(proposedPosition)) {\n                proposedPosition += 1;\n            }\n\n            intfToMove.sidePosition = proposedPosition;\n        }\n    }\n}\n\n/**\n * Wrapper for nodes removal\n *\n * @param node node to remove. Can be either a graph node or a regular node\n * @param unwrapGraph determines whether to unwrap the graph node contents\n * into the current graph. Can be used only when removing a graph node\n */\nexport function removeNode(node, unwrapGraph = false) {\n    const { viewModel } = useViewModel();\n    const isGraphNode = viewModel.value.editor.isGraphNode(node.type);\n    if (isGraphNode && unwrapGraph) {\n        viewModel.value.editor.unwrapSubgraph(node);\n    } else {\n        const { graph } = useGraph();\n        graph.value.removeNode(node);\n    }\n}\n","<!--\nCopyright (c) 2022-2025 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nDefines the main editor component - canvas in which the pipeline is drawn and\nedited by a user\n\nInherits from baklavajs/rendered-vue/src/editor/Editor.vue\n\nMinimap component is removed whatsoever as they are not used.\nHovered connections are calculated and rendered with an appropriate `isHighlighted` value.\n-->\n\n<template>\n    <div\n        ref=\"el\"\n        tabindex=\"-1\"\n        class=\"baklava-editor\"\n        :class=\"{\n            'baklava-ignore-mouse': !!temporaryConnection || dragging,\n            '--temporary-connection': !!temporaryConnection,\n        }\"\n        :style=\"editorStyle\"\n        @wheel.self=\"mouseWheel\"\n        @keydown=\"keyDown\"\n        @keyup=\"keyUp\"\n        @mouseleave=\"!readonly && onRightPointerUp\"\n        @drop.prevent=\"!readonly && onDrop($event)\"\n        @dragenter.prevent\n        @dragover.prevent\n        oncontextmenu=\"return false;\"\n    >\n        <slot name=\"background\">\n            <background />\n        </slot>\n\n        <slot\n            name=\"palette\"\n            v-if=\"!(readonly || hideHud)\"\n        >\n            <NodePalette />\n        </slot>\n\n        <div class=\"node-container\" :style=\"nodeContainerStyle\" @wheel=\"mouseWheel\">\n            <CustomNode\n                v-for=\"node in visibleNodes\"\n                :key=\"node.id + counter.toString()\"\n                :node=\"node\"\n                :selected=\"selectedNodes.includes(node)\"\n                :greyedOut=\"greyedOutNodes.includes(node)\"\n                :interfaces=\"highlightInterfaces\"\n                @select=\"(ev) => selectNode(node, ev)\"\n            />\n            <CustomNode\n                v-for=\"node in ignoredNodes\"\n                :key=\"node.id + counter.toString()\"\n                :node=\"node\"\n                :hidden=\"true\"\n            />\n        </div>\n\n        <svg\n            class=\"connections-container\"\n            @mouseenter=\"changeHoveredConnections\"\n            @mousemove=\"changeHoveredConnections\"\n            @mouseleave=\"clearHighlight\"\n            @wheel=\"mouseWheel\"\n        >\n            <PipelineManagerConnection\n                v-for=\"connection in visibleConnections\"\n                :key=\"connection.id + counter.toString()\"\n                :connection=\"connection\"\n                ref=\"connRefs\"\n                :isHighlighted=\"highlightConnections.includes(connection)\"\n            />\n            <TemporaryConnection\n                name=\"temporaryConnection\"\n                :temporary-connection=\"temporaryConnection\"\n                v-if=\"temporaryConnection && temporaryConnectionRender\"\n                :connection=\"temporaryConnection\"\n            />\n        </svg>\n\n        <div class=\"selection-container\">\n            <RectangleSelection ref=\"rectangleSelection\"/>\n        </div>\n\n        <Zoom @zoom-in=\"zoomIn\" @zoom-out=\"zoomOut\" @center=\"center\" :floating=\"!hideHud\" />\n\n        <Return v-if=\"preview && isInSubgraph\" @click=\"returnFromSubgraph\" />\n\n        <Panel v-show=\"showWelcome\" :blur=\"false\" class=\"welcome-container-panel\">\n            <ParentMenu>\n                <WelcomeMenu :loadFiles=\"loadFiles\" />\n            </ParentMenu>\n        </Panel>\n    </div>\n</template>\n\n<script>\n/* eslint-disable object-curly-newline */\nimport { EditorComponent, useGraph } from '@baklavajs/renderer-vue';\nimport { defineComponent, ref, computed, watch, onMounted, nextTick } from 'vue';\nimport fuzzysort from 'fuzzysort';\nimport { BaklavaEvent } from '@baklavajs/events';\nimport { isJSONRPCRequest, isJSONRPCResponse, JSONRPC } from 'json-rpc-2.0';\nimport usePanZoom from './panZoom';\n\nimport CustomNode from './CustomNode.vue';\nimport PipelineManagerConnection from './connection/PipelineManagerConnection.vue';\nimport TemporaryConnection from './connection/TemporaryConnection.vue';\nimport NodePalette from './nodepalette/NodePalette.vue';\nimport { useTemporaryConnection } from './temporaryConnection';\nimport NotificationHandler from '../core/notifications';\nimport EditorManager, { loadJsonFromRemoteLocation } from '../core/EditorManager';\nimport RectangleSelection from './RectangleSelection.vue';\nimport nodeInsideSelection from './rectangleSelection.js';\nimport getExternalApplicationManager from '../core/communication/ExternalApplicationManager';\nimport jsonRPC, { frontendEndpoints } from '../core/communication/rpcCommunication';\nimport Zoom from '../components/Zoom.vue';\nimport Return from '../components/Return.vue';\nimport Panel from '../components/Panel.vue';\nimport { ParentMenu, WelcomeMenu } from '../components/menu';\n\nexport default defineComponent({\n    extends: EditorComponent,\n    props: {\n        loading: {\n            required: true,\n            type: Boolean,\n        },\n    },\n    components: {\n        CustomNode,\n        Panel,\n        ParentMenu,\n        PipelineManagerConnection,\n        TemporaryConnection,\n        NodePalette,\n        RectangleSelection,\n        WelcomeMenu,\n        Zoom,\n        Return,\n    },\n    emits: ['setLoad'],\n    setup(props, { emit }) {\n        const {\n            el,\n            counter,\n            nodes,\n            connections,\n            selectedNodes,\n            nodeContainerStyle,\n            keyDown,\n            keyUp,\n        } = EditorComponent.setup(props);\n\n        const connRefs = ref([]);\n        const { graph } = useGraph();\n\n        const panZoom = usePanZoom();\n        const temporaryConnection = useTemporaryConnection();\n        const editorManager = EditorManager.getEditorManagerInstance();\n\n        const highlightConnections = ref([]);\n        const highlightInterfaces = ref([]);\n\n        const readonly = computed(() => props.viewModel.editor.readonly);\n        const hideHud = computed(() => props.viewModel.editor.hideHud);\n\n        const rectangleSelection = ref(null);\n        const selectedNodesCtrlBackup = [];\n        const scale = computed(() => graph.value.scaling);\n\n        const searchQuery = computed(() => props.viewModel.editor.searchQuery);\n        const greyedOutNodes = ref([]);\n\n        let pressStartTime = 0;\n        const longPressMilisThreshold = 100;\n\n        const editorStyle = computed(() => ({\n            '--scale': scale.value,\n            cursor: panZoom.dragging.value ? 'move' : 'default',\n        }));\n\n        const isInSubgraph = computed(() => props.viewModel.editor.isInSubgraph());\n\n        const preview = computed(() => props.viewModel.editor.preview);\n\n        const unselectAllNodes = () => {\n            /* eslint-disable vue/no-mutating-props,no-param-reassign */\n            props.viewModel.displayedGraph.selectedNodes = [];\n        };\n\n        const appendSelectMultipleNodes = () => {\n            graph.value.nodes.forEach((node) => {\n                if (graph.value.selectedNodes.includes(node)) {\n                    return;\n                }\n\n                const selectionBoundingRect = rectangleSelection.value.boundingRect;\n\n                if (nodeInsideSelection(graph.value, node, selectionBoundingRect)) {\n                    graph.value.selectedNodes.push(node);\n                }\n            });\n        };\n\n        const selectNode = (node, event) => {\n            // If select was triggered by event check if CTRL is pressed,\n            // otherwise use default method\n            if ((event && !(event.ctrlKey)) || (!event && !props.viewModel.commandHandler.pressedKeys.includes('Control'))) {\n                unselectAllNodes();\n            }\n\n            props.viewModel.displayedGraph.selectedNodes.push(node);\n        };\n\n        const selectMultipleNodes = () => {\n            graph.value.selectedNodes = [];\n            graph.value.nodes.forEach((node) => {\n                const selectionBoundingRect = rectangleSelection.value.boundingRect;\n\n                if (nodeInsideSelection(graph.value, node, selectionBoundingRect)) {\n                    graph.value.selectedNodes.push(node);\n                }\n            });\n        };\n\n        let pointersDown = 0;\n        const onPointerDown = (ev) => {\n            pointersDown += 1;\n            if (ev.target === el.value) {\n                panZoom.onPointerDown(ev);\n            }\n            temporaryConnection.onMouseDown(ev);\n\n            pressStartTime = new Date();\n        };\n\n        const onRightPointerDown = (ev) => {\n            if (ev.target === el.value) {\n                unselectAllNodes();\n                rectangleSelection.value.onPointerDown(ev);\n            }\n\n            pressStartTime = new Date();\n        };\n\n        const onPointerMove = (ev) => {\n            panZoom.onPointerMove(ev);\n            temporaryConnection.onMouseMove(ev);\n            rectangleSelection.value.onPointerMove(ev);\n            if (rectangleSelection.value.selecting) {\n                selectMultipleNodes();\n            }\n        };\n\n        const onPointerUp = (ev) => {\n            panZoom.onPointerUp(ev);\n            temporaryConnection.onMouseUp();\n\n            // handle press & hold\n            const currentTime = new Date();\n            const elapsedTime = currentTime - pressStartTime;\n            if (elapsedTime < longPressMilisThreshold\n                && ev.target === el.value) {\n                unselectAllNodes();\n            }\n\n            if (pointersDown === 1) {\n                document.removeEventListener('pointerup', onPointerUp);\n                document.removeEventListener('pointermove', onPointerMove);\n            }\n            pointersDown -= 1;\n        };\n\n        const onRightPointerUp = (ev) => {\n            // handle press & hold right mouse button\n            const currentTime = new Date();\n            const elapsedTime = currentTime - pressStartTime;\n            if (elapsedTime >= longPressMilisThreshold\n                && ev.target === el.value) {\n                appendSelectMultipleNodes();\n            }\n            rectangleSelection.value.onPointerUp();\n\n            document.removeEventListener('pointerup', onRightPointerUp);\n            document.removeEventListener('pointermove', onPointerMove);\n        };\n\n        const onRightPointerDownCtrl = (ev) => {\n            rectangleSelection.value.onPointerDown(ev);\n            selectedNodesCtrlBackup.value = graph.value.selectedNodes;\n        };\n\n        const onRightPointerUpCtrl = () => {\n            graph.value.selectedNodes = selectedNodesCtrlBackup.value;\n            appendSelectMultipleNodes();\n            rectangleSelection.value.onPointerUp();\n\n            document.removeEventListener('pointerup', onRightPointerUpCtrl);\n            document.removeEventListener('pointermove', onPointerMove);\n        };\n\n        document.addEventListener('pointerdown', (ev) => {\n            // Dragging\n            if (ev.button === 0 && !ev.shiftKey) {\n                onPointerDown(ev);\n                document.addEventListener('pointerup', onPointerUp);\n                document.addEventListener('pointermove', onPointerMove);\n            }\n\n            // Rectangle selection\n            if (readonly.value) {\n                return;\n            }\n            if (ev.button === 2 && ev.ctrlKey) {\n                onRightPointerDownCtrl(ev);\n                document.addEventListener('pointerup', onRightPointerUpCtrl);\n                document.addEventListener('pointermove', onPointerMove);\n            } else if (ev.button === 2) {\n                onRightPointerDown(ev);\n                document.addEventListener('pointerup', onRightPointerUp);\n                document.addEventListener('pointermove', onPointerMove);\n            }\n        });\n\n        const clearHighlight = () => {\n            highlightConnections.value.splice(0, highlightConnections.value.length);\n        };\n\n        // If a connection is removed by clicking on it all highlighted connections are removed\n        watch(connections.value, () => {\n            clearHighlight();\n        });\n\n        const addHighlight = (connection) => {\n            if (!highlightConnections.value.includes(connection)) {\n                highlightConnections.value.push(connection);\n            }\n        };\n\n        const addInterfaceHighlight = (it) => {\n            if (!highlightInterfaces.value.includes(it)) {\n                highlightInterfaces.value.push(it);\n            }\n        };\n        const clearInterfaceHighlight = () => {\n            highlightInterfaces.value.splice(0, highlightInterfaces.value.length);\n        };\n\n        watch(temporaryConnection?.temporaryConnection, () => {\n            if (typeof (temporaryConnection ?? null) === 'undefined') return;\n            if (temporaryConnection?.temporaryConnection === null) return;\n            if (temporaryConnection?.temporaryConnection?.value?.from) {\n                for (let a = 0; a < nodes.value.length; a += 1) {\n                    const viableConnections = [\n                        ...(Object.values(nodes.value[a].outputs) || []),\n                        ...(Object.values(nodes.value[a].inputs) || []),\n                    ];\n\n                    viableConnections.forEach((n) => {\n                        if (n.port && n !== temporaryConnection.temporaryConnection.value.from) {\n                            const result = graph.value.checkConnection(\n                                temporaryConnection.temporaryConnection.value.from,\n                                n,\n                            );\n                            if (!result.connectionAllowed) {\n                                addInterfaceHighlight(n);\n                            }\n                        }\n                    });\n                }\n            } else {\n                clearInterfaceHighlight();\n            }\n        });\n\n        const removeHighlight = (connection) => {\n            const index = highlightConnections.value.indexOf(connection);\n            if (index >= 0) {\n                highlightConnections.value.splice(index, 1);\n            }\n        };\n\n        const changeHoveredConnections = (ev) => {\n            // Get all connection DOM elements that have mouse hovered over them\n            const elements = document.elementsFromPoint(ev.clientX, ev.clientY);\n\n            const hoveredHtml = connRefs.value.filter((conn) =>\n                conn.containsPoint(elements),\n            );\n\n            // Convert DOM elements to BaklavaJS connections\n            const hovered = connections.value.filter(\n                (conn) => hoveredHtml.filter((htmlEl) => htmlEl.connection === conn).length > 0,\n            );\n\n            const highlighted = connections.value.filter(\n                (conn) => hovered.filter((hov) => hov.from === conn.from).length > 0,\n            );\n\n            connections.value.forEach((conn) => {\n                if (highlighted.includes(conn)) {\n                    addHighlight(conn);\n                } else {\n                    removeHighlight(conn);\n                }\n            });\n        };\n\n        const ignoredLayers = computed(() => props.viewModel.ignoredLayers);\n        const ignorableLayers = computed(() => props.viewModel.layers);\n\n        const ignoredInterfacesTypes = computed(() => {\n            const temp = new Set();\n\n            ignorableLayers.value.forEach((layer) => {\n                if (layer.nodeInterfaces && ignoredLayers.value.has(layer.name)) {\n                    layer.nodeInterfaces.forEach(temp.add, temp);\n                }\n            });\n            return temp;\n        });\n\n        const ignoredNodesTypes = computed(() => {\n            const temp = new Set();\n\n            ignorableLayers.value.forEach((layer) => {\n                if (layer.nodeLayers && ignoredLayers.value.has(layer.name)) {\n                    layer.nodeLayers.forEach(temp.add, temp);\n                }\n            });\n            return temp;\n        });\n\n        const visibleNodes = computed(() =>\n            nodes.value.filter((n) => !ignoredNodesTypes.value.has(n.layer)),\n        );\n        const ignoredNodes = computed(() =>\n            nodes.value.filter((n) => ignoredNodesTypes.value.has(n.layer)),\n        );\n        const ignoredNodesId = computed(() => ignoredNodes.value.map((n) => n.id));\n\n        const visibleConnections = computed(() =>\n            connections.value.filter(\n                (c) =>\n                    !c.from.type?.some((t) => ignoredInterfacesTypes.value.has(t)) &&\n                    !c.to.type?.some((t) => ignoredInterfacesTypes.value.has(t)) &&\n                    !ignoredNodesId.value.includes(c.from.nodeId) &&\n                    !ignoredNodesId.value.includes(c.to.nodeId),\n            ),\n        );\n\n        const highlightedNodes = computed(() =>\n            visibleNodes.value.filter(\n                (n) => props.viewModel.displayedGraph.selectedNodes.includes(n),\n            ),\n        );\n\n        const externalApplicationManager = getExternalApplicationManager();\n\n        watch(visibleNodes, async (value, old) => {\n            if (!externalApplicationManager.isConnected()) return;\n            if (!editorManager.notifyWhenChanged) return;\n            const newIds = Object.values(value).map((n) => n.id);\n            const oldIds = Object.values(old).map((n) => n.id);\n            const nodesAdded = [];\n            Object.values(value).forEach((node) => {\n                if (!(oldIds.includes(node.id))) {\n                    nodesAdded.push(node.save());\n                }\n            });\n            const nodesDeleted = [];\n            Object.values(old).forEach((node) => {\n                if (!(newIds.includes(node.id))) {\n                    nodesDeleted.push(node.id);\n                }\n            });\n            const data = {\n                graph_id: graph.value.id,\n                nodes: {\n                    added: nodesAdded,\n                    deleted: nodesDeleted,\n                },\n            };\n            await externalApplicationManager.notifyAboutChange('nodes_on_change', data);\n        });\n\n        watch(visibleConnections, async (value, old) => {\n            if (!externalApplicationManager.isConnected()) return;\n            if (!editorManager.notifyWhenChanged) return;\n            const newIds = Object.values(value).map((n) => n.id);\n            const oldIds = Object.values(old).map((n) => n.id);\n            const connectionsAdded = [];\n            Object.values(value).forEach((connection) => {\n                if (!(oldIds.includes(connection.id))) {\n                    connectionsAdded.push({\n                        id: connection.id,\n                        from: connection.from.id,\n                        to: connection.to.id,\n                    });\n                }\n            });\n            const connectionsDeleted = [];\n            Object.values(old).forEach((connection) => {\n                if (!(newIds.includes(connection.id))) {\n                    connectionsDeleted.push({\n                        from: connection.from.id,\n                        to: connection.to.id,\n                    });\n                }\n            });\n            const data = {\n                graph_id: graph.value.id,\n                connections: {\n                    added: connectionsAdded,\n                    deleted: connectionsDeleted,\n                },\n            };\n            await externalApplicationManager.notifyAboutChange('connections_on_change', data);\n        });\n\n        watch(highlightedNodes, async (value, old) => {\n            if (!externalApplicationManager.isConnected()) return;\n            if (!editorManager.notifyWhenChanged) return;\n            const newIds = Object.values(value).map((n) => n.id);\n            const oldIds = Object.values(old).map((n) => n.id);\n            const nodesSelected = [];\n            Object.values(value).forEach((node) => {\n                if (!(oldIds.includes(node.id))) {\n                    nodesSelected.push(node.id);\n                }\n            });\n            const nodesUnselected = [];\n            Object.values(old).forEach((node) => {\n                if (!(newIds.includes(node.id))) {\n                    nodesUnselected.push(node.id);\n                }\n            });\n            const data = {\n                graph_id: graph.value.id,\n                nodes: {\n                    selected: nodesSelected,\n                    unselected: nodesUnselected,\n                },\n            };\n            await externalApplicationManager.notifyAboutChange('nodes_on_highlight', data);\n        });\n\n        const filterNodes = (query) => {\n            const threshold = -50;\n\n            const matchingNodes = visibleNodes.value.filter((node) => {\n                const { type } = node;\n\n                const resultTitle = fuzzysort.single(query, node.title);\n                const resultType = fuzzysort.single(query, type);\n\n                if ((resultTitle !== null && resultTitle.score > threshold) ||\n                    (resultType !== null && resultType.score > threshold)) {\n                    node.highlightedTitle = fuzzysort.highlight(resultTitle, '<span>', '</span>');\n                    node.highlightedType = fuzzysort.highlight(resultType, '<span>', '</span>');\n\n                    return true;\n                }\n                node.highlightedTitle = node.title;\n                node.highlightedType = node.type;\n                return false;\n            });\n\n            return matchingNodes;\n        };\n\n        const nodeTitles = computed(() =>\n            nodes.value.map((n) => n.title),\n        );\n\n        watch([searchQuery, nodeTitles], () => {\n            if (searchQuery.value === undefined || searchQuery.value === '') {\n                greyedOutNodes.value = [];\n                visibleNodes.value.forEach((node) => {\n                    node.highlightedTitle = node.title;\n                    node.highlightedType = node.type;\n                });\n                return;\n            }\n            const matchingNodes = filterNodes(searchQuery.value);\n\n            const nonMatchingNodes = visibleNodes.value.filter(\n                (node) => !matchingNodes.includes(node),\n            );\n\n            greyedOutNodes.value = nonMatchingNodes;\n        });\n\n        const defaultSpecification = process.env.VUE_APP_SPECIFICATION_PATH !== undefined;\n        const defaultDataflow = process.env.VUE_APP_DATAFLOW_PATH !== undefined;\n        const verboseLoad =\n            process.env.VUE_APP_VERBOSE !== undefined && process.env.VUE_APP_VERBOSE === 'true';\n\n        /**\n         * Prepares the Editor based on specification configuration.\n         *\n         * The function validates the specification, updates the Editor\n         * and provides error messages for erroneous content.\n         *\n         * @param specification The object holding the parsed specification file\n         */\n        async function updateEditorSpecification(specification) {\n            let errors = EditorManager.validateSpecification(specification);\n            let warnings;\n            let info;\n\n            if (errors.length) {\n                NotificationHandler.terminalLog('error', 'Specification is invalid', errors);\n                if (editorManager.specificationVersion !== specification.version) {\n                    NotificationHandler.terminalLog(\n                        'error',\n                        'Mismatched specification version',\n                        `Specification version (${specification.version}) differs from the current version (${editorManager.specificationVersion}). It may result in unexpected behaviour.` +\n                        ' Please refer to https://antmicro.github.io/kenning-pipeline-manager/changelogs.html to see if that is the case.',\n                    );\n                }\n                return errors;\n            }\n\n            ({ errors, warnings, info } = await editorManager.updateEditorSpecification(specification)); // eslint-disable-line prefer-const,max-len\n            if (Array.isArray(warnings) && warnings.length) {\n                NotificationHandler.terminalLog(\n                    'warning',\n                    'Issue when loading specification',\n                    warnings,\n                );\n            }\n            if (Array.isArray(errors) && errors.length) {\n                NotificationHandler.terminalLog('error', 'Specification is invalid', errors);\n                if (Array.isArray(info) && info.length) {\n                    NotificationHandler.terminalLog(\n                        'error',\n                        'Mismatched specification version',\n                        `${info} Please refer to https://antmicro.github.io/kenning-pipeline-manager/changelogs.html to see if that is the case.`,\n                    );\n                }\n            } else if (Array.isArray(info) && info.length) {\n                NotificationHandler.terminalLog('info', 'Specification loaded', info);\n            }\n\n            return errors;\n        }\n\n        /**\n         * Prepares the Editor based on dataflow configuration.\n         *\n         * The function loads the dataflow\n         * and provides error messages for erroneous content.\n         *\n         * @param dataflow The object holding the parsed dataflow file\n         */\n        async function updateDataflow(dataflow) {\n            const { errors, warnings, info } = await editorManager.loadDataflow(dataflow);\n\n            if (Array.isArray(warnings) && warnings.length) {\n                NotificationHandler.terminalLog(\n                    'warning',\n                    'Issue when loading dataflow',\n                    warnings,\n                );\n            }\n            if (Array.isArray(errors) && errors.length) {\n                const messageTitle = process.env.VUE_APP_GRAPH_DEVELOPMENT_MODE === 'true' ?\n                    'Softload enabled, errors found while loading the dataflow' :\n                    'Dataflow is invalid';\n                NotificationHandler.terminalLog('error', messageTitle, errors);\n                if (Array.isArray(info) && info.length) {\n                    NotificationHandler.terminalLog(\n                        'error',\n                        'Mismatched dataflow version',\n                        `${info} Please refer to https://antmicro.github.io/kenning-pipeline-manager/changelogs.html to see if that is the case.`,\n                    );\n                }\n            } else if (Array.isArray(info) && info.length) {\n                NotificationHandler.terminalLog('info', 'Dataflow loaded', info);\n            }\n\n            return errors;\n        }\n\n        /* eslint-disable no-lonely-if */\n        onMounted(async () => {\n            // Load specification and/or dataflow delivered via window.postMessage\n            window.addEventListener('message', async (event) => {\n                // TODO: introduce mechanism for checking event.origin against allowed origins\n                const data = event.data ?? {};\n                data.jsonrpc ??= JSONRPC;\n\n                if (isJSONRPCResponse(data)) {\n                    if (event.source === window) return;\n                    jsonRPC.client.receive(data);\n                    return;\n                }\n\n                data.id ??= jsonRPC.client.createID();\n                if (!isJSONRPCRequest(data)) return;\n\n                let response = data.method === 'register_external_frontend'\n                    ? externalApplicationManager.registerFrontendApplication(event.source, data)\n                    : null;\n\n                response ??= event.data.method in frontendEndpoints\n                    ? (await jsonRPC.server.receive(data))\n                    : (await jsonRPC.requestAdvanced(data, {\n                        externalApp: externalApplicationManager.externalApp,\n                    }));\n\n                if (response) event.source.postMessage(JSON.parse(JSON.stringify(response)));\n            });\n\n            NotificationHandler.setShowNotification(false);\n            editorManager.updateMetadata({}); // Defaulting metadata values\n\n            const escapedsearch = window.location.search.replace(/&amp;/g, '&');\n            const urlParams = new URLSearchParams(escapedsearch);\n            if (urlParams.has('preview')) {\n                const setting = urlParams.get('preview') === 'true';\n                props.viewModel.editor.preview = setting;\n            }\n\n            let specText;\n            // Try loading default specification and/or dataflow from URLs provided in an\n            if (urlParams.has('spec')) {\n                props.viewModel.editor.events.setLoad.emit(true);\n                await nextTick();\n                const [status, ret] = await loadJsonFromRemoteLocation(urlParams.get('spec'));\n                if (status === false) {\n                    NotificationHandler.terminalLog(\n                        'error',\n                        ret,\n                    );\n                    NotificationHandler.terminalLog(\n                        'error',\n                        `Failed to load the specification file from: ${urlParams.get('spec')}`,\n                    );\n                } else {\n                    specText = ret;\n                }\n            } else if (defaultSpecification) {\n                // Use raw-loader which does not parse the specification so that it is possible\n                // To add a more verbose validation log\n                if (verboseLoad) {\n                    specText =\n                        require(`!!raw-loader!${process.env.VUE_APP_SPECIFICATION_PATH}`).default; // eslint-disable-line global-require,import/no-dynamic-require\n                } else {\n                    specText = require(process.env.VUE_APP_SPECIFICATION_PATH); // eslint-disable-line global-require,import/no-dynamic-require,max-len\n                }\n            }\n\n            if (specText !== undefined) {\n                if (urlParams.has('include')) {\n                    if (specText.include === undefined) specText.include = [];\n                    specText.include.push(urlParams.get('include'));\n                }\n                const errors = await updateEditorSpecification(specText);\n\n                if (errors.length) {\n                    NotificationHandler.restoreShowNotification();\n                    props.viewModel.editor.events.setLoad.emit(false);\n                    return;\n                }\n\n                let dataflow;\n                if (urlParams.has('graph')) {\n                    const [status, ret] = await loadJsonFromRemoteLocation(urlParams.get('graph'));\n                    if (status === false) {\n                        NotificationHandler.terminalLog(\n                            'error',\n                            ret,\n                        );\n                        NotificationHandler.terminalLog(\n                            'error',\n                            `Failed to load the graph file from: ${urlParams.get('graph')}`,\n                        );\n                    } else {\n                        dataflow = ret;\n                    }\n                } else if (defaultDataflow) {\n                    dataflow = require(process.env.VUE_APP_DATAFLOW_PATH); // eslint-disable-line global-require,max-len,import/no-dynamic-require\n                }\n                if (dataflow) {\n                    await updateDataflow(dataflow);\n                }\n            }\n            NotificationHandler.restoreShowNotification();\n            props.viewModel.editor.events.setLoad.emit(false);\n        });\n\n        const loadFiles = async (files) => {\n            props.viewModel.editor.events.setLoad.emit(true);\n            const resolve = () => props.viewModel.editor.events.setLoad.emit(false);\n            const notify = NotificationHandler.showToast;\n\n            if (files.length > 2) {\n                notify('error', `Up to two files supported, inserted: ${files.length}`);\n                resolve();\n                return;\n            }\n\n            let objects;\n            try {\n                const parse = async (file) => JSON.parse(await file.text());\n                objects = await Promise.all(Array.from(files).map(parse));\n            } catch (error) {\n                notify('error', 'Dropped file is not in JSON format');\n                resolve();\n                return;\n            }\n\n            const isSpecificationFunc = (o) => Boolean(o.nodes || o.include || o.includeGraphs);\n            const isDataflowFunc = (o) => Boolean(o.graphs && !isSpecificationFunc(o));\n            const isInvalid = objects.map((o) => !isSpecificationFunc(o) && !isDataflowFunc(o));\n\n            // [invalid, invalid]\n            if (isInvalid.every(Boolean)) {\n                if (objects.length === 1) notify('error', 'Provided file is not of Pipeline Manager format');\n                else notify('error', 'Neither of provided files is of Pipeline Manager format');\n                resolve();\n                return;\n            }\n\n            // Remove invalid\n            objects = objects.filter((_, i) => !isInvalid[i]);\n            if (isInvalid.some(Boolean)) {\n                notify('warning', 'One of the objects is not of Pipeline Manager format');\n            }\n\n            const isSpecification = objects.map(isSpecificationFunc);\n            const isDataflow = objects.map(isDataflowFunc);\n            let specification;\n            let dataflow;\n\n            if (isSpecification.every(Boolean)) {\n                // [spec], [spec, spec]\n                if (objects.length > 1) {\n                    notify('warning', 'Two specifications provided, using the first one.');\n                }\n                [specification] = objects;\n            } else if (isDataflow.every(Boolean)) {\n                // [dataflow], [dataflow, dataflow]\n                if (objects.length > 1) {\n                    notify('warning', 'Two dataflows provided, using the first one.');\n                }\n                [dataflow] = objects;\n            } else if (isSpecification.some(Boolean) && isDataflow.some(Boolean)) {\n                // [spec, dataflow], [dataflow, spec]\n                if (isSpecification[0]) [specification, dataflow] = objects;\n                else [dataflow, specification] = objects;\n            }\n\n            let isValidSpec = true;\n            if (specification) {\n                if (externalApplicationManager.isConnected()) {\n                    NotificationHandler.showToast(\n                        'warning',\n                        'Specification is managed by an external application.',\n                    );\n                    isValidSpec = false;\n                } else {\n                    const errors = await updateEditorSpecification(specification);\n                    isValidSpec = !errors.length;\n                }\n            }\n\n            if (isValidSpec && dataflow) {\n                await updateDataflow(dataflow);\n            }\n\n            resolve();\n        };\n\n        const onDrop = async (event) => {\n            event.preventDefault();\n            event.dataTransfer.dropEffect = 'copy';\n            const files = [];\n            if (event.dataTransfer.items) {\n                [...event.dataTransfer.items].filter(\n                    (item) => item.kind === 'file',\n                ).forEach(\n                    (item) => files.push(item.getAsFile()),\n                );\n            } else {\n                files.push(...event.dataTransfer.files);\n            }\n            await loadFiles(files);\n        };\n\n        props.viewModel.editor.events.setLoad = new BaklavaEvent();\n        props.viewModel.editor.events.setLoad.subscribe('editor', (value) => {\n            emit('setLoad', value);\n        });\n\n        const center = () => {\n            editorManager.centerZoom();\n        };\n\n        const returnFromSubgraph = () => {\n            editorManager.returnFromSubgraph();\n        };\n\n        const showWelcome =\n            computed(() => editorManager.baklavaView.welcome &&\n                !editorManager.baklavaView.editor.readonly &&\n                !nodes.value.length &&\n                !editorManager.editor.isInSubgraph());\n\n        return {\n            el,\n            counter,\n            selectedNodes,\n            nodeContainerStyle,\n            onRightPointerUp,\n            onDrop,\n            nodes,\n            keyDown,\n            keyUp,\n            selectNode,\n            rectangleSelection,\n            greyedOutNodes,\n            temporaryConnection: temporaryConnection.temporaryConnection,\n            temporaryConnectionRender: temporaryConnection.render,\n            mouseWheel: panZoom.onMouseWheel,\n            dragging: panZoom.dragging,\n            changeHoveredConnections,\n            highlightConnections,\n            connRefs,\n            clearHighlight,\n            readonly,\n            hideHud,\n            scale,\n            visibleConnections,\n            visibleNodes,\n            ignoredNodes,\n            highlightInterfaces,\n            editorStyle,\n            zoomIn: panZoom.onZoomIn,\n            zoomOut: panZoom.onZoomOut,\n            center,\n            returnFromSubgraph,\n            isInSubgraph,\n            preview,\n            showWelcome,\n            loadFiles,\n        };\n    },\n});\n</script>\n","<!--\nCopyright (c) 2022-2024 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nInterface that is used to display inputs, outputs and properties of a node.\n\nThe custom implementations introduces wrapper functions that prevent the user\nfrom creating and deleting connections or altering nodes' values if the editor is read-only.\n-->\n\n<template>\n    <transition name=\"slide-fade\">\n        <div\n            v-show=\"modelValue\"\n            ref=\"el\"\n            class=\"baklava-context-menu\"\n            :class=\"classes\"\n            :style=\"styles\"\n        >\n            <template v-if=\"itemsWithHoverProperty.length === 0\">\n                <div\n                    class=\"readonly item\"\n                    style=\"cursor: default\"\n                >\n                    <div class=\"text\"><i>No resources</i></div>\n                </div>\n            </template>\n            <template v-for=\"(item, index) in itemsWithHoverProperty\">\n                <div\n                    v-if=\"item.url === undefined\"\n                    :key=\"`i-${index}`\"\n                    class=\"item\"\n                    :class=\"{ submenu: !!item.submenu, '--disabled': !!item.disabled }\"\n                    @click.stop=\"onClick(item)\"\n                >\n                    <div class=\"icon\">\n                        <component v-if=\"item.icon !== undefined\" :is=\"item.icon\"></component>\n                    </div>\n                    <div class=\"text\">{{ item.label }}</div>\n                </div>\n                <a\n                    v-else\n                    :key=\"item.name\"\n                    :href=\"item.url\"\n                    class=\"item\"\n                    target=\"_blank\"\n                    draggable=\"false\"\n                    @click.stop=\"onClick(item)\"\n                >\n                    <div class=\"icon\">\n                        <img\n                            v-if=\"getIconPath(item.icon) !== undefined\"\n                            :src=\"getIconPath(item.icon)\"\n                            :alt=\"item.name\"\n                            draggable=\"false\"\n                        />\n                    </div>\n                    <div class=\"text\">{{ item.name }}</div>\n                </a>\n                <hr v-if=\"item.endSection\" :key=\"`hr-${index}`\" />\n            </template>\n        </div>\n    </transition>\n</template>\n\n<script>\nimport {\n    defineComponent, ref, onMounted, nextTick,\n} from 'vue';\nimport { Components, useViewModel } from '@baklavajs/renderer-vue';\n\nexport default defineComponent({\n    extends: Components.ContextMenu,\n    props: {\n        urls: {\n            required: false,\n            default: [],\n        },\n    },\n    emits: ['update:modelValue', 'click', 'sizeUpdate'],\n    setup(props, context) {\n        const {\n            el,\n            styles,\n            classes,\n            itemsWithHoverProperty,\n        } = // eslint-disable-line object-curly-newline\n            Components.ContextMenu.setup(props, context);\n\n        const { viewModel } = useViewModel();\n        const getIconPath = (name) => viewModel.value.cache[`./${name}`] ?? name;\n\n        const justOpened = ref(true);\n\n        onMounted(async () => {\n            await nextTick();\n            const size = el.value.getBoundingClientRect();\n            context.emit('sizeUpdate', size);\n        });\n\n        const closeContextMenu = (ev) => {\n            if (props.modelValue === true) {\n                // We need a counter so that this event is not fired right when the menu is opened\n                if (justOpened.value === false) {\n                    const elements = document.elementsFromPoint(ev.clientX, ev.clientY);\n                    // We only need to fire closing event if the click was\n                    // outside of the context menu. Otherwise `onClick` is fired.\n                    if (!elements.includes(el.value)) {\n                        window.removeEventListener('wheel', closeContextMenu);\n                        window.removeEventListener('pointerdown', closeContextMenu);\n                        context.emit('update:modelValue', false);\n                    }\n                    justOpened.value = true;\n                } else {\n                    justOpened.value = false;\n                }\n            }\n        };\n\n        window.addEventListener('wheel', closeContextMenu);\n        window.addEventListener('pointerdown', closeContextMenu);\n\n        const onClick = (item) => {\n            context.emit('click', item.value);\n            context.emit('update:modelValue', false);\n        };\n\n        return {\n            el,\n            styles,\n            classes,\n            itemsWithHoverProperty,\n            onClick,\n            getIconPath,\n        };\n    },\n});\n</script>\n","import { render } from \"./ContextMenu.vue?vue&type=template&id=a8bdafca\"\nimport script from \"./ContextMenu.vue?vue&type=script&lang=js\"\nexport * from \"./ContextMenu.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","<!--\nCopyright (c) 2022-2025 Antmicro <www.antmicro.com>\n\nSPDX-License-Identifier: Apache-2.0\n-->\n\n<!--\nThe baklavajs functionality was fully copied to this component, as the original\nimplementation uses `<script setup>` which does not work well with `extends` feature.\n\nAside from the original source code, the custom node implements displaying name tags\nfor properties that do not display them, support for readonly mode that prevents the user\nfrom moving or deleting the nodes.\n -->\n\n<template>\n    <div\n        :id=\"node.id\"\n        ref=\"nodeRef\"\n        class=\"baklava-node\"\n        :class=\"classes\"\n        :style=\"styles\"\n        :data-node-type=\"node.type\"\n        @pointerdown.left.exact=\"(ev) => select(ev)\"\n        oncontextmenu=\"return false;\"\n    >\n        <div class=\"interface-cursor\">\n            <div class=\"line\" :style=\"interfaceCursorStyle\"></div>\n        </div>\n        <div\n            class=\"__title\"\n            ref=\"titleRef\"\n            :style=\"nodeTitleStyle\"\n            @pointerdown.left.exact=\"onMouseDown\"\n            @pointerdown.left=\"startDragWrapper($event)\"\n            @pointerdown.right=\"openContextMenuTitle\"\n            v-long-press:500=\"openContextMenuTitle\"\n        >\n            <img\n                class=\"__title-icon\"\n                v-if=\"iconPath !== undefined\"\n                :src=\"iconPath\"\n            >\n            <div v-if=\"!renaming\" class=\"__title-label\" v-html=\"DOMPurify.sanitize(nodeTitle)\">\n            </div>\n            <input\n                v-else\n                type=\"text\"\n                class=\"baklava-input\"\n                v-model=\"tempName\"\n                placeholder=\"Node Name\"\n                ref=\"renameField\"\n                v-click-outside=\"doneRenaming\"\n                @keydown=\"(ev) => ev.stopPropagation()\"\n                @keydown.enter=\"doneRenaming\"\n            />\n            <template v-if=\"nodeStyle.name !== undefined && nodeStyle.name !== null\">\n                <component\n                    v-if=\"nodeStyle.icon !== undefined\"\n                    class=\"__title-icon\"\n                    :is=\"nodeStyle.icon\"\n                    :imgURI=\"nodeStyle.name\"\n                />\n                <img\n                    v-else\n                    class=\"__title-icon\"\n                    :src=\"nodeStyle.name\"\n                />\n             </template>\n            <icons.Subgraph\n                class=\"__subgraph-icon\"\n                v-if=\"isGraphNode || nodeHasRelatedGraphs\"\n            />\n            <div\n                v-if=\"pillText !== undefined\"\n                class=\"pill\"\n                :style=\"nodePillStyle\"\n                v-html=\"DOMPurify.sanitize(pillText)\"\n            />\n            <CustomContextMenu\n                v-if=\"showContextMenuTitle\"\n                v-model=\"showContextMenuTitle\"\n                :x=\"contextMenuTitleX\"\n                :y=\"contextMenuTitleY\"\n                :items=\"contextMenuTitleItems\"\n                :urls=\"nodeURLs\"\n                :style=\"contextMenuStyle\"\n                @pointerdown.left.stop\n                @click=\"onContextMenuTitleClick\"\n                @sizeUpdate=\"onContextMenuSizeUpdate\"\n            />\n        </div>\n\n        <div\n            class=\"__content\"\n            @pointerdown.right=\"openContextMenuTitle\"\n            >\n            <!-- Properties -->\n            <div class=\"__properties\">\n                <div v-for=\"input in displayedProperties\" :key=\"input.id\">\n                    {{ getOptionName(input.componentName) ? `${input.name}:` : '' }}\n                    <CustomInterface\n                        :node=\"node\"\n                        :intf=\"input\"\n                        :toggleGroup=\"toggleGroup\"\n                        :updateDynamicInterfaces=\"updateDynamicInterfaces\"\n                    />\n                </div>\n            </div>\n\n            <div class=\"__interfaces\">\n                <!-- Outputs -->\n                <div class=\"__outputs\" ref=\"rightSocketsRefs\">\n                    <template v-for=\"output in displayedRightRows\">\n                        <CustomInterface\n                            :key=\"output.id\"\n                            v-if=\"output\"\n                            @pointerdown.left.shift=\"pickInterface(output, $event)\"\n                            @pointerdown.right.exact=\"openContextMenuInterface(output, $event)\"\n                            v-long-press-to-right:500\n                            :node=\"node\"\n                            :intf=\"output\"\n                            :highlighted=\"props.interfaces?.includes(output)\"\n                            :picked=\"isPickedInterface(output)\"\n                            :switchSides=\"switchSides\"\n                        />\n                        <!-- eslint-disable-next-line vue/require-v-for-key -->\n                        <div v-else class=\"baklava-node-interface --output\">&nbsp;</div>\n                    </template>\n                </div>\n\n                <!-- Inputs -->\n                <div class=\"__inputs\" ref=\"leftSocketsRefs\">\n                    <template v-for=\"input in displayedLeftRows\">\n                        <CustomInterface\n                            :key=\"input.id\"\n                            v-if=\"input\"\n                            @pointerdown.left.shift=\"pickInterface(input, $event)\"\n                            @pointerdown.right=\"openContextMenuInterface(input, $event)\"\n                            v-long-press-to-right:500\n                            :node=\"node\"\n                            :intf=\"input\"\n                            :highlighted=\"props.interfaces?.includes(input)\"\n                            :picked=\"isPickedInterface(input)\"\n                            :switchSides=\"switchSides\"\n                        />\n                        <!-- eslint-disable-next-line vue/require-v-for-key -->\n                        <div v-else class=\"baklava-node-interface --input\">&nbsp;</div>\n                    </template>\n                </div>\n            </div>\n\n            <CustomContextMenu\n                v-if=\"showContextMenuInterface\"\n                v-model=\"showContextMenuInterface\"\n                :x=\"contextMenuInterfaceX\"\n                :y=\"contextMenuInterfaceY\"\n                :items=\"contextMenuInterfaceItems\"\n                :style=\"contextMenuStyle\"\n                @click=\"onContextMenuInterfaceClick\"\n            />\n        </div>\n    </div>\n</template>\n\n<script setup>\n/* eslint-disable object-curly-newline */\nimport { ref, computed, toRef, onUpdated, onMounted, nextTick, watch } from 'vue';\nimport { useViewModel, useGraph } from '@baklavajs/renderer-vue';\nimport { AbstractNode } from '@baklavajs/core';\nimport DOMPurify from 'dompurify';\n\nimport useGroupDragMove from './useGroupDragMove';\nimport CustomInterface from './CustomInterface.vue';\nimport CustomContextMenu from './ContextMenu.vue';\nimport { gridSnapper } from '../core/snappers';\nimport icons from '../icons/index';\nimport doubleClick from '../core/doubleClick.js';\nimport { getOptionName, updateInterfacePosition, removeNode } from './CustomNode.js';\nimport {\n    startTransaction, commitTransaction,\n} from '../core/History.ts';\n\nimport EditorManager, { DEFAULT_GRAPH_NODE_TYPE } from '../core/EditorManager';\nimport NotificationHandler from '../core/notifications.js';\nimport getExternalApplicationManager from '../core/communication/ExternalApplicationManager';\n\nimport { configurationState, menuState } from '../core/nodeCreation/ConfigurationState.ts';\n\n// Baklavajs implementation\n\nconst props = defineProps({\n    node: AbstractNode,\n    selected: Boolean,\n    greyedOut: Boolean,\n    hidden: Boolean,\n    interfaces: Array,\n});\n\nconst emit = defineEmits(['select']);\n\nconst { viewModel } = useViewModel();\nconst { graph } = useGraph();\nconst movementStep = computed(() => viewModel.value.movementStep);\n\n// Template refs\nconst nodeRef = ref(null);\nconst titleRef = ref(null);\nconst renaming = ref(false);\nconst renameField = ref(null);\nconst tempName = ref('');\n\n// Reactive values\nconst node = toRef(props, 'node');\nconst nodeURLs = viewModel.value.editor.getNodeURLs(props.node.type);\nconst nodeColor = computed(() => viewModel.value.editor.getNodeColor(node.value));\nconst nodeTitleColor = computed(() => viewModel.value.editor.getTextColor(nodeColor.value));\nconst nodeCategory = viewModel.value.editor.getNodeCategory(props.node.type);\nconst isGraphNode = viewModel.value.editor.isGraphNode(props.node.type);\nconst nodeHasRelatedGraphs\n    = computed(() => viewModel.value.editor.nodeHasRelatedGraphs(node.value));\nconst pillText = computed(() => viewModel.value.editor.getPillText(node.value.type));\nconst pillColor = computed(() => viewModel.value.editor.getPillColor(node.value.type));\nconst pillTextColor = computed(() => viewModel.value.editor.getTextColor(pillColor.value));\n\nconst displayNoResources = !viewModel.value.editor.nodeURLsEmpty();\n\nconst displayedInputs = computed(() => Object.values(props.node.inputs).filter((ni) => !ni.hidden));\nconst displayedOutputs = computed(() =>\n    Object.values(props.node.outputs).filter((ni) => !ni.hidden),\n);\nconst displayedProperties = computed(() =>\n    Object.values(displayedInputs.value).filter((intf) => !intf.port),\n);\n\nconst editorManager = EditorManager.getEditorManagerInstance();\nconst externalApplicationManager = getExternalApplicationManager();\n// Watch properties\nObject.entries(props.node.inputs).forEach(([name, input]) => {\n    if (name.startsWith('property_')) {\n        let firstWatch = true;\n        watch(input, async (value) => {\n            if (!externalApplicationManager.isConnected()) {\n                firstWatch = true;\n                return;\n            }\n            if (firstWatch || !editorManager.notifyWhenChanged) {\n                firstWatch = false;\n                return;\n            }\n            const data = {\n                graph_id: props.node.graphInstance.id,\n                node_id: props.node.id,\n                properties: [],\n            };\n            data.properties.push({\n                id: value.id,\n                new_value: value.value,\n            });\n            await externalApplicationManager.notifyAboutChange('properties_on_change', data);\n        });\n    }\n});\n\n// Send message about changed position\nconst notifyPositionChanged = (position) => {\n    if (!externalApplicationManager.isConnected()) return;\n    externalApplicationManager.notifyAboutChange('position_on_change', {\n        graph_id: props.node.graphInstance.id,\n        node_id: props.node.id,\n        position: {\n            x: position.x,\n            y: position.y,\n        },\n    });\n};\n// Create watcher for position\nwatch(props.node.position, notifyPositionChanged);\n\nconst focusOnRename = () => {\n    renameField.value.focus();\n    renameField.value.select();\n};\n\n// Title context menu\nconst showContextMenuTitle = ref(false);\nconst contextMenuTitleX = ref(0);\nconst contextMenuTitleY = ref(0);\nconst contextMenuVisibility = ref('hidden');\nconst contextMenuPosition = ref(0);\n\nconst contextMenuStyle = computed(() => ({\n    'transform-origin': '0 0',\n    transform: `scale(${1 / graph.value.scaling})`,\n    visible: contextMenuVisibility.value,\n}));\n\nconst contextMenuTitleItems = computed(() => {\n    const items = [];\n    items.push({ value: 'sidebar', label: 'Details', icon: icons.Sidebar, endSection: true });\n    if (editorManager.baklavaView.settings.editableNodeTypes &&\n        node.value.type !== DEFAULT_GRAPH_NODE_TYPE) {\n        items.push(\n            { value: 'configure', label: 'Configure' },\n            { value: 'property', label: 'Add property' },\n            { value: 'interface', label: 'Add interface' },\n            { value: 'layer', label: 'Set layer' },\n            { value: 'delete-property', label: 'Delete property' },\n            { value: 'delete-interface', label: 'Delete interface', endSection: true },\n        );\n        if (!isGraphNode) {\n            items.push(\n                { value: 'addSubgraph', label: 'Add subgraph', icon: icons.Subgraph },\n                { value: 'addAndEditSubgraph', label: 'Add and edit subgraph', icon: icons.Subgraph },\n            );\n        }\n    }\n    if (isGraphNode) {\n        items.push({ value: 'editSubgraph', label: 'Edit Subgraph', icon: icons.Subgraph });\n    }\n    if (nodeHasRelatedGraphs.value) {\n        const nodeInstance = node.value;\n        const nodeType = viewModel.value.editor.nodeTypes.get(props.node.type);\n        const toEntries = (graphs) => graphs?.map(({ id, name }) => [id, name]) ?? [];\n\n        // Merge related graphs from node type and instance\n        const relatedGraphs = Object.entries({\n            ...Object.fromEntries(toEntries(nodeType.relatedGraphs)),\n            ...Object.fromEntries(toEntries(nodeInstance.relatedGraphs)),\n        });\n\n        relatedGraphs.forEach(([id, name]) => {\n            items.push({ value: `gotoRelatedGraph ${id}`, label: `Go to ${name} graph`, icon: icons.Subgraph });\n        });\n    }\n    if (items.length > 1) {\n        items.at(-1).endSection = true;\n    }\n\n    items.push(...nodeURLs);\n\n    if (!viewModel.value.editor.readonly) {\n        if (items.length > 1) {\n            items.at(-1).endSection = true;\n        }\n        items.push(\n            { value: 'rename', label: 'Rename', icon: icons.Pencil },\n            { value: 'disconnect', label: 'Disconnect', icon: icons.Disconnect },\n            { value: 'delete', label: 'Delete', icon: icons.Bin },\n        );\n    }\n\n    // NOTE: This feature is disabled for now, as it is not fully implemented\n    const SUPPORT_NODE_UNWRAPPING = false;\n    if (SUPPORT_NODE_UNWRAPPING) {\n        if (isGraphNode) {\n            items.push({ value: 'unwrap', label: 'Unwrap Subgraph', icon: icons.Unwrap });\n        }\n    }\n\n    return items;\n});\n\nconst openSidebar = () => {\n    const { sidebar } = viewModel.value.displayedGraph;\n    sidebar.nodeId = props.node.id;\n    sidebar.visible = true;\n};\n\n/* eslint-disable default-case */\nconst onContextMenuTitleClick = async (action) => {\n    if (action !== 'delete' && action !== 'disconnect') {\n        const nodeData = {\n            name: props.node.type,\n            category: nodeCategory,\n            layer: props.node.layer,\n            color: nodeColor,\n        };\n\n        configurationState.editedType = nodeData.name;\n        configurationState.nodeData = nodeData;\n\n        let nodeInterfaces = [...displayedInputs.value, ...displayedOutputs.value];\n        nodeInterfaces = nodeInterfaces.filter((intf) => intf.direction !== undefined);\n        const configuredInterfaces = nodeInterfaces?.map((intf) => ({\n            name: intf?.name,\n            type: intf?.type,\n            direction: intf?.direction,\n        }));\n\n        /* eslint-disable no-underscore-dangle */\n        const properties = displayedProperties.value;\n        const configuredProperties = properties?.map((prop) => ({\n            name: prop?.name,\n            type: prop?.type,\n            default: prop?._value,\n            min: prop?.min,\n            max: prop?.max,\n            values: prop?.items,\n            step: prop?.step,\n            readonly: prop?.readonly,\n            dtype: prop?.dtype,\n        }));\n\n        configurationState.properties = configuredProperties;\n        configurationState.interfaces = configuredInterfaces;\n    }\n\n    const nodeData = {\n        name: props.node.type,\n        category: nodeCategory,\n        layer: props.node.layer,\n    };\n\n    if (action.includes('gotoRelatedGraph')) {\n        viewModel.value.editor.switchToRelatedGraph(action.replace(/^gotoRelatedGraph /, ''));\n    }\n    switch (action) {\n        case 'delete':\n            startTransaction();\n            // If the node is not selected, select it\n            if (!graph.value.selectedNodes.includes(props.node)) {\n                graph.value.selectedNodes.push(props.node);\n            }\n            graph.value.selectedNodes.forEach((n) => removeNode(n));\n            graph.value.selectedNodes = [];\n            commitTransaction();\n            break;\n        case 'rename':\n            tempName.value = props.node.title;\n            renaming.value = true;\n            await nextTick();\n            focusOnRename();\n            break;\n        case 'disconnect': {\n            startTransaction();\n            let interfaces = [...displayedInputs.value, ...displayedOutputs.value];\n            graph.value.selectedNodes.forEach((n) => {\n                interfaces = interfaces.concat(\n                    Object.entries(n.inputs).filter(([name, ni]) => !ni.hidden && !name.startsWith('property_')).map(([, ni]) => ni),\n                    Object.values(n.outputs).filter((ni) => !ni.hidden),\n                );\n            });\n            const nodeConnections = graph.value.connections.filter(\n                (c) =>\n                    (interfaces.find((i) => i === c.from || i === c.to) !== undefined),\n            );\n            nodeConnections.forEach((c) => {\n                graph.value.removeConnection(c);\n            });\n            commitTransaction();\n        } break;\n        case 'sidebar':\n            openSidebar();\n            break;\n        case 'editSubgraph': {\n            const errors = viewModel.value.editor.switchToSubgraph(props.node);\n            if (Array.isArray(errors) && errors.length) {\n                NotificationHandler.terminalLog('error', 'Dataflow is invalid', errors);\n            }\n            break;\n        }\n        case 'unwrap':\n            startTransaction();\n            removeNode(props.node, true);\n            commitTransaction();\n            break;\n        case 'configure':\n            menuState.configurationMenu.visible = true;\n            menuState.configurationMenu.addNode = false;\n            configurationState.nodeData = nodeData;\n            break;\n        case 'property':\n            menuState.propertyMenu = true;\n            break;\n        case 'interface':\n            menuState.interfaceMenu = true;\n            break;\n        case 'layer':\n            menuState.layerMenu = true;\n            break;\n        case 'addSubgraph': {\n            const errors = editorManager.addSubgraphToNode(props.node);\n            if (Array.isArray(errors) && errors.length) {\n                NotificationHandler.terminalLog('error', 'Creating subgraph failed', errors);\n            }\n            break;\n        }\n        case 'addAndEditSubgraph': {\n            let errors = editorManager.addSubgraphToNode(props.node);\n            if (Array.isArray(errors) && errors.length) {\n                NotificationHandler.terminalLog('error', 'Creating subgraph failed', errors);\n            }\n            const newGraphNode = viewModel.value.displayedGraph.nodes.filter(\n                (n) => n.type === props.node.type,\n            )[0];\n            errors = viewModel.value.editor.switchToSubgraph(newGraphNode);\n            if (Array.isArray(errors) && errors.length) {\n                NotificationHandler.terminalLog('error', 'Switching to subgraph failed', errors);\n            }\n            break;\n        }\n        case 'delete-property':\n            menuState.propertyListMenu = true;\n            break;\n        case 'delete-interface':\n            menuState.interfaceListMenu = true;\n            break;\n    }\n};\n\nconst onContextMenuSizeUpdate = (size) => {\n    // Adjust context menu position to fit into the viewport\n    const offset = contextMenuPosition.value + size.height + 200 - window.innerHeight;\n    if (offset > 0) {\n        contextMenuTitleY.value -= offset;\n    }\n    // Make it visible\n    contextMenuVisibility.value = 'visible';\n};\n\nconst canOpenContextMenu = computed(() =>\n    (contextMenuTitleItems.value.length === 0 && displayNoResources)\n        || contextMenuTitleItems.value.length > 0,\n);\n\nconst showContextMenuInterface = ref(false);\n\nconst openContextMenuTitle = (ev) => {\n    if (\n        canOpenContextMenu.value &&\n        showContextMenuTitle.value === false &&\n        showContextMenuInterface.value === false\n    ) {\n        // Render the menu but keep it hidden\n        showContextMenuTitle.value = true;\n\n        // Set initial menu position\n        const target = ev.currentTarget;\n        contextMenuTitleX.value = ev.offsetX;\n        contextMenuTitleY.value = ev.offsetY + target.offsetTop + 20;\n        contextMenuPosition.value = ev.clientY;\n    }\n};\n\nconst groupDragMove = useGroupDragMove(\n    toRef(props.node, 'position'),\n    props.node.id,\n    gridSnapper(movementStep),\n);\n\nconst classes = computed(() => ({\n    '--selected': props.selected,\n    '--dragging': groupDragMove.dragging.value,\n    '--two-column': !!props.node.twoColumn,\n    '--greyed-out': props.greyedOut,\n    '--hidden': props.hidden,\n    __readonly: viewModel.value.editor.readonly,\n}));\n\nconst styles = computed(() => ({\n    top: `${props.node.position?.y ?? 0}px`,\n    left: `${props.node.position?.x ?? 0}px`,\n    width: `${props.node.width ?? 300}px`,\n}));\n\nconst nodeTitle = computed(() => {\n    const title = props.node.highlightedTitle ?? props.node.title;\n    const type = props.node.highlightedType ?? props.node.type;\n\n    if (title === '' || props.node.title === props.node.type) {\n        return type;\n    }\n\n    return `${title} <pre class=\"subtitle\">${type}</pre>`;\n});\n\nconst select = (event) => {\n    emit('select', event);\n};\n\nlet abortDrag;\nlet stopDrag;\n\nconst cleanEvents = () => {\n    document.removeEventListener('pointermove', groupDragMove.onPointerMove);\n    document.removeEventListener('keyboard.escape', abortDrag);\n    document.removeEventListener('pointerup', stopDrag);\n};\n\nabortDrag = () => {\n    cleanEvents();\n};\n\nstopDrag = () => {\n    groupDragMove.onPointerUp();\n    cleanEvents();\n};\n\nconst startDrag = (ev) => {\n    if (!graph.value.selectedNodes.includes(props.node)) {\n        select(ev);\n    }\n\n    groupDragMove.onPointerDown(ev);\n    document.addEventListener('pointermove', groupDragMove.onPointerMove);\n    document.addEventListener('keyboard.escape', abortDrag);\n    document.addEventListener('pointerup', stopDrag);\n};\n\nconst doneRenaming = () => {\n    graph.value.findNodeById(props.node.id).title = tempName.value;\n    renaming.value = false;\n};\n\nconst onRender = () => {\n    if (nodeRef.value) {\n        viewModel.value.hooks.renderNode.execute({ node: props.node, el: nodeRef.value });\n    }\n};\n\nonMounted(onRender);\nonUpdated(onRender);\n\n// ----------\n\n/**\n * Wrapper that prevents node moving if the editor is in read-only mode.\n *\n * @param ev Event\n */\nconst startDragWrapper = (ev) => {\n    if (!viewModel.value.editor.readonly) {\n        startDrag(ev);\n    }\n};\n\nconst openDoubleClick = doubleClick(700, () => {\n    openSidebar();\n});\n\n/* eslint-disable vue/no-mutating-props,no-param-reassign */\nconst onMouseDown = () => {\n    const { sidebar } = viewModel.value.displayedGraph;\n    if (sidebar.visible) {\n        sidebar.nodeId = props.node.id;\n    }\n\n    openDoubleClick();\n};\n\nconst displayedLeftSockets = computed(() =>\n    Object.values([...displayedInputs.value, ...displayedOutputs.value])\n        .filter((intf) => intf.side === 'left' && intf.port)\n        .sort((intf1, intf2) => intf1.sidePosition - intf2.sidePosition),\n);\n\nconst displayedRightSockets = computed(() =>\n    Object.values([...displayedInputs.value, ...displayedOutputs.value])\n        .filter((intf) => intf.side === 'right' && intf.port)\n        .sort((intf1, intf2) => intf1.sidePosition - intf2.sidePosition),\n);\n\nconst getRows = (sockets) => {\n    if (!sockets.length) {\n        return [];\n    }\n\n    const numOfLines = Math.max(\n        displayedLeftSockets.value.at(-1)?.sidePosition ?? 0,\n        displayedRightSockets.value.at(-1)?.sidePosition ?? 0,\n    );\n\n    let numOfSocket = 0;\n    const rows = [];\n\n    for (let i = 0; i <= numOfLines; i += 1) {\n        if (sockets[numOfSocket]?.sidePosition === i) {\n            rows.push(sockets[numOfSocket]);\n            numOfSocket += 1;\n        } else {\n            rows.push(undefined);\n        }\n    }\n    return rows;\n};\n\nconst displayedRightRows = computed(() => getRows(displayedRightSockets.value));\nconst displayedLeftRows = computed(() => getRows(displayedLeftSockets.value));\n\nwatch(displayedProperties, () => {\n    displayedProperties.value.forEach((prop) => {\n        if (prop.setDefaultComponent !== undefined) {\n            prop.setDefaultComponent();\n        }\n    });\n}, {\n    immediate: true,\n});\n\nconst path = viewModel.value.editor.getNodeIconPath(props.node.type);\nconst iconPath = viewModel.value.cache[`./${path}`] ?? path;\n\n// Metadata (\"icon\" is not a string) > Predefined > Cached > Arbitrary URI\nconst nodeStyle = computed(() => {\n    let icon;\n    let name = viewModel.value.editor.getStyleIcon(node.value.type);\n\n    if (typeof name === 'object' && name !== null) {\n        name = editorManager.getMetadataIcon(name);\n    }\n    if (icons[name] !== undefined) {\n        icon = icons[name];\n    } else if (viewModel.value.cache[`./${name}`] !== undefined) {\n        icon = icons.Placeholder;\n        name = viewModel.value.cache[`./${name}`];\n    }\n\n    return { icon, name };\n});\n\n// Interface modification\n\nlet newSocketIndex;\nlet chosenInterface;\n\nconst leftSocketsRefs = ref(null);\nconst rightSocketsRefs = ref(null);\n\nconst interfaceCursorStyle = ref({\n    top: '0px',\n    left: '0px',\n    display: 'none',\n});\n\nconst nodeTitleStyle = computed(() => {\n    if (!viewModel.value.editor.readonly) {\n        return {\n            cursor: 'drag',\n            backgroundColor: nodeColor.value,\n            color: nodeTitleColor.value,\n        };\n    }\n\n    if (canOpenContextMenu.value) {\n        return {\n            cursor: 'pointer',\n            backgroundColor: nodeColor.value,\n            color: nodeTitleColor.value,\n        };\n    }\n\n    return {\n        cursor: 'default',\n        backgroundColor: nodeColor.value,\n        color: nodeTitleColor.value,\n    };\n});\n\nconst nodePillStyle = computed(() => ({\n    cursor: 'default',\n    backgroundColor: pillColor.value,\n    color: pillTextColor.value,\n}));\n\nconst isPickedInterface = (intf) => intf === chosenInterface;\n\nconst assignNewPosition = () => {\n    updateInterfacePosition(\n        props.node,\n        chosenInterface,\n        chosenInterface.side,\n        newSocketIndex,\n        true,\n    );\n};\n\nconst dragInterface = (ev) => {\n    let sockets;\n    if (chosenInterface.side === 'right') {\n        sockets = rightSocketsRefs.value;\n    } else if (chosenInterface.side === 'left') {\n        sockets = leftSocketsRefs.value;\n    }\n\n    // Finding the first interface that is lower than the cursor\n    let socket = [...sockets.children].findIndex((socketRef) => {\n        const boundingRect = socketRef.getBoundingClientRect();\n        return boundingRect.bottom > ev.clientY;\n    });\n    newSocketIndex = socket;\n\n    if (socket === -1) {\n        socket = sockets.children.length - 1;\n        newSocketIndex = sockets.children.length - 1;\n    }\n\n    const el = sockets.children[socket];\n    interfaceCursorStyle.value = {\n        top: `${el.offsetTop + el.offsetHeight / 2 - 2.5}px`,\n        display: 'block',\n    };\n\n    if (chosenInterface.side === 'right') {\n        interfaceCursorStyle.value.right = '-0.7em';\n    } else if (chosenInterface.side === 'left') {\n        interfaceCursorStyle.value.left = '-0.7em';\n    }\n};\n\nconst dropInterface = () => {\n    assignNewPosition();\n\n    chosenInterface = undefined;\n    interfaceCursorStyle.value = {\n        top: '0px',\n        left: '0px',\n        right: '0px',\n        display: 'none',\n    };\n\n    document.removeEventListener('pointermove', dragInterface);\n    document.removeEventListener('pointerup', dropInterface);\n};\n\nconst pickInterface = (intf, ev) => {\n    chosenInterface = intf;\n    dragInterface(ev);\n\n    document.addEventListener('pointermove', dragInterface);\n    document.addEventListener('pointerup', dropInterface);\n};\n\n// Interface context menu\n\nconst contextMenuInterfaceX = ref(0);\nconst contextMenuInterfaceY = ref(0);\n\nconst createContextMenuInterfaceItems = () => {\n    const items = [];\n\n    if (chosenInterface !== undefined) {\n        const intfMode = (chosenInterface.externalName === undefined ?\n            { value: 'SetExternalName', label: 'Expose Interface' } :\n            { value: 'UnsetExternalName', label: 'Privatize Interface' }\n        );\n        items.push(intfMode);\n    }\n\n    items.push(\n        { value: 'SpaceUp', label: 'Space Up' },\n        { value: 'SpaceDown', label: 'Space Down' },\n        { value: 'MoveUp', label: 'Move Up' },\n        { value: 'MoveDown', label: 'Move Down' },\n    );\n\n    return items;\n};\n\nconst contextMenuInterfaceItems = ref(createContextMenuInterfaceItems());\n\n/* eslint-disable default-case */\nconst onContextMenuInterfaceClick = (action) => {\n    switch (action) {\n        case 'SetExternalName':\n            viewModel.value.editor.exposeInterface(\n                graph.value.id,\n                chosenInterface,\n            );\n            break;\n        case 'UnsetExternalName':\n            viewModel.value.editor.privatizeInterface(\n                graph.value.id,\n                chosenInterface,\n            );\n            break;\n        case 'MoveUp':\n            if (chosenInterface.sidePosition === 0) {\n                chosenInterface = undefined;\n                break;\n            }\n            newSocketIndex = chosenInterface.sidePosition - 1;\n            dropInterface();\n            break;\n        case 'MoveDown':\n            newSocketIndex = chosenInterface.sidePosition + 1;\n            dropInterface();\n            break;\n        case 'SpaceUp':\n        case 'SpaceDown': {\n            const sockets =\n                chosenInterface.side === 'right'\n                    ? displayedRightRows.value\n                    : displayedLeftRows.value;\n            const comparison = action === 'SpaceDown' ? (a, b) => a > b : (a, b) => a >= b;\n            Object.values(sockets).forEach((intf) => {\n                if (intf !== undefined &&\n                comparison(intf.sidePosition, chosenInterface.sidePosition)) {\n                    intf.sidePosition += 1; // eslint-disable-line no-param-reassign\n                }\n            });\n            break;\n        }\n    }\n};\n\nconst openContextMenuInterface = (intf, ev) => {\n    if (!viewModel.value.editor.readonly && showContextMenuInterface.value === false) {\n        chosenInterface = intf;\n        contextMenuInterfaceItems.value = createContextMenuInterfaceItems();\n        if (chosenInterface.side === 'right') {\n            contextMenuInterfaceX.value = ev.currentTarget.offsetLeft + 162.5;\n            contextMenuInterfaceY.value = ev.currentTarget.offsetTop + 12.5;\n        } else if (chosenInterface.side === 'left') {\n            contextMenuInterfaceX.value =\n                ev.currentTarget.offsetLeft - ev.currentTarget.offsetWidth + 162.5;\n            contextMenuInterfaceY.value = ev.currentTarget.offsetTop + 12.5;\n        }\n\n        showContextMenuInterface.value = true;\n    }\n};\n\nwatch(showContextMenuInterface, () => {\n    if (showContextMenuInterface.value === false) {\n        chosenInterface = undefined;\n    }\n});\n\nconst toggleGroup = (intf) => {\n    intf.group.forEach((name) => {\n        props.node.inputs[name].hidden = !intf.value;\n    });\n};\n\nconst updateDynamicInterfaces = (intf) => {\n    props.node.updateDynamicInterfaces(intf);\n};\n\n/* eslint-disable no-param-reassign */\nconst switchSides = (intf) => {\n    if (intf.side === 'left') {\n        updateInterfacePosition(props.node, intf, 'right');\n    } else {\n        updateInterfacePosition(props.node, intf, 'left');\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.interface-cursor {\n    position: relative;\n    top: 0;\n    left: 0;\n\n    & > .line {\n        position: absolute;\n        height: 0.2em;\n        width: 1.4em;\n        background-color: $gold;\n        z-index: 100;\n    }\n}\n.pill {\n    border-radius: 25px;\n    transform: translate(-20%, -50%);\n    font-size: 0.75em;\n    padding: 5px;\n    width: auto;\n    height: auto;\n    z-index: 1;\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    right: 0;\n}\n\n</style>\n","import script from \"./CustomNode.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./CustomNode.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./CustomNode.vue?vue&type=style&index=0&id=09ce9074&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-09ce9074\"]])\n\nexport default __exports__","import { render } from \"./Editor.vue?vue&type=template&id=93f69ae2\"\nimport script from \"./Editor.vue?vue&type=script&lang=js\"\nexport * from \"./Editor.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["PipelineManagerEditor","preview","_hideHud","hideHud","this","val","_readonly","readonly","allowLoopbacks","nodeIcons","Map","nodeColors","baseURLs","baseIconUrls","nodeURLs","nodeStyles","layoutManager","LayoutManager","subgraphStack","parentNodes","subgraphStackGraphTypeEnum","SUBGRAPH","RELATEDGRAPH","editorManager","newRootGraph","undefined","registerGraph","graph","customGraph","events","addAnchor","removeAnchor","editNode","graphNode","checkConnection","from","to","connectionAllowed","error","fromNode","findNodeById","nodeId","toNode","editor","direction","tmp","isInput","connections","some","c","maxConnectionsCount","connectionCount","id","type","fromTypes","String","toTypes","find","t","includes","emit","prevented","hooks","execute","hr","errors","dummyConnection","connectionsInDanger","anchor","connection","position","anchorToAdd","x","y","anchors","splice","replaceNode","oldNode","newNodeName","oldPosition","newNodeInstance","nodeTypes","get","title","Object","entries","inputs","outputs","forEach","name","intf","prototype","hasOwnProperty","call","side","sidePosition","componentName","value","interfaces","values","filter","connectionsToRestore","conn","newConn","push","removeNode","addNode","internalAddConnection","node","graphLoadingState","beforeAddNode","nodeEvents","addTarget","nodeHooks","template","newState","JSON","parse","stringify","save","_nodes","nodes","n","onPlaced","destroy","load","state","i","length","removeConnection","nodeInformation","nodeErrors","Array","isArray","fromIf","findNodeInterface","toIf","port","checkConnectionResult","connectionToRemove","instance","index","size","sizes","map","HTMLelement","document","getElementById","width","offsetWidth","height","offsetHeight","margin","rightmostX","Math","max","leftmostX","min","bottommostY","topmostY","graphHeight","graphWidth","scaling","panning","removeSelectedNodes","selectedNodes","beforeRemoveNode","indexOf","onDestroy","removeTarget","removeNodeOnly","obtainExposedNames","exposedNames","externalName","isIncorrectExternalName","sameExposedNames","sameInterfaceNames","keys","split","resolveNewExposedName","suffix","tmpName","createPipelineManagerGraph","super","subgraphStackFrames","isInSubgraph","_graph","frame","backFromSubgraph","currentGraphId","currentGraphState","dataflowState","graphs","recurrentSubgraphSave","subgraph","graphState","_","relatedGraphs","graphObject","el","color","getNodeColor","entryGraph","reverse","switchToRelatedGraph","switchToSubgraph","deepCleanEditor","suppressHistory","bind","cleanEditor","graphName","graphInstance","unregisterGraphs","unregisterGraph","unregisterNodes","nodeKey","unregisterNodeType","registerNodeType","options","beforeRegisterNodeType","nodeInstance","_nodeTypes","set","category","isCategory","subgraphId","style","pill","preventCentering","loadOnly","templateName","ir","clearRegistry","readonlySetting","usedSubgraphs","Set","clear","fittingTemplate","has","add","setNodeColor","graphToLoad","preparedSubgraphState","prepareSubgraphErrors","prepareSubgraphInstance","err","toString","loaded","window","dfs","path","returnedPath","layoutEngine","activeAlgorithm","applyAutolayout","centerZoom","privatizeInterface","graphId","g","graphIds","sharedInterface","getRegisteredInterface","graphIdIdx","findIndex","updateExposedInterfaces","deleteRegisteredInterface","exposeInterface","editorSize","Error","terminalHeight","getElementsByClassName","navbarHeight","nodePalette","sideBarWidth","paletteRect","getBoundingClientRect","right","editorHeight","innerHeight","editorWidth","innerWidth","scalingY","scalingX","translationX","translationY","nodeURLsEmpty","getNodeURLs","nodeName","urls","fullUrls","urlName","url","getNodeIconPath","getPillText","nodeType","text","getNodeStyle","getNodeCategory","nodeColor","getStyleIcon","icon","assign","styleName","getPillColor","getTextColor","rgb","exec","r","parseInt","b","isGraphNode","nodeHasRelatedGraphs","addGraphTemplate","beforeAddGraphTemplate","_graphTemplates","graphTemplateEvents","graphTemplateHooks","customGraphNodeType","nodeInputs","newNodeOutputs","parsedInterfaces","prepareInterfaces","properties","parsedProperties","prepareProperties","newNodeInputs","nodeInterfaces","constructor","layer","twoColumn","description","extends","extending","siblings","beforeLoad","out","instanceName","privatize","evaluatedIntf","join","updateInterfaces","initialize","_title","update","privatizeInterfaces","newInterfaces","currentInterfaces","nodeIntf","key","container","removeInterface","newInputs","newOutputs","foundIntf","ni","pushGraphIdToRegistry","createSharedInterface","addInterface","newSubgraphNodeId","isRoot","newToSpecNodeIds","newInterfaceIds","specSubgraphNodeId","createNewNodeId","newId","getOrGenerate","factory","createNewInterfaceId","oldId","idMap","nonExposed","exposedNotInSubgraphNode","getOrGenerateInterfaceId","concat","addNewId","mapNodeInterfaces","reduce","acc","CreateCustomGraphNodeType","switchGraph","subgraphNode","_switchGraph","then","computeLayout","updateNodesPosition","wasCentered","switchToGraph","targetGraph","pop","relatedGraphID","relatedGraph","item","newGraph","changeTopLevelGraph","rootGraph","findInterface","intfId","unwrapSubgraph","subgraphNodes","meanX","sum","meanY","addedNode","subgraphNodeConnections","fromInterface","toInterface","createdConnection","addConnection","newAnchor","resetLocations","updatedGraph","updatedState","updateCurrentSubgraphName","NodeInterface","props","highlighted","Boolean","picked","switchSides","toggleGroup","default","required","updateDynamicInterfaces","tabindexValue","components","Arrow","setup","isConnected","showComponent","startHover","endHover","openSidebar","viewModel","beforeSetValue","unsubscribe","subscribe","prevent","group","setValue","endsWith","hovered","onMouseDown","doubleClick","displayArrow","arrowRotation","newClasses","__readonly","isExposed","setPort","editExternalName","externalNameInputIncorrect","externalNameInput","externalNames","inputExternalName","enableExternalNameEdit","e","preventDefault","focus","select","endHoverWrapper","externalNameInputCallback","target","externalNameFocusOutCallback","newExternalName","startHoverWrapper","ref","class","spellcheck","autocomplete","placeholder","blur","stopPropagation","noninteractable","scale","rotate","component","tabindex","getIconPath","cache","nodeRef","URLs","href","draggable","src","Cross","CustomInterface","CheckboxInterface","NodeSpecificationEditor","Tooltip","emits","_props","EditorManager","getEditorManagerInstance","baklavaView","displayedGraph","converter","smartIndentationFix","simpleLineBreaks","sidebar","prettyCategory","desc","html","makeHtml","match","hrefParts","newEnd","newHref","replace","nodeIcon","nodeIconPath","sidebarVisible","visible","newValue","tooltipRef","tooltip","sidebarRef","top","left","styles","onMouseMove","ev","movementX","displayedProperties","interfaceGroups","interfaceGroupsOutput","interfaceGroupsButtonClasses","interfaceGroupsCheckboxes","checkboxes","intfG","checkbox","hidden","enabledInterfaceGroups","parsedIntfName","intfDirection","groupName","enabledInterfaceGroupsCheckboxes","interfaceGroupsButton","toggleInterfaceGroup","replacementButtons","list","buttons","eName","button","newNode","nodeSiblings","extended","delete","replacementParents","replacementChildren","replacementSiblings","displayedName","startResize","addEventListener","removeEventListener","once","close","onPointerOver","clientX","offsetX","currentTarget","$el","clientWidth","clientY","offsetY","onPointerLeave","getOptionName","$isMobile","alt","settings","parent","child","sibling","input","output","scrollHandle","optionType","updateInterfacePosition","newSide","newSidePosition","swap","oldSidePosition","found","io","intfToMove","occupiedPositions","proposedPosition","unwrapGraph","ContextMenu","context","classes","itemsWithHoverProperty","justOpened","async","closeContextMenu","modelValue","elementsFromPoint","onClick","submenu","disabled","label","movementStep","titleRef","renaming","renameField","tempName","nodeTitleColor","nodeCategory","pillText","pillColor","pillTextColor","displayNoResources","displayedInputs","displayedOutputs","externalApplicationManager","startsWith","firstWatch","notifyWhenChanged","data","graph_id","node_id","new_value","notifyAboutChange","showContextMenuTitle","contextMenuTitleX","contextMenuTitleY","contextMenuVisibility","contextMenuPosition","contextMenuStyle","transform","contextMenuTitleItems","items","icons","Sidebar","endSection","editableNodeTypes","Subgraph","toEntries","fromEntries","at","Pencil","Disconnect","Bin","onContextMenuTitleClick","action","nodeData","editedType","configuredInterfaces","configuredProperties","prop","_value","step","dtype","terminalLog","configurationMenu","propertyMenu","interfaceMenu","layerMenu","addSubgraphToNode","newGraphNode","propertyListMenu","interfaceListMenu","onContextMenuSizeUpdate","offset","canOpenContextMenu","showContextMenuInterface","openContextMenuTitle","offsetTop","groupDragMove","useGroupDragMove","selected","dragging","greyedOut","nodeTitle","highlightedTitle","highlightedType","event","abortDrag","stopDrag","cleanEvents","onPointerMove","onPointerUp","doneRenaming","onRender","renderNode","openDoubleClick","displayedLeftSockets","sort","intf1","intf2","displayedRightSockets","getRows","sockets","numOfLines","numOfSocket","rows","displayedRightRows","displayedLeftRows","setDefaultComponent","immediate","iconPath","nodeStyle","getMetadataIcon","Placeholder","newSocketIndex","chosenInterface","leftSocketsRefs","rightSocketsRefs","interfaceCursorStyle","display","nodeTitleStyle","cursor","backgroundColor","nodePillStyle","isPickedInterface","dragInterface","socket","children","socketRef","bottom","dropInterface","pickInterface","contextMenuInterfaceX","contextMenuInterfaceY","createContextMenuInterfaceItems","intfMode","contextMenuInterfaceItems","onContextMenuInterfaceClick","comparison","a","openContextMenuInterface","offsetLeft","oncontextmenu","$event","onPointerDown","startDrag","sanitize","imgURI","loading","CustomNode","Panel","ParentMenu","PipelineManagerConnection","TemporaryConnection","NodePalette","RectangleSelection","WelcomeMenu","Zoom","Return","counter","nodeContainerStyle","keyDown","keyUp","connRefs","panZoom","temporaryConnection","highlightConnections","highlightInterfaces","rectangleSelection","selectedNodesCtrlBackup","searchQuery","greyedOutNodes","pressStartTime","editorStyle","unselectAllNodes","appendSelectMultipleNodes","selectionBoundingRect","boundingRect","pointersDown","selecting","onMouseUp","Date","onRightPointerUp","onRightPointerUpCtrl","shiftKey","ctrlKey","onRightPointerDownCtrl","onRightPointerDown","clearHighlight","it","ignoredLayers","ignorableLayers","layers","ignoredInterfacesTypes","temp","ignoredNodesTypes","nodeLayers","visibleNodes","ignoredNodes","ignoredNodesId","visibleConnections","highlightedNodes","old","newIds","oldIds","nodesAdded","nodesDeleted","added","deleted","connectionsAdded","connectionsDeleted","nodesSelected","nodesUnselected","unselected","nodeTitles","matchingNodes","query","resultTitle","resultType","score","nonMatchingNodes","defaultSpecification","VUE_APP_SPECIFICATION_PATH","defaultDataflow","VUE_APP_DATAFLOW_PATH","updateEditorSpecification","specification","warnings","info","validateSpecification","specificationVersion","version","updateDataflow","dataflow","loadDataflow","messageTitle","jsonrpc","JSONRPC","isJSONRPCResponse","source","client","receive","createID","isJSONRPCRequest","response","method","registerFrontendApplication","server","requestAdvanced","externalApp","postMessage","setShowNotification","updateMetadata","escapedsearch","location","search","urlParams","URLSearchParams","setting","specText","setLoad","status","ret","include","restoreShowNotification","loadFiles","files","resolve","notify","showToast","objects","file","Promise","all","isSpecificationFunc","o","includeGraphs","isDataflowFunc","isInvalid","every","isSpecification","isDataflow","isValidSpec","showWelcome","welcome","onDrop","dataTransfer","dropEffect","kind","getAsFile","selectNode","commandHandler","pressedKeys","temporaryConnectionRender","render","mouseWheel","onMouseWheel","changeHoveredConnections","elements","hoveredHtml","containsPoint","htmlEl","hov","removeHighlight","zoomIn","onZoomIn","zoomOut","onZoomOut","center","returnFromSubgraph","isHighlighted","floating"],"sourceRoot":""}