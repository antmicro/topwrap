{"version":3,"file":"js/49.4d34064d.js","mappings":";qGAWAA,EAAOC,QAAU,EAAjB,M,609ICGA,IA2IuBC,EAAYC,EAE7BC,EA7IFC,EAAK,EAAQ,MACbC,EAAU,iBAOVC,EAAsB,0BACtBC,EAAmB,WAyBvB,SAASC,EAASC,GAChB,IAAKA,GAAwB,iBAATA,EAClB,OAAO,EAIT,IAAIC,EAAQJ,EAAoBK,KAAKF,GACjCG,EAAOF,GAASN,EAAGM,EAAM,GAAGG,eAEhC,OAAID,GAAQA,EAAKJ,QACRI,EAAKJ,WAIVE,IAASH,EAAiBO,KAAKJ,EAAM,MAChC,OAIX,CArCAV,EAAQQ,QAAUA,EAClBR,EAAQe,SAAW,CAAEC,OAAQR,GAC7BR,EAAQiB,YA4CR,SAAsBC,GAEpB,IAAKA,GAAsB,iBAARA,EACjB,OAAO,EAGT,IAAIN,GAA6B,IAAtBM,EAAIC,QAAQ,KACnBnB,EAAQgB,OAAOE,GACfA,EAEJ,IAAKN,EACH,OAAO,EAIT,IAAiC,IAA7BA,EAAKO,QAAQ,WAAmB,CAClC,IAAIX,EAAUR,EAAQQ,QAAQI,GAC1BJ,IAASI,GAAQ,aAAeJ,EAAQK,cAC9C,CAEA,OAAOD,CACT,EAhEAZ,EAAQoB,UAyER,SAAoBX,GAClB,IAAKA,GAAwB,iBAATA,EAClB,OAAO,EAIT,IAAIC,EAAQJ,EAAoBK,KAAKF,GAGjCY,EAAOX,GAASV,EAAQC,WAAWS,EAAM,GAAGG,eAEhD,SAAKQ,IAASA,EAAKC,SAIZD,EAAK,EACd,EAxFArB,EAAQC,WAAasB,OAAOC,OAAO,MACnCxB,EAAQgB,OAgGR,SAAiBS,GACf,IAAKA,GAAwB,iBAATA,EAClB,OAAO,EAIT,IAAIL,EAAYf,EAAQ,KAAOoB,GAC5BZ,cACAa,OAAO,GAEV,OAAKN,GAIEpB,EAAQE,MAAMkB,KAHZ,CAIX,EA9GApB,EAAQE,MAAQqB,OAAOC,OAAO,MAqHPvB,EAlHVD,EAAQC,WAkHcC,EAlHFF,EAAQE,MAoHnCC,EAAa,CAAC,QAAS,cAAUwB,EAAW,QAEhDJ,OAAOK,KAAKxB,GAAIyB,SAAQ,SAA0BpB,GAChD,IAAIG,EAAOR,EAAGK,GACVY,EAAOT,EAAKX,WAEhB,GAAKoB,GAASA,EAAKC,OAAnB,CAKArB,EAAWQ,GAAQY,EAGnB,IAAK,IAAIS,EAAI,EAAGA,EAAIT,EAAKC,OAAQQ,IAAK,CACpC,IAAIV,EAAYC,EAAKS,GAErB,GAAI5B,EAAMkB,GAAY,CACpB,IAAIW,EAAO5B,EAAWgB,QAAQf,EAAGF,EAAMkB,IAAYY,QAC/CC,EAAK9B,EAAWgB,QAAQP,EAAKoB,QAEjC,GAAyB,6BAArB9B,EAAMkB,KACPW,EAAOE,GAAOF,IAASE,GAAyC,iBAAnC/B,EAAMkB,GAAWM,OAAO,EAAG,KAEzD,QAEJ,CAGAxB,EAAMkB,GAAaX,CACrB,CAtBA,CAuBF,G","sources":["webpack://pipeline-manager/./node_modules/mime-db/index.js","webpack://pipeline-manager/./node_modules/mime-types/index.js"],"sourcesContent":["/*!\n * mime-db\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2022 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module exports.\n */\n\nmodule.exports = require('./db.json')\n","/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n"],"names":["module","exports","extensions","types","preference","db","extname","EXTRACT_TYPE_REGEXP","TEXT_TYPE_REGEXP","charset","type","match","exec","mime","toLowerCase","test","charsets","lookup","contentType","str","indexOf","extension","exts","length","Object","create","path","substr","undefined","keys","forEach","i","from","source","to"],"sourceRoot":""}