from abc import ABC, abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Generic, Iterator, TypeVar

from topwrap.model.module import Module

_T = TypeVar("_T")


@dataclass
class BackendOutputInfo:
    """Output of the backend's serialization process"""

    #: The filename for this output as suggested by the specific backend
    #: E.g. ``dataflow.kpm.json`` or ``axibridge.sv``
    filename: str

    #: The content of the file generated by the backend
    content: str

    def save(self, path: Path):
        """
        Save this output as a file on the filesystem under a given path

        :param path: The path where to save the file. If it points only to a
            directory, then the file is saved with the ``self.filename`` name.
        """

        path = path if not path.is_dir() else path / self.filename
        with open(path, "w") as f:
            f.write(self.content)


class Backend(ABC, Generic[_T]):
    """
    The base class for backend implementations used to convert our IR
    represented by the ``Module`` class into various external formats,
    represented by the generic parameter ``_T``.
    """

    @abstractmethod
    def represent(self, module: Module, /) -> _T:
        """
        Convert the IR into an arbitrary custom external format.
        """

    @abstractmethod
    def serialize(self, repr: _T, /) -> Iterator[BackendOutputInfo]:
        """
        Serialize the custom format object into one or more text files,
        represented by their content, alongside with additional
        information about them, like the suggested filename.
        """
