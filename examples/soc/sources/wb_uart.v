// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : wb_uart.v
// Device     : xc7k70tfbg484-3
// LiteX sha1 : a064ced
// Date       : 2024-04-18 14:06:41
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module wb_uart (
    input  wire          sys_clk,
    input  wire          sys_rst,
    output reg           serial1_tx,
    input  wire          serial1_rx,
    input  wire   [29:0] csr_wishbone_adr,
    input  wire   [31:0] csr_wishbone_mosi,
    output reg    [31:0] csr_wishbone_miso,
    input  wire    [3:0] csr_wishbone_sel,
    input  wire          csr_wishbone_cyc,
    input  wire          csr_wishbone_stb,
    output reg           csr_wishbone_ack,
    input  wire          csr_wishbone_we,
    input  wire    [2:0] csr_wishbone_cti,
    input  wire    [1:0] csr_wishbone_bte,
    output wire          csr_wishbone_err
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          tx_sink_valid;
reg           tx_sink_ready = 1'd0;
wire          tx_sink_first;
wire          tx_sink_last;
wire    [7:0] tx_sink_payload_data;
reg     [7:0] tx_data = 8'd0;
reg     [3:0] tx_count = 4'd0;
reg           tx_enable = 1'd0;
reg           tx_tick = 1'd0;
reg    [31:0] tx_phase = 32'd0;
reg           rx_source_valid = 1'd0;
wire          rx_source_ready;
reg           rx_source_first = 1'd0;
reg           rx_source_last = 1'd0;
reg     [7:0] rx_source_payload_data = 8'd0;
reg     [7:0] rx_data = 8'd0;
reg     [3:0] rx_count = 4'd0;
reg           rx_enable = 1'd0;
reg           rx_tick = 1'd0;
reg    [31:0] rx_phase = 32'd0;
wire          rx_rx;
reg           rx_rx_d = 1'd0;
reg           rxtx_re = 1'd0;
wire    [7:0] rxtx_r;
reg           rxtx_we = 1'd0;
wire    [7:0] rxtx_w;
wire          txfull_status;
wire          txfull_we0;
reg           txfull_re0 = 1'd0;
wire          rxempty_status;
wire          rxempty_we0;
reg           rxempty_re0 = 1'd0;
wire          irq;
wire          tx_status;
reg           tx_pending = 1'd0;
wire          tx_trigger;
reg           tx_clear = 1'd0;
reg           tx_trigger_d = 1'd0;
wire          rx_status;
reg           rx_pending = 1'd0;
wire          rx_trigger;
reg           rx_clear = 1'd0;
reg           rx_trigger_d = 1'd0;
wire          tx0;
wire          rx0;
reg     [1:0] status_status = 2'd0;
wire          status_we;
reg           status_re = 1'd0;
wire          tx1;
wire          rx1;
reg     [1:0] pending_status = 2'd0;
wire          pending_we;
reg           pending_re = 1'd0;
reg     [1:0] pending_r = 2'd0;
wire          tx2;
wire          rx2;
reg     [1:0] enable_storage = 2'd0;
reg           enable_re = 1'd0;
wire          txempty_status;
wire          txempty_we0;
reg           txempty_re0 = 1'd0;
wire          rxfull_status;
wire          rxfull_we0;
reg           rxfull_re0 = 1'd0;
wire          uart_sink_valid;
wire          uart_sink_ready;
wire          uart_sink_first;
wire          uart_sink_last;
wire    [7:0] uart_sink_payload_data;
wire          uart_source_valid;
wire          uart_source_ready;
wire          uart_source_first;
wire          uart_source_last;
wire    [7:0] uart_source_payload_data;
wire          tx_fifo_sink_valid;
wire          tx_fifo_sink_ready;
reg           tx_fifo_sink_first = 1'd0;
reg           tx_fifo_sink_last = 1'd0;
wire    [7:0] tx_fifo_sink_payload_data;
wire          tx_fifo_source_valid;
wire          tx_fifo_source_ready;
wire          tx_fifo_source_first;
wire          tx_fifo_source_last;
wire    [7:0] tx_fifo_source_payload_data;
wire          tx_fifo_re;
reg           tx_fifo_readable = 1'd0;
wire          tx_fifo_syncfifo_we;
wire          tx_fifo_syncfifo_writable;
wire          tx_fifo_syncfifo_re;
wire          tx_fifo_syncfifo_readable;
wire    [9:0] tx_fifo_syncfifo_din;
wire    [9:0] tx_fifo_syncfifo_dout;
reg     [4:0] tx_fifo_level0 = 5'd0;
reg           tx_fifo_replace = 1'd0;
reg     [3:0] tx_fifo_produce = 4'd0;
reg     [3:0] tx_fifo_consume = 4'd0;
reg     [3:0] tx_fifo_wrport_adr = 4'd0;
wire    [9:0] tx_fifo_wrport_dat_r;
wire          tx_fifo_wrport_we;
wire    [9:0] tx_fifo_wrport_dat_w;
wire          tx_fifo_do_read;
wire    [3:0] tx_fifo_rdport_adr;
wire    [9:0] tx_fifo_rdport_dat_r;
wire          tx_fifo_rdport_re;
wire    [4:0] tx_fifo_level1;
wire    [7:0] tx_fifo_fifo_in_payload_data;
wire          tx_fifo_fifo_in_first;
wire          tx_fifo_fifo_in_last;
wire    [7:0] tx_fifo_fifo_out_payload_data;
wire          tx_fifo_fifo_out_first;
wire          tx_fifo_fifo_out_last;
wire          rx_fifo_sink_valid;
wire          rx_fifo_sink_ready;
wire          rx_fifo_sink_first;
wire          rx_fifo_sink_last;
wire    [7:0] rx_fifo_sink_payload_data;
wire          rx_fifo_source_valid;
wire          rx_fifo_source_ready;
wire          rx_fifo_source_first;
wire          rx_fifo_source_last;
wire    [7:0] rx_fifo_source_payload_data;
wire          rx_fifo_re;
reg           rx_fifo_readable = 1'd0;
wire          rx_fifo_syncfifo_we;
wire          rx_fifo_syncfifo_writable;
wire          rx_fifo_syncfifo_re;
wire          rx_fifo_syncfifo_readable;
wire    [9:0] rx_fifo_syncfifo_din;
wire    [9:0] rx_fifo_syncfifo_dout;
reg     [4:0] rx_fifo_level0 = 5'd0;
reg           rx_fifo_replace = 1'd0;
reg     [3:0] rx_fifo_produce = 4'd0;
reg     [3:0] rx_fifo_consume = 4'd0;
reg     [3:0] rx_fifo_wrport_adr = 4'd0;
wire    [9:0] rx_fifo_wrport_dat_r;
wire          rx_fifo_wrport_we;
wire    [9:0] rx_fifo_wrport_dat_w;
wire          rx_fifo_do_read;
wire    [3:0] rx_fifo_rdport_adr;
wire    [9:0] rx_fifo_rdport_dat_r;
wire          rx_fifo_rdport_re;
wire    [4:0] rx_fifo_level1;
wire    [7:0] rx_fifo_fifo_in_payload_data;
wire          rx_fifo_fifo_in_first;
wire          rx_fifo_fifo_in_last;
wire    [7:0] rx_fifo_fifo_out_payload_data;
wire          rx_fifo_fifo_out_first;
wire          rx_fifo_fifo_out_last;
reg    [13:0] csr_master_adr = 14'd0;
reg           csr_master_we = 1'd0;
reg     [7:0] csr_master_dat_w = 8'd0;
wire    [7:0] csr_master_dat_r;
wire   [13:0] bank_bus_adr;
wire          bank_bus_we;
wire    [7:0] bank_bus_dat_w;
reg     [7:0] bank_bus_dat_r = 8'd0;
reg           txfull_re1 = 1'd0;
wire          txfull_r;
reg           txfull_we1 = 1'd0;
wire          txfull_w;
reg           rxempty_re1 = 1'd0;
wire          rxempty_r;
reg           rxempty_we1 = 1'd0;
wire          rxempty_w;
reg           ev_status_re = 1'd0;
wire    [1:0] ev_status_r;
reg           ev_status_we = 1'd0;
wire    [1:0] ev_status_w;
reg           ev_pending_re = 1'd0;
wire    [1:0] ev_pending_r;
reg           ev_pending_we = 1'd0;
wire    [1:0] ev_pending_w;
reg           ev_enable0_re = 1'd0;
wire    [1:0] ev_enable0_r;
reg           ev_enable0_we = 1'd0;
wire    [1:0] ev_enable0_w;
reg           txempty_re1 = 1'd0;
wire          txempty_r;
reg           txempty_we1 = 1'd0;
wire          txempty_w;
reg           rxfull_re1 = 1'd0;
wire          rxfull_r;
reg           rxfull_we1 = 1'd0;
wire          rxfull_w;
wire          sel;
reg           rs232phytx_state = 1'd0;
reg           rs232phytx_next_state = 1'd0;
reg     [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg           tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg           serial1_tx_rs232phytx_next_value1 = 1'd0;
reg           serial1_tx_rs232phytx_next_value_ce1 = 1'd0;
reg     [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg           tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg           rs232phyrx_state = 1'd0;
reg           rs232phyrx_next_state = 1'd0;
reg     [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg           rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg     [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg           rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg     [1:0] state = 2'd0;
reg     [1:0] next_state = 2'd0;
reg     [7:0] csr_master_dat_w_next_value0 = 8'd0;
reg           csr_master_dat_w_next_value_ce0 = 1'd0;
reg    [13:0] csr_master_adr_next_value1 = 14'd0;
reg           csr_master_adr_next_value_ce1 = 1'd0;
reg           csr_master_we_next_value2 = 1'd0;
reg           csr_master_we_next_value_ce2 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *)
reg           regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *)
reg           regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign csr_wishbone_err = '0;

always @(*) begin
	rs232phytx_next_state = 1'd0;
	tx_enable = 1'd0;
	tx_count_rs232phytx_next_value0 = 4'd0;
	tx_count_rs232phytx_next_value_ce0 = 1'd0;
	serial1_tx_rs232phytx_next_value1 = 1'd0;
	serial1_tx_rs232phytx_next_value_ce1 = 1'd0;
	tx_data_rs232phytx_next_value2 = 8'd0;
	tx_data_rs232phytx_next_value_ce2 = 1'd0;
	tx_sink_ready = 1'd0;
    rs232phytx_next_state = rs232phytx_state;
    case (rs232phytx_state)
        1'd1: begin
            tx_enable = 1'd1;
            if (tx_tick) begin
                serial1_tx_rs232phytx_next_value1 = tx_data;
                serial1_tx_rs232phytx_next_value_ce1 = 1'd1;
                tx_count_rs232phytx_next_value0 = (tx_count + 1'd1);
                tx_count_rs232phytx_next_value_ce0 = 1'd1;
                tx_data_rs232phytx_next_value2 = {1'd1, tx_data[7:1]};
                tx_data_rs232phytx_next_value_ce2 = 1'd1;
                if ((tx_count == 4'd9)) begin
                    tx_sink_ready = 1'd1;
                    rs232phytx_next_state = 1'd0;
                end
            end
        end
        default: begin
            tx_count_rs232phytx_next_value0 = 1'd0;
            tx_count_rs232phytx_next_value_ce0 = 1'd1;
            serial1_tx_rs232phytx_next_value1 = 1'd1;
            serial1_tx_rs232phytx_next_value_ce1 = 1'd1;
            if (tx_sink_valid) begin
                serial1_tx_rs232phytx_next_value1 = 1'd0;
                serial1_tx_rs232phytx_next_value_ce1 = 1'd1;
                tx_data_rs232phytx_next_value2 = tx_sink_payload_data;
                tx_data_rs232phytx_next_value_ce2 = 1'd1;
                rs232phytx_next_state = 1'd1;
            end
        end
    endcase
end
always @(*) begin
	rx_source_payload_data = 8'd0;
	rx_enable = 1'd0;
	rs232phyrx_next_state = 1'd0;
	rx_count_rs232phyrx_next_value0 = 4'd0;
	rx_count_rs232phyrx_next_value_ce0 = 1'd0;
	rx_data_rs232phyrx_next_value1 = 8'd0;
	rx_data_rs232phyrx_next_value_ce1 = 1'd0;
	rx_source_valid = 1'd0;
    rs232phyrx_next_state = rs232phyrx_state;
    case (rs232phyrx_state)
        1'd1: begin
            rx_enable = 1'd1;
            if (rx_tick) begin
                rx_count_rs232phyrx_next_value0 = (rx_count + 1'd1);
                rx_count_rs232phyrx_next_value_ce0 = 1'd1;
                rx_data_rs232phyrx_next_value1 = {rx_rx, rx_data[7:1]};
                rx_data_rs232phyrx_next_value_ce1 = 1'd1;
                if ((rx_count == 4'd9)) begin
                    rx_source_valid = (rx_rx == 1'd1);
                    rx_source_payload_data = rx_data;
                    rs232phyrx_next_state = 1'd0;
                end
            end
        end
        default: begin
            rx_count_rs232phyrx_next_value0 = 1'd0;
            rx_count_rs232phyrx_next_value_ce0 = 1'd1;
            if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
                rs232phyrx_next_state = 1'd1;
            end
        end
    endcase
end
assign uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_sink_ready;
assign uart_sink_first = rx_source_first;
assign uart_sink_last = rx_source_last;
assign uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_source_valid;
assign uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_source_first;
assign tx_sink_last = uart_source_last;
assign tx_sink_payload_data = uart_source_payload_data;
assign tx_fifo_sink_valid = rxtx_re;
assign tx_fifo_sink_payload_data = rxtx_r;
assign uart_source_valid = tx_fifo_source_valid;
assign tx_fifo_source_ready = uart_source_ready;
assign uart_source_first = tx_fifo_source_first;
assign uart_source_last = tx_fifo_source_last;
assign uart_source_payload_data = tx_fifo_source_payload_data;
assign txfull_status = (~tx_fifo_sink_ready);
assign txempty_status = (~tx_fifo_source_valid);
assign tx_trigger = tx_fifo_sink_ready;
assign rx_fifo_sink_valid = uart_sink_valid;
assign uart_sink_ready = rx_fifo_sink_ready;
assign rx_fifo_sink_first = uart_sink_first;
assign rx_fifo_sink_last = uart_sink_last;
assign rx_fifo_sink_payload_data = uart_sink_payload_data;
assign rxtx_w = rx_fifo_source_payload_data;
assign rx_fifo_source_ready = (rx_clear | (1'd0 & rxtx_we));
assign rxempty_status = (~rx_fifo_source_valid);
assign rxfull_status = (~rx_fifo_sink_ready);
assign rx_trigger = rx_fifo_source_valid;
assign tx0 = tx_status;
assign tx1 = tx_pending;
always @(*) begin
	tx_clear = 1'd0;
    if ((pending_re & pending_r[0])) begin
        tx_clear = 1'd1;
    end
end
assign rx0 = rx_status;
assign rx1 = rx_pending;
always @(*) begin
	rx_clear = 1'd0;
    if ((pending_re & pending_r[1])) begin
        rx_clear = 1'd1;
    end
end
assign irq = ((pending_status[0] & enable_storage[0]) | (pending_status[1] & enable_storage[1]));
assign tx_status = tx_trigger;
assign rx_status = rx_trigger;
assign tx_fifo_syncfifo_din = {tx_fifo_fifo_in_last, tx_fifo_fifo_in_first, tx_fifo_fifo_in_payload_data};
assign {tx_fifo_fifo_out_last, tx_fifo_fifo_out_first, tx_fifo_fifo_out_payload_data} = tx_fifo_syncfifo_dout;
assign tx_fifo_sink_ready = tx_fifo_syncfifo_writable;
assign tx_fifo_syncfifo_we = tx_fifo_sink_valid;
assign tx_fifo_fifo_in_first = tx_fifo_sink_first;
assign tx_fifo_fifo_in_last = tx_fifo_sink_last;
assign tx_fifo_fifo_in_payload_data = tx_fifo_sink_payload_data;
assign tx_fifo_source_valid = tx_fifo_readable;
assign tx_fifo_source_first = tx_fifo_fifo_out_first;
assign tx_fifo_source_last = tx_fifo_fifo_out_last;
assign tx_fifo_source_payload_data = tx_fifo_fifo_out_payload_data;
assign tx_fifo_re = tx_fifo_source_ready;
assign tx_fifo_syncfifo_re = (tx_fifo_syncfifo_readable & ((~tx_fifo_readable) | tx_fifo_re));
assign tx_fifo_level1 = (tx_fifo_level0 + tx_fifo_readable);
always @(*) begin
	tx_fifo_wrport_adr = 4'd0;
    if (tx_fifo_replace) begin
        tx_fifo_wrport_adr = (tx_fifo_produce - 1'd1);
    end else begin
        tx_fifo_wrport_adr = tx_fifo_produce;
    end
end
assign tx_fifo_wrport_dat_w = tx_fifo_syncfifo_din;
assign tx_fifo_wrport_we = (tx_fifo_syncfifo_we & (tx_fifo_syncfifo_writable | tx_fifo_replace));
assign tx_fifo_do_read = (tx_fifo_syncfifo_readable & tx_fifo_syncfifo_re);
assign tx_fifo_rdport_adr = tx_fifo_consume;
assign tx_fifo_syncfifo_dout = tx_fifo_rdport_dat_r;
assign tx_fifo_rdport_re = tx_fifo_do_read;
assign tx_fifo_syncfifo_writable = (tx_fifo_level0 != 5'd16);
assign tx_fifo_syncfifo_readable = (tx_fifo_level0 != 1'd0);
assign rx_fifo_syncfifo_din = {rx_fifo_fifo_in_last, rx_fifo_fifo_in_first, rx_fifo_fifo_in_payload_data};
assign {rx_fifo_fifo_out_last, rx_fifo_fifo_out_first, rx_fifo_fifo_out_payload_data} = rx_fifo_syncfifo_dout;
assign rx_fifo_sink_ready = rx_fifo_syncfifo_writable;
assign rx_fifo_syncfifo_we = rx_fifo_sink_valid;
assign rx_fifo_fifo_in_first = rx_fifo_sink_first;
assign rx_fifo_fifo_in_last = rx_fifo_sink_last;
assign rx_fifo_fifo_in_payload_data = rx_fifo_sink_payload_data;
assign rx_fifo_source_valid = rx_fifo_readable;
assign rx_fifo_source_first = rx_fifo_fifo_out_first;
assign rx_fifo_source_last = rx_fifo_fifo_out_last;
assign rx_fifo_source_payload_data = rx_fifo_fifo_out_payload_data;
assign rx_fifo_re = rx_fifo_source_ready;
assign rx_fifo_syncfifo_re = (rx_fifo_syncfifo_readable & ((~rx_fifo_readable) | rx_fifo_re));
assign rx_fifo_level1 = (rx_fifo_level0 + rx_fifo_readable);
always @(*) begin
	rx_fifo_wrport_adr = 4'd0;
    if (rx_fifo_replace) begin
        rx_fifo_wrport_adr = (rx_fifo_produce - 1'd1);
    end else begin
        rx_fifo_wrport_adr = rx_fifo_produce;
    end
end
assign rx_fifo_wrport_dat_w = rx_fifo_syncfifo_din;
assign rx_fifo_wrport_we = (rx_fifo_syncfifo_we & (rx_fifo_syncfifo_writable | rx_fifo_replace));
assign rx_fifo_do_read = (rx_fifo_syncfifo_readable & rx_fifo_syncfifo_re);
assign rx_fifo_rdport_adr = rx_fifo_consume;
assign rx_fifo_syncfifo_dout = rx_fifo_rdport_dat_r;
assign rx_fifo_rdport_re = rx_fifo_do_read;
assign rx_fifo_syncfifo_writable = (rx_fifo_level0 != 5'd16);
assign rx_fifo_syncfifo_readable = (rx_fifo_level0 != 1'd0);
assign sel = (bank_bus_adr[13:7] == 1'd0);
assign rxtx_r = bank_bus_dat_w[7:0];
always @(*) begin
	rxtx_we = 1'd0;
	rxtx_re = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 1'd0))) begin
        rxtx_re = bank_bus_we;
        rxtx_we = (~bank_bus_we);
    end
end
assign txfull_r = bank_bus_dat_w[0];
always @(*) begin
	txfull_re1 = 1'd0;
	txfull_we1 = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 1'd1))) begin
        txfull_re1 = bank_bus_we;
        txfull_we1 = (~bank_bus_we);
    end
end
assign rxempty_r = bank_bus_dat_w[0];
always @(*) begin
	rxempty_re1 = 1'd0;
	rxempty_we1 = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 2'd2))) begin
        rxempty_re1 = bank_bus_we;
        rxempty_we1 = (~bank_bus_we);
    end
end
assign ev_status_r = bank_bus_dat_w[1:0];
always @(*) begin
	ev_status_we = 1'd0;
	ev_status_re = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 2'd3))) begin
        ev_status_re = bank_bus_we;
        ev_status_we = (~bank_bus_we);
    end
end
assign ev_pending_r = bank_bus_dat_w[1:0];
always @(*) begin
	ev_pending_we = 1'd0;
	ev_pending_re = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 3'd4))) begin
        ev_pending_re = bank_bus_we;
        ev_pending_we = (~bank_bus_we);
    end
end
assign ev_enable0_r = bank_bus_dat_w[1:0];
always @(*) begin
	ev_enable0_re = 1'd0;
	ev_enable0_we = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 3'd5))) begin
        ev_enable0_re = bank_bus_we;
        ev_enable0_we = (~bank_bus_we);
    end
end
assign txempty_r = bank_bus_dat_w[0];
always @(*) begin
	txempty_we1 = 1'd0;
	txempty_re1 = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 3'd6))) begin
        txempty_re1 = bank_bus_we;
        txempty_we1 = (~bank_bus_we);
    end
end
assign rxfull_r = bank_bus_dat_w[0];
always @(*) begin
	rxfull_we1 = 1'd0;
	rxfull_re1 = 1'd0;
    if ((sel & (bank_bus_adr[6:0] == 3'd7))) begin
        rxfull_re1 = bank_bus_we;
        rxfull_we1 = (~bank_bus_we);
    end
end
assign txfull_w = txfull_status;
assign txfull_we0 = txfull_we1;
assign rxempty_w = rxempty_status;
assign rxempty_we0 = rxempty_we1;
always @(*) begin
	status_status = 2'd0;
    status_status[0] = tx0;
    status_status[1] = rx0;
end
assign ev_status_w = status_status[1:0];
assign status_we = ev_status_we;
always @(*) begin
	pending_status = 2'd0;
    pending_status[0] = tx1;
    pending_status[1] = rx1;
end
assign ev_pending_w = pending_status[1:0];
assign pending_we = ev_pending_we;
assign tx2 = enable_storage[0];
assign rx2 = enable_storage[1];
assign ev_enable0_w = enable_storage[1:0];
assign txempty_w = txempty_status;
assign txempty_we0 = txempty_we1;
assign rxfull_w = rxfull_status;
assign rxfull_we0 = rxfull_we1;
assign bank_bus_adr = csr_master_adr;
assign bank_bus_we = csr_master_we;
assign bank_bus_dat_w = csr_master_dat_w;
assign csr_master_dat_r = bank_bus_dat_r;
always @(*) begin
	next_state = 2'd0;
	csr_master_dat_w_next_value0 = 8'd0;
	csr_master_dat_w_next_value_ce0 = 1'd0;
	csr_master_adr_next_value1 = 14'd0;
	csr_wishbone_miso = 32'd0;
	csr_master_adr_next_value_ce1 = 1'd0;
	csr_master_we_next_value2 = 1'd0;
	csr_master_we_next_value_ce2 = 1'd0;
	csr_wishbone_ack = 1'd0;
    next_state = state;
    case (state)
        1'd1: begin
            csr_master_adr_next_value1 = 1'd0;
            csr_master_adr_next_value_ce1 = 1'd1;
            csr_master_we_next_value2 = 1'd0;
            csr_master_we_next_value_ce2 = 1'd1;
            next_state = 2'd2;
        end
        2'd2: begin
            csr_wishbone_ack = 1'd1;
            csr_wishbone_miso = csr_master_dat_r;
            next_state = 1'd0;
        end
        default: begin
            csr_master_dat_w_next_value0 = csr_wishbone_mosi;
            csr_master_dat_w_next_value_ce0 = 1'd1;
            if ((csr_wishbone_cyc & csr_wishbone_stb)) begin
                csr_master_adr_next_value1 = csr_wishbone_adr;
                csr_master_adr_next_value_ce1 = 1'd1;
                csr_master_we_next_value2 = (csr_wishbone_we & (csr_wishbone_sel != 1'd0));
                csr_master_we_next_value_ce2 = 1'd1;
                next_state = 1'd1;
            end
        end
    endcase
end
assign rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge sys_clk) begin
    {tx_tick, tx_phase} <= 23'd4947802;
    if (tx_enable) begin
        {tx_tick, tx_phase} <= (tx_phase + 23'd4947802);
    end
    rs232phytx_state <= rs232phytx_next_state;
    if (tx_count_rs232phytx_next_value_ce0) begin
        tx_count <= tx_count_rs232phytx_next_value0;
    end
    if (serial1_tx_rs232phytx_next_value_ce1) begin
        serial1_tx <= serial1_tx_rs232phytx_next_value1;
    end
    if (tx_data_rs232phytx_next_value_ce2) begin
        tx_data <= tx_data_rs232phytx_next_value2;
    end
    rx_rx_d <= rx_rx;
    {rx_tick, rx_phase} <= 32'd2147483648;
    if (rx_enable) begin
        {rx_tick, rx_phase} <= (rx_phase + 23'd4947802);
    end
    rs232phyrx_state <= rs232phyrx_next_state;
    if (rx_count_rs232phyrx_next_value_ce0) begin
        rx_count <= rx_count_rs232phyrx_next_value0;
    end
    if (rx_data_rs232phyrx_next_value_ce1) begin
        rx_data <= rx_data_rs232phyrx_next_value1;
    end
    if (tx_clear) begin
        tx_pending <= 1'd0;
    end
    tx_trigger_d <= tx_trigger;
    if ((tx_trigger & (~tx_trigger_d))) begin
        tx_pending <= 1'd1;
    end
    if (rx_clear) begin
        rx_pending <= 1'd0;
    end
    rx_trigger_d <= rx_trigger;
    if ((rx_trigger & (~rx_trigger_d))) begin
        rx_pending <= 1'd1;
    end
    if (tx_fifo_syncfifo_re) begin
        tx_fifo_readable <= 1'd1;
    end else begin
        if (tx_fifo_re) begin
            tx_fifo_readable <= 1'd0;
        end
    end
    if (((tx_fifo_syncfifo_we & tx_fifo_syncfifo_writable) & (~tx_fifo_replace))) begin
        tx_fifo_produce <= (tx_fifo_produce + 1'd1);
    end
    if (tx_fifo_do_read) begin
        tx_fifo_consume <= (tx_fifo_consume + 1'd1);
    end
    if (((tx_fifo_syncfifo_we & tx_fifo_syncfifo_writable) & (~tx_fifo_replace))) begin
        if ((~tx_fifo_do_read)) begin
            tx_fifo_level0 <= (tx_fifo_level0 + 1'd1);
        end
    end else begin
        if (tx_fifo_do_read) begin
            tx_fifo_level0 <= (tx_fifo_level0 - 1'd1);
        end
    end
    if (rx_fifo_syncfifo_re) begin
        rx_fifo_readable <= 1'd1;
    end else begin
        if (rx_fifo_re) begin
            rx_fifo_readable <= 1'd0;
        end
    end
    if (((rx_fifo_syncfifo_we & rx_fifo_syncfifo_writable) & (~rx_fifo_replace))) begin
        rx_fifo_produce <= (rx_fifo_produce + 1'd1);
    end
    if (rx_fifo_do_read) begin
        rx_fifo_consume <= (rx_fifo_consume + 1'd1);
    end
    if (((rx_fifo_syncfifo_we & rx_fifo_syncfifo_writable) & (~rx_fifo_replace))) begin
        if ((~rx_fifo_do_read)) begin
            rx_fifo_level0 <= (rx_fifo_level0 + 1'd1);
        end
    end else begin
        if (rx_fifo_do_read) begin
            rx_fifo_level0 <= (rx_fifo_level0 - 1'd1);
        end
    end
    bank_bus_dat_r <= 1'd0;
    if (sel) begin
        case (bank_bus_adr[6:0])
            1'd0: begin
                bank_bus_dat_r <= rxtx_w;
            end
            1'd1: begin
                bank_bus_dat_r <= txfull_w;
            end
            2'd2: begin
                bank_bus_dat_r <= rxempty_w;
            end
            2'd3: begin
                bank_bus_dat_r <= ev_status_w;
            end
            3'd4: begin
                bank_bus_dat_r <= ev_pending_w;
            end
            3'd5: begin
                bank_bus_dat_r <= ev_enable0_w;
            end
            3'd6: begin
                bank_bus_dat_r <= txempty_w;
            end
            3'd7: begin
                bank_bus_dat_r <= rxfull_w;
            end
        endcase
    end
    txfull_re0 <= txfull_re1;
    rxempty_re0 <= rxempty_re1;
    status_re <= ev_status_re;
    if (ev_pending_re) begin
        pending_r[1:0] <= ev_pending_r;
    end
    pending_re <= ev_pending_re;
    if (ev_enable0_re) begin
        enable_storage[1:0] <= ev_enable0_r;
    end
    enable_re <= ev_enable0_re;
    txempty_re0 <= txempty_re1;
    rxfull_re0 <= rxfull_re1;
    state <= next_state;
    if (csr_master_dat_w_next_value_ce0) begin
        csr_master_dat_w <= csr_master_dat_w_next_value0;
    end
    if (csr_master_adr_next_value_ce1) begin
        csr_master_adr <= csr_master_adr_next_value1;
    end
    if (csr_master_we_next_value_ce2) begin
        csr_master_we <= csr_master_we_next_value2;
    end
    if (sys_rst) begin
        serial1_tx <= 1'd1;
        tx_tick <= 1'd0;
        rx_tick <= 1'd0;
        rx_rx_d <= 1'd0;
        txfull_re0 <= 1'd0;
        rxempty_re0 <= 1'd0;
        tx_pending <= 1'd0;
        tx_trigger_d <= 1'd0;
        rx_pending <= 1'd0;
        rx_trigger_d <= 1'd0;
        status_re <= 1'd0;
        pending_re <= 1'd0;
        pending_r <= 2'd0;
        enable_storage <= 2'd0;
        enable_re <= 1'd0;
        txempty_re0 <= 1'd0;
        rxfull_re0 <= 1'd0;
        tx_fifo_readable <= 1'd0;
        tx_fifo_level0 <= 5'd0;
        tx_fifo_produce <= 4'd0;
        tx_fifo_consume <= 4'd0;
        rx_fifo_readable <= 1'd0;
        rx_fifo_level0 <= 5'd0;
        rx_fifo_produce <= 4'd0;
        rx_fifo_consume <= 4'd0;
        csr_master_we <= 1'd0;
        rs232phytx_state <= 1'd0;
        rs232phyrx_state <= 1'd0;
        state <= 2'd0;
    end
    regs0 <= serial1_rx;
    regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10
// Port 1 | Read: Sync  | Write: ---- |
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (tx_fifo_wrport_we)
		storage[tx_fifo_wrport_adr] <= tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (tx_fifo_rdport_re)
		storage_dat1 <= storage[tx_fifo_rdport_adr];
end
assign tx_fifo_wrport_dat_r = storage_dat0;
assign tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10
// Port 1 | Read: Sync  | Write: ---- |
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (rx_fifo_wrport_we)
		storage_1[rx_fifo_wrport_adr] <= rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[rx_fifo_rdport_adr];
end
assign rx_fifo_wrport_dat_r = storage_1_dat0;
assign rx_fifo_rdport_dat_r = storage_1_dat1;


endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-04-18 14:06:41.
//------------------------------------------------------------------------------
