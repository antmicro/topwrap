Search.setIndex({"alltitles": {".core file template": [[19, "core-file-template"]], ".core.yaml description file reference": [[26, "core-yaml-description-file-reference"]], "1. Install required system packages": [[23, "install-required-system-packages"]], "2. Install the Topwrap user package": [[23, "install-the-topwrap-user-package"]], "3. Verify the installation": [[23, "verify-the-installation"]], "A note on \u201csliced\u201d vs. \u201cindependent\u201d signals": [[11, "a-note-on-sliced-vs-independent-signals"]], "API Reference": [[7, "api-reference"]], "API interface": [[11, "module-topwrap.frontend.frontend"]], "API reference": [[14, "api-reference"]], "Ability to produce top-level wrappers in VHDL": [[6, "ability-to-produce-top-level-wrappers-in-vhdl"]], "Adding Verilog sources to repository": [[20, "adding-verilog-sources-to-repository"]], "Additional build options": [[19, "additional-build-options"]], "Advanced": [[13, "advanced"]], "Advanced options": [[0, "advanced-options"]], "Available config options": [[1, "available-config-options"]], "Available schemes": [[2, "available-schemes"]], "Building designs with Topwrap": [[20, "building-designs-with-topwrap"]], "Bus definitions": [[12, "bus-definitions"]], "Bus instantiation": [[12, "bus-instantiation"]], "Bus management": [[6, "bus-management"]], "CLI": [[26, "cli"]], "Catalogs": [[12, "catalogs"]], "Class diagram": [[11, "class-diagram"]], "Code style": [[16, "code-style"]], "Command-line flow": [[20, "command-line-flow"]], "Complex hierarchy graph": [[3, "complex-hierarchy-graph"]], "Conclusion": [[12, "conclusion"]], "Config": [[4, "config"]], "Configuration": [[1, "configuration"]], "Configuration file location": [[1, "configuration-file-location"]], "Configuration precedence": [[1, "configuration-precedence"]], "Connection between external Metanodes": [[3, "connection-between-external-metanodes"]], "Connection between two inout ports": [[3, "connection-between-two-inout-ports"]], "Connection of subgraph node to multiple External Metanodes": [[3, "connection-of-subgraph-node-to-multiple-external-metanodes"]], "Connection to subgraph Metanode": [[3, "connection-to-subgraph-metanode"]], "Connections": [[11, "module-topwrap.model.connections"], [12, "connections"]], "Constant": [[18, "constant"]], "Constant assignments": [[12, "constant-assignments"]], "Constructing, configuring and loading repositories": [[26, "constructing-configuring-and-loading-repositories"]], "Creating a design": [[2, "creating-a-design"]], "Creating block designs in the GUI": [[0, "creating-block-designs-in-the-gui"]], "Creating designs": [[20, "creating-designs"]], "Creating the design": [[20, "creating-the-design"]], "Deeper integration with other tools": [[6, "deeper-integration-with-other-tools"]], "Default tool for synthesis, bitstream generation and programming the FPGA": [[19, "default-tool-for-synthesis-bitstream-generation-and-programming-the-fpga"]], "Design": [[11, "module-topwrap.model.design"]], "Design description": [[2, "design-description"]], "Design overview": [[20, "design-overview"]], "Design structure": [[12, "design-structure"]], "Developer's Guide": [[21, null]], "Documentation": [[21, null]], "Duality of the design description": [[12, "duality-of-the-design-description"]], "Duplicate IP cores in subgraph node": [[3, "duplicate-ip-cores-in-subgraph-node"]], "Duplicate IP names": [[3, "duplicate-ip-names"]], "Duplicate Metanode connected to interface": [[3, "duplicate-metanode-connected-to-interface"]], "Duplicate Metanode names": [[3, "duplicate-metanode-names"]], "Dynamic number of ports/interfaces based on a parameter": [[12, "dynamic-number-of-ports-interfaces-based-on-a-parameter"]], "Embedded GUI": [[18, "embedded-gui"]], "Example configuration file": [[1, "example-configuration-file"]], "Examples": [[2, "examples"]], "Examples for Internal Representation": [[13, "examples-for-internal-representation"]], "External interface": [[12, "external-interface"]], "File sets": [[12, "file-sets"]], "Format": [[2, "format"], [12, "format"], [24, "format"]], "Frontend & Backend": [[11, "frontend-backend"]], "FuseSocBuilder": [[5, "fusesocbuilder"]], "Future planned enhancements in Topwrap": [[6, "future-planned-enhancements-in-topwrap"]], "General observations": [[12, "general-observations"]], "Generating Verilog in the GUI": [[20, "generating-verilog-in-the-gui"]], "Generating Verilog top files": [[20, "generating-verilog-top-files"]], "Generator": [[7, "generator"]], "Getting started": [[20, "getting-started"]], "HDL Types": [[11, "module-topwrap.model.hdl_types"]], "HDMI": [[18, "hdmi"]], "Hierarchical": [[13, "hierarchical"]], "Hierarchical example": [[12, "hierarchical-example"]], "Hierarchies": [[2, "hierarchies"]], "Hierarchy": [[18, "hierarchy"]], "How to implement a Generator": [[7, "how-to-implement-a-generator"]], "IP cores": [[26, "ip-cores"]], "IP description files": [[2, "ip-description-files"]], "IP-XACT format": [[12, "ip-xact-format"]], "Important": [[20, null]], "Improve the process of recreating a design from a YAML file": [[6, "improve-the-process-of-recreating-a-design-from-a-yaml-file"]], "Inference": [[11, "module-topwrap.model.inference.inference"]], "Info": [[12, null], [12, null]], "Inout": [[18, "inout"]], "Inout ports": [[12, "inout-ports"]], "Installing Topwrap": [[23, "installing-topwrap"]], "Instance names": [[12, "instance-names"]], "Interconnect": [[9, "interconnect"], [13, "interconnect"]], "Interconnect example": [[12, "interconnect-example"]], "Interconnect generation": [[24, "interconnect-generation"]], "Interconnects": [[11, "module-topwrap.model.interconnect"]], "Interface": [[11, "module-topwrap.model.interface"], [13, "interface"]], "Interface Definition": [[10, "interface-definition"]], "Interface compliance": [[2, "interface-compliance"]], "Interface deduction": [[12, "interface-deduction"]], "Interface definitions": [[26, "interface-definitions"]], "Interface description files": [[2, "interface-description-files"]], "Interface example": [[12, "interface-example"]], "Interface inference": [[22, "interface-inference"]], "Interface mapping": [[22, "interface-mapping"]], "Interface mapping and inference": [[11, "interface-mapping-and-inference"], [22, "interface-mapping-and-inference"]], "Interface port mappings": [[26, "interface-port-mappings"]], "Internal Representation": [[11, "internal-representation"]], "Introduction to Topwrap": [[25, "introduction-to-topwrap"]], "Invalid parameters\u2019 values": [[3, "invalid-parameters-values"]], "Known limitations": [[24, "known-limitations"]], "Library of open-source cores": [[6, "library-of-open-source-cores"]], "Lint with nox": [[16, "lint-with-nox"]], "Lint with pre-commit": [[16, "lint-with-pre-commit"]], "Lookup maps": [[7, "lookup-maps"]], "Mapping": [[11, "module-topwrap.model.inference.mapping"]], "Mapping files": [[22, "mapping-files"]], "Merging strategies for configuration options": [[1, "merging-strategies-for-configuration-options"]], "Miscellaneous": [[11, "module-topwrap.model.misc"]], "Module": [[11, "module-topwrap.model.module"]], "Multiple versions": [[12, "multiple-versions"]], "Open in preview mode": [[8, "open-in-preview-mode"]], "Other": [[13, "other"]], "Other features": [[12, "other-features"]], "Other possible improvements": [[6, "other-possible-improvements"]], "PWM": [[18, "pwm"]], "Parameter passing": [[12, "parameter-passing"]], "Parameterization": [[2, "parameterization"]], "Parameters": [[12, "parameters"], [24, "parameters"]], "Port selector": [[11, "module-topwrap.model.inference.port"]], "Port slicing": [[2, "port-slicing"]], "Port widths": [[2, "port-widths"]], "Ports connected to multiple external Metanodes": [[3, "ports-connected-to-multiple-external-metanodes"]], "Provide a way to parse HDL sources from the GUI level": [[6, "provide-a-way-to-parse-hdl-sources-from-the-gui-level"]], "Repository": [[14, "repository"]], "Resource path syntax": [[2, "resource-path-syntax"]], "Sample projects": [[18, "sample-projects"]], "Setup": [[15, "setup"]], "Simple": [[13, "simple"]], "Simple example": [[12, "simple-example"]], "SoC": [[13, "soc"], [18, "soc"]], "Support for hierarchical block designs in Topwrap\u2019s GUI": [[6, "support-for-hierarchical-block-designs-in-topwrap-s-gui"]], "Support for parsing SystemVerilog sources": [[6, "support-for-parsing-systemverilog-sources"]], "Supported interconnect types": [[24, "supported-interconnect-types"]], "Supported resource types": [[26, "supported-resource-types"]], "Synthesis": [[19, "synthesis"]], "Synthesis & FuseSoC": [[20, "synthesis-fusesoc"]], "Test coverage": [[17, "test-coverage"]], "Test execution": [[17, "test-execution"]], "Tests": [[8, "tests"], [17, "tests"]], "Tests for validation checks": [[3, "tests-for-validation-checks"]], "The interconnect component": [[12, "the-interconnect-component"]], "The portMap format": [[12, "the-portmap-format"]], "Tools": [[16, "tools"]], "Unconnected ports in subgraph node": [[3, "unconnected-ports-in-subgraph-node"]], "Unnamed Metanodes": [[3, "unnamed-metanodes"]], "Updating kpm test data": [[17, "updating-kpm-test-data"]], "Usage": [[8, "usage"], [18, "usage"], [18, "id1"], [18, "id2"], [18, "id3"], [18, "id4"], [18, "id5"], [18, "id6"]], "Use a custom alt text": [[8, "use-a-custom-alt-text"]], "Use local files": [[8, "use-local-files"]], "Use remote specification": [[8, "use-remote-specification"]], "Using FuseSoC for automation": [[19, "using-fusesoc-for-automation"]], "Using KPM iframes inside docs": [[8, "using-kpm-iframes-inside-docs"]], "Using the open source IP cores library with Topwrap": [[26, "using-the-open-source-ip-cores-library-with-topwrap"]], "VLNV": [[12, "vlnv"]], "Validation of design": [[3, "validation-of-design"]], "Variable widths": [[12, "variable-widths"]], "Vendor extensions": [[12, "vendor-extensions"]], "Welcome to Topwrap!": [[21, "welcome-to-topwrap"]], "Wishbone Round-Robin": [[24, "wishbone-round-robin"]], "topwrap repo init": [[26, "topwrap-repo-init"]], "topwrap repo list": [[26, "topwrap-repo-list"]], "topwrap repo parse": [[26, "topwrap-repo-parse"]]}, "docurls": ["advanced_options.html", "config.html", "description_files.html", "developers_guide/checks.html", "developers_guide/config.html", "developers_guide/fusesocbuilder.html", "developers_guide/future_enhancements.html", "developers_guide/generator.html", "developers_guide/inline_kpm_howto.html", "developers_guide/interconnect.html", "developers_guide/interface.html", "developers_guide/internal_representation.html", "developers_guide/ipxact-design.html", "developers_guide/ir-examples.html", "developers_guide/repo.html", "developers_guide/setup.html", "developers_guide/style.html", "developers_guide/tests.html", "examples.html", "fusesoc.html", "getting_started.html", "index.html", "inference.html", "installation.html", "interconnect_gen.html", "introduction.html", "user_repositories.html"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"add_component() (design method)": [[11, "topwrap.model.design.Design.add_component", false]], "add_connection() (design method)": [[11, "topwrap.model.design.Design.add_connection", false]], "add_dependency() (fusesocbuilder method)": [[5, "topwrap.fuse_helper.FuseSocBuilder.add_dependency", false]], "add_external_ip() (fusesocbuilder method)": [[5, "topwrap.fuse_helper.FuseSocBuilder.add_external_ip", false]], "add_files() (repo method)": [[14, "topwrap.repo.repo.Repo.add_files", false]], "add_interconnect() (design method)": [[11, "topwrap.model.design.Design.add_interconnect", false]], "add_interface() (module method)": [[11, "topwrap.model.module.Module.add_interface", false]], "add_module_instance_to_design() (generator method)": [[7, "topwrap.backend.generator.Generator.add_module_instance_to_design", false]], "add_module_instance_to_design() (wishbonerrsystemveriloggenerator method)": [[7, "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.add_module_instance_to_design", false]], "add_parameter() (module method)": [[11, "topwrap.model.module.Module.add_parameter", false]], "add_port() (module method)": [[11, "topwrap.model.module.Module.add_port", false]], "add_reference() (module method)": [[11, "topwrap.model.module.Module.add_reference", false]], "add_resource() (repo method)": [[14, "topwrap.repo.repo.Repo.add_resource", false]], "add_resource() (resourcehandler method)": [[14, "topwrap.repo.resource.ResourceHandler.add_resource", false]], "add_signal() (interfacedefinition method)": [[11, "topwrap.model.interface.InterfaceDefinition.add_signal", false]], "add_source() (fusesocbuilder method)": [[5, "topwrap.fuse_helper.FuseSocBuilder.add_source", false]], "add_sources_dir() (fusesocbuilder method)": [[5, "topwrap.fuse_helper.FuseSocBuilder.add_sources_dir", false]], "address (interconnectsubordinateparams attribute)": [[11, "topwrap.model.interconnect.InterconnectSubordinateParams.address", false]], "backend (class in topwrap.backend.backend)": [[11, "topwrap.backend.backend.Backend", false]], "backendoutputinfo (class in topwrap.backend.backend)": [[11, "topwrap.backend.backend.BackendOutputInfo", false]], "bit (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.Bit", false]], "bits (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.Bits", false]], "bitstruct (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.BitStruct", false]], "build() (fusesocbuilder method)": [[5, "topwrap.fuse_helper.FuseSocBuilder.build", false]], "builtin_dir (configmanager attribute)": [[4, "topwrap.config.ConfigManager.BUILTIN_DIR", false]], "check_connection_to_subgraph_metanodes() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_connection_to_subgraph_metanodes", false]], "check_duplicate_metanode_names() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_duplicate_metanode_names", false]], "check_duplicate_node_names() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_duplicate_node_names", false]], "check_external_in_to_external_out_connections() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_external_in_to_external_out_connections", false]], "check_parameters_values() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_parameters_values", false]], "check_port_to_multiple_external_metanodes() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_port_to_multiple_external_metanodes", false]], "check_unconnected_ports_interfaces() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_unconnected_ports_interfaces", false]], "check_unnamed_external_metanodes_with_multiple_conn() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.check_unnamed_external_metanodes_with_multiple_conn", false]], "checkresult (class in topwrap.kpm_dataflow_validator)": [[3, "topwrap.kpm_dataflow_validator.CheckResult", false]], "clock (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.clock", false]], "clock (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.clock", false]], "column (filereference attribute)": [[11, "topwrap.model.misc.FileReference.column", false]], "combined() (identifier method)": [[11, "topwrap.model.misc.Identifier.combined", false]], "components (design property)": [[11, "topwrap.model.design.Design.components", false]], "config (class in topwrap.config)": [[4, "topwrap.config.Config", false]], "configmanager (class in topwrap.config)": [[4, "topwrap.config.ConfigManager", false]], "connections (design property)": [[11, "topwrap.model.design.Design.connections", false]], "connections_with() (design method)": [[11, "topwrap.model.design.Design.connections_with", false]], "constantconnection (class in topwrap.model.connections)": [[11, "topwrap.model.connections.ConstantConnection", false]], "content (backendoutputinfo attribute)": [[11, "topwrap.backend.backend.BackendOutputInfo.content", false]], "content (frontendparsestrinput attribute)": [[11, "topwrap.frontend.frontend.FrontendParseStrInput.content", false]], "copy() (bit method)": [[11, "topwrap.model.hdl_types.Bit.copy", false]], "copy() (bitstruct method)": [[11, "topwrap.model.hdl_types.BitStruct.copy", false]], "copy() (enum method)": [[11, "topwrap.model.hdl_types.Enum.copy", false]], "copy() (logic method)": [[11, "topwrap.model.hdl_types.Logic.copy", false]], "copy() (logicarray method)": [[11, "topwrap.model.hdl_types.LogicArray.copy", false]], "copy() (structfield method)": [[11, "topwrap.model.hdl_types.StructField.copy", false]], "dataflow_complex_hierarchy() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_complex_hierarchy", false]], "dataflow_conn_subgraph_metanode() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_conn_subgraph_metanode", false]], "dataflow_duplicate_external_input_interfaces() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_duplicate_external_input_interfaces", false]], "dataflow_duplicate_ip_names() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_duplicate_ip_names", false]], "dataflow_duplicate_metanode_names() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_duplicate_metanode_names", false]], "dataflow_ext_in_to_ext_out_connections() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_ext_in_to_ext_out_connections", false]], "dataflow_hier_duplicate_names() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_hier_duplicate_names", false]], "dataflow_inouts_connections() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_inouts_connections", false]], "dataflow_invalid_parameters_values() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_invalid_parameters_values", false]], "dataflow_ports_multiple_external_metanodes() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_ports_multiple_external_metanodes", false]], "dataflow_subgraph_multiple_external_metanodes() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_subgraph_multiple_external_metanodes", false]], "dataflow_unconn_hierarchy() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_unconn_hierarchy", false]], "dataflow_unnamed_metanodes() (in module tests_kpm.test_kpm_validation)": [[3, "tests_kpm.test_kpm_validation.dataflow_unnamed_metanodes", false]], "dataflowvalidator (class in topwrap.kpm_dataflow_validator)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator", false]], "default (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.default", false]], "default_value (parameter attribute)": [[11, "topwrap.model.misc.Parameter.default_value", false]], "definition (interface attribute)": [[11, "topwrap.model.interface.Interface.definition", false]], "design (class in topwrap.model.design)": [[11, "topwrap.model.design.Design", false]], "design (module property)": [[11, "topwrap.model.module.Module.design", false]], "dimensions (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.Dimensions", false]], "dimensions (logicarray attribute)": [[11, "topwrap.model.hdl_types.LogicArray.dimensions", false]], "direction (interfacesignalconfiguration attribute)": [[11, "topwrap.model.interface.InterfaceSignalConfiguration.direction", false]], "direction (port attribute)": [[11, "topwrap.model.connections.Port.direction", false]], "elaboratablevalue (class in topwrap.model.misc)": [[11, "topwrap.model.misc.ElaboratableValue", false]], "elaboratablevalue.dataclassrepr (class in topwrap.model.misc)": [[11, "topwrap.model.misc.ElaboratableValue.DataclassRepr", false]], "elaborate() (elaboratablevalue method)": [[11, "topwrap.model.misc.ElaboratableValue.elaborate", false]], "enum (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.Enum", false]], "external() (referencedport class method)": [[11, "topwrap.model.connections.ReferencedPort.external", false]], "field (elaboratablevalue attribute)": [[11, "topwrap.model.misc.ElaboratableValue.Field", false]], "field (logicfieldselect attribute)": [[11, "topwrap.model.hdl_types.LogicFieldSelect.field", false]], "field (portselectorop attribute)": [[11, "topwrap.model.inference.port.PortSelectorOp.FIELD", false]], "field_name (structfield attribute)": [[11, "topwrap.model.hdl_types.StructField.field_name", false]], "fields (bitstruct attribute)": [[11, "topwrap.model.hdl_types.BitStruct.fields", false]], "file (filereference attribute)": [[11, "topwrap.model.misc.FileReference.file", false]], "file_association (frontendmetadata attribute)": [[11, "topwrap.frontend.frontend.FrontendMetadata.file_association", false]], "filehandler (class in topwrap.repo.resource)": [[14, "topwrap.repo.resource.FileHandler", false]], "filename (backendoutputinfo attribute)": [[11, "topwrap.backend.backend.BackendOutputInfo.filename", false]], "filereference (class in topwrap.model.misc)": [[11, "topwrap.model.misc.FileReference", false]], "find_by() (querableview method)": [[11, "topwrap.model.misc.QuerableView.find_by", false]], "find_by_name() (querableview method)": [[11, "topwrap.model.misc.QuerableView.find_by_name", false]], "find_by_name_or_error() (querableview method)": [[11, "topwrap.model.misc.QuerableView.find_by_name_or_error", false]], "from_str() (portselector class method)": [[11, "topwrap.model.inference.port.PortSelector.from_str", false]], "frontend (class in topwrap.frontend.frontend)": [[11, "topwrap.frontend.frontend.Frontend", false]], "frontendmetadata (class in topwrap.frontend.frontend)": [[11, "topwrap.frontend.frontend.FrontendMetadata", false]], "frontendparseexception": [[11, "topwrap.frontend.frontend.FrontendParseException", false]], "frontendparsestrinput (class in topwrap.frontend.frontend)": [[11, "topwrap.frontend.frontend.FrontendParseStrInput", false]], "fusesocbuilder (class in topwrap.fuse_helper)": [[5, "topwrap.fuse_helper.FuseSocBuilder", false]], "generate() (generator method)": [[7, "topwrap.backend.generator.Generator.generate", false]], "generate() (wishbonerrsystemveriloggenerator method)": [[7, "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.generate", false]], "generator (class in topwrap.backend.generator)": [[7, "topwrap.backend.generator.Generator", false]], "get_builtins() (interfacedefinition static method)": [[10, "topwrap.interface.InterfaceDefinition.get_builtins", false]], "get_interface_by_name() (in module topwrap.interface)": [[10, "topwrap.interface.get_interface_by_name", false]], "get_name() (generator method)": [[7, "topwrap.backend.generator.Generator.get_name", false]], "get_name() (wishbonerrsystemveriloggenerator method)": [[7, "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.get_name", false]], "get_resource() (repo method)": [[14, "topwrap.repo.repo.Repo.get_resource", false]], "get_resources() (repo method)": [[14, "topwrap.repo.repo.Repo.get_resources", false]], "has_independent_signals (interface property)": [[11, "topwrap.model.interface.Interface.has_independent_signals", false]], "has_sliced_signals (interface property)": [[11, "topwrap.model.interface.Interface.has_sliced_signals", false]], "hierarchy() (module method)": [[11, "topwrap.model.module.Module.hierarchy", false]], "id (interfacedefinition attribute)": [[11, "topwrap.model.interface.InterfaceDefinition.id", false]], "id (interfaceportmapping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortMapping.id", false]], "id (module attribute)": [[11, "topwrap.model.module.Module.id", false]], "identifier (class in topwrap.model.misc)": [[11, "topwrap.model.misc.Identifier", false]], "in (portdirection attribute)": [[11, "topwrap.model.connections.PortDirection.IN", false]], "independent_signals (interface property)": [[11, "topwrap.model.interface.Interface.independent_signals", false]], "infer_interfaces_from_module() (in module topwrap.model.inference.inference)": [[11, "topwrap.model.inference.inference.infer_interfaces_from_module", false]], "inout (portdirection attribute)": [[11, "topwrap.model.connections.PortDirection.INOUT", false]], "interconnect (class in topwrap.model.interconnect)": [[11, "topwrap.model.interconnect.Interconnect", false]], "interconnect_types (in module topwrap.interconnects.types)": [[9, "topwrap.interconnects.types.INTERCONNECT_TYPES", false]], "interconnectmanagerparams (class in topwrap.model.interconnect)": [[11, "topwrap.model.interconnect.InterconnectManagerParams", false]], "interconnectparams (class in topwrap.model.interconnect)": [[11, "topwrap.model.interconnect.InterconnectParams", false]], "interconnects (design property)": [[11, "topwrap.model.design.Design.interconnects", false]], "interconnectsubordinateparams (class in topwrap.model.interconnect)": [[11, "topwrap.model.interconnect.InterconnectSubordinateParams", false]], "interface (class in topwrap.model.interface)": [[11, "topwrap.model.interface.Interface", false]], "interface (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.interface", false]], "interfaceconnection (class in topwrap.model.connections)": [[11, "topwrap.model.connections.InterfaceConnection", false]], "interfacedefinition (class in topwrap.interface)": [[10, "topwrap.interface.InterfaceDefinition", false]], "interfacedefinition (class in topwrap.model.interface)": [[11, "topwrap.model.interface.InterfaceDefinition", false]], "interfaceinferenceoptions (class in topwrap.model.inference.inference)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions", false]], "interfacemappingerror": [[11, "topwrap.model.inference.mapping.InterfaceMappingError", false]], "interfacemode (class in topwrap.model.interface)": [[11, "topwrap.model.interface.InterfaceMode", false]], "interfaceportgrouping (class in topwrap.model.inference.mapping)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping", false]], "interfaceportmapping (class in topwrap.model.inference.mapping)": [[11, "topwrap.model.inference.mapping.InterfacePortMapping", false]], "interfaceportmappingdefinition (class in topwrap.model.inference.mapping)": [[11, "topwrap.model.inference.mapping.InterfacePortMappingDefinition", false]], "interfaces (interfaceportmapping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortMapping.interfaces", false]], "interfaces (module property)": [[11, "topwrap.model.module.Module.interfaces", false]], "interfacesignal (class in topwrap.model.interface)": [[11, "topwrap.model.interface.InterfaceSignal", false]], "interfacesignalconfiguration (class in topwrap.model.interface)": [[11, "topwrap.model.interface.InterfaceSignalConfiguration", false]], "ios (module property)": [[11, "topwrap.model.module.Module.ios", false]], "item (logicarray attribute)": [[11, "topwrap.model.hdl_types.LogicArray.item", false]], "library (identifier attribute)": [[11, "topwrap.model.misc.Identifier.library", false]], "line (filereference attribute)": [[11, "topwrap.model.misc.FileReference.line", false]], "load() (repo method)": [[14, "topwrap.repo.repo.Repo.load", false]], "load() (resourcehandler method)": [[14, "topwrap.repo.resource.ResourceHandler.load", false]], "logic (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.Logic", false]], "logic (logicselect attribute)": [[11, "topwrap.model.hdl_types.LogicSelect.logic", false]], "logicarray (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.LogicArray", false]], "logicbitselect (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.LogicBitSelect", false]], "logicfieldselect (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.LogicFieldSelect", false]], "logicselect (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.LogicSelect", false]], "lower (dimensions attribute)": [[11, "topwrap.model.hdl_types.Dimensions.lower", false]], "make_referenced_port() (portselector method)": [[11, "topwrap.model.inference.port.PortSelector.make_referenced_port", false]], "manager (interfacemode attribute)": [[11, "topwrap.model.interface.InterfaceMode.MANAGER", false]], "managers (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.managers", false]], "map_interfaces_to_module() (in module topwrap.model.inference.mapping)": [[11, "topwrap.model.inference.mapping.map_interfaces_to_module", false]], "metadata (frontend property)": [[11, "topwrap.frontend.frontend.Frontend.metadata", false]], "min_group_size (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.min_group_size", false]], "min_signal_count (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.min_signal_count", false]], "mode (interface attribute)": [[11, "topwrap.model.interface.Interface.mode", false]], "mode (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.mode", false]], "modelbase (class in topwrap.model.misc)": [[11, "topwrap.model.misc.ModelBase", false]], "modes (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.modes", false]], "module": [[9, "module-topwrap.interconnects.types.InterconnectTypeInfo", false], [11, "module-topwrap.backend.backend", false], [11, "module-topwrap.frontend.frontend", false], [11, "module-topwrap.model.connections", false], [11, "module-topwrap.model.design", false], [11, "module-topwrap.model.hdl_types", false], [11, "module-topwrap.model.inference.inference", false], [11, "module-topwrap.model.inference.mapping", false], [11, "module-topwrap.model.inference.port", false], [11, "module-topwrap.model.interconnect", false], [11, "module-topwrap.model.interface", false], [11, "module-topwrap.model.misc", false], [11, "module-topwrap.model.module", false]], "module (class in topwrap.model.module)": [[11, "topwrap.model.module.Module", false]], "module (moduleinstance attribute)": [[11, "topwrap.model.design.ModuleInstance.module", false]], "moduleinstance (class in topwrap.model.design)": [[11, "topwrap.model.design.ModuleInstance", false]], "modules (interfaceportmappingdefinition attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortMappingDefinition.modules", false]], "name (frontendmetadata attribute)": [[11, "topwrap.frontend.frontend.FrontendMetadata.name", false]], "name (frontendparsestrinput attribute)": [[11, "topwrap.frontend.frontend.FrontendParseStrInput.name", false]], "name (identifier attribute)": [[11, "topwrap.model.misc.Identifier.name", false]], "name (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.name", false]], "name (interface attribute)": [[11, "topwrap.model.interface.Interface.name", false]], "name (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.name", false]], "name (logic attribute)": [[11, "topwrap.model.hdl_types.Logic.name", false]], "name (moduleinstance attribute)": [[11, "topwrap.model.design.ModuleInstance.name", false]], "name (parameter attribute)": [[11, "topwrap.model.misc.Parameter.name", false]], "name (port attribute)": [[11, "topwrap.model.connections.Port.name", false]], "name (repo attribute)": [[14, "topwrap.repo.repo.Repo.name", false]], "name (resource attribute)": [[14, "topwrap.repo.resource.Resource.name", false]], "non_intf_ports() (module method)": [[11, "topwrap.model.module.Module.non_intf_ports", false]], "notelaboratedexception": [[11, "topwrap.model.misc.NotElaboratedException", false]], "objectid (class in topwrap.model.misc)": [[11, "topwrap.model.misc.ObjectId", false]], "ops (logicselect attribute)": [[11, "topwrap.model.hdl_types.LogicSelect.ops", false]], "ops (portselector attribute)": [[11, "topwrap.model.inference.port.PortSelector.ops", false]], "optional_match_score (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.optional_match_score", false]], "optional_missing_score (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.optional_missing_score", false]], "out (portdirection attribute)": [[11, "topwrap.model.connections.PortDirection.OUT", false]], "overlaps() (logicselect method)": [[11, "topwrap.model.hdl_types.LogicSelect.overlaps", false]], "overlaps() (referencedport method)": [[11, "topwrap.model.connections.ReferencedPort.overlaps", false]], "parameter (class in topwrap.model.misc)": [[11, "topwrap.model.misc.Parameter", false]], "parameters (module property)": [[11, "topwrap.model.module.Module.parameters", false]], "parameters (moduleinstance attribute)": [[11, "topwrap.model.design.ModuleInstance.parameters", false]], "params (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.params", false]], "parent (design attribute)": [[11, "topwrap.model.design.Design.parent", false]], "parent (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.parent", false]], "parent (interface attribute)": [[11, "topwrap.model.interface.Interface.parent", false]], "parent (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.parent", false]], "parent (logic attribute)": [[11, "topwrap.model.hdl_types.Logic.parent", false]], "parent (moduleinstance attribute)": [[11, "topwrap.model.design.ModuleInstance.parent", false]], "parent (parameter attribute)": [[11, "topwrap.model.misc.Parameter.parent", false]], "parent (port attribute)": [[11, "topwrap.model.connections.Port.parent", false]], "parse() (filehandler method)": [[14, "topwrap.repo.resource.FileHandler.parse", false]], "parse_files() (frontend method)": [[11, "topwrap.frontend.frontend.Frontend.parse_files", false]], "parse_grouping_hints() (in module topwrap.model.inference.inference)": [[11, "topwrap.model.inference.inference.parse_grouping_hints", false]], "parse_str() (frontend method)": [[11, "topwrap.frontend.frontend.Frontend.parse_str", false]], "port (class in topwrap.model.connections)": [[11, "topwrap.model.connections.Port", false]], "port (portselector attribute)": [[11, "topwrap.model.inference.port.PortSelector.port", false]], "portconnection (class in topwrap.model.connections)": [[11, "topwrap.model.connections.PortConnection", false]], "portdirection (class in topwrap.model.connections)": [[11, "topwrap.model.connections.PortDirection", false]], "ports (module property)": [[11, "topwrap.model.module.Module.ports", false]], "portselector (class in topwrap.model.inference.port)": [[11, "topwrap.model.inference.port.PortSelector", false]], "portselectorfield (class in topwrap.model.inference.port)": [[11, "topwrap.model.inference.port.PortSelectorField", false]], "portselectorop (class in topwrap.model.inference.port)": [[11, "topwrap.model.inference.port.PortSelectorOp", false]], "prefix_consider_camel_case (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.prefix_consider_camel_case", false]], "prefix_length_score (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.prefix_length_score", false]], "prefix_split_tokens (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.prefix_split_tokens", false]], "querableview (class in topwrap.model.misc)": [[11, "topwrap.model.misc.QuerableView", false]], "referencedinterface (class in topwrap.model.connections)": [[11, "topwrap.model.connections.ReferencedInterface", false]], "referencedport (class in topwrap.model.connections)": [[11, "topwrap.model.connections.ReferencedPort", false]], "refs (module property)": [[11, "topwrap.model.module.Module.refs", false]], "regexp (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.regexp", false]], "relationshiperror": [[11, "topwrap.model.misc.RelationshipError", false]], "remove_resource() (repo method)": [[14, "topwrap.repo.repo.Repo.remove_resource", false]], "remove_resource() (resourcehandler method)": [[14, "topwrap.repo.resource.ResourceHandler.remove_resource", false]], "repo (class in topwrap.repo.repo)": [[14, "topwrap.repo.repo.Repo", false]], "represent() (backend method)": [[11, "topwrap.backend.backend.Backend.represent", false]], "required (interfacesignalconfiguration attribute)": [[11, "topwrap.model.interface.InterfaceSignalConfiguration.required", false]], "required_match_score (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.required_match_score", false]], "required_missing_score (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.required_missing_score", false]], "reset (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.reset", false]], "reset (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.reset", false]], "resolve() (objectid method)": [[11, "topwrap.model.misc.ObjectId.resolve", false]], "resource (class in topwrap.repo.resource)": [[14, "topwrap.repo.resource.Resource", false]], "resource_type (resourcehandler attribute)": [[14, "topwrap.repo.resource.ResourceHandler.resource_type", false]], "resourcehandler (class in topwrap.repo.resource)": [[14, "topwrap.repo.resource.ResourceHandler", false]], "reverse() (portdirection method)": [[11, "topwrap.model.connections.PortDirection.reverse", false]], "save() (backendoutputinfo method)": [[11, "topwrap.backend.backend.BackendOutputInfo.save", false]], "save() (repo method)": [[14, "topwrap.repo.repo.Repo.save", false]], "save() (resourcehandler method)": [[14, "topwrap.repo.resource.ResourceHandler.save", false]], "schema (config attribute)": [[4, "topwrap.config.Config.Schema", false]], "schema (interconnectmanagerparams attribute)": [[11, "topwrap.model.interconnect.InterconnectManagerParams.Schema", false]], "schema (interconnectparams attribute)": [[11, "topwrap.model.interconnect.InterconnectParams.Schema", false]], "schema (interconnectsubordinateparams attribute)": [[11, "topwrap.model.interconnect.InterconnectSubordinateParams.Schema", false]], "schema (interfacedefinition attribute)": [[10, "topwrap.interface.InterfaceDefinition.Schema", false]], "schema (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.Schema", false]], "schema (interfaceportmapping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortMapping.Schema", false]], "schema (interfaceportmappingdefinition attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortMappingDefinition.Schema", false]], "score_lower_limit (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.score_lower_limit", false]], "select (referencedport attribute)": [[11, "topwrap.model.connections.ReferencedPort.select", false]], "serialize() (backend method)": [[11, "topwrap.backend.backend.Backend.serialize", false]], "set_parent() (in module topwrap.model.misc)": [[11, "topwrap.model.misc.set_parent", false]], "signals (interface attribute)": [[11, "topwrap.model.interface.Interface.signals", false]], "signals (interfacedefinition property)": [[11, "topwrap.model.interface.InterfaceDefinition.signals", false]], "signals (interfaceportgrouping attribute)": [[11, "topwrap.model.inference.mapping.InterfacePortGrouping.signals", false]], "single() (dimensions class method)": [[11, "topwrap.model.hdl_types.Dimensions.single", false]], "size (bit property)": [[11, "topwrap.model.hdl_types.Bit.size", false]], "size (bitstruct property)": [[11, "topwrap.model.hdl_types.BitStruct.size", false]], "size (interconnectsubordinateparams attribute)": [[11, "topwrap.model.interconnect.InterconnectSubordinateParams.size", false]], "size (logic property)": [[11, "topwrap.model.hdl_types.Logic.size", false]], "size (logicarray property)": [[11, "topwrap.model.hdl_types.LogicArray.size", false]], "size (structfield property)": [[11, "topwrap.model.hdl_types.StructField.size", false]], "slice (logicbitselect attribute)": [[11, "topwrap.model.hdl_types.LogicBitSelect.slice", false]], "slice (portselectorop attribute)": [[11, "topwrap.model.inference.port.PortSelectorOp.SLICE", false]], "sliced_signals (interface property)": [[11, "topwrap.model.interface.Interface.sliced_signals", false]], "structfield (class in topwrap.model.hdl_types)": [[11, "topwrap.model.hdl_types.StructField", false]], "subordinate (interfacemode attribute)": [[11, "topwrap.model.interface.InterfaceMode.SUBORDINATE", false]], "subordinates (interconnect attribute)": [[11, "topwrap.model.interconnect.Interconnect.subordinates", false]], "systemveriloggenerator (class in topwrap.backend.sv.generators)": [[7, "topwrap.backend.sv.generators.SystemVerilogGenerator", false]], "topwrap.backend.backend": [[11, "module-topwrap.backend.backend", false]], "topwrap.frontend.frontend": [[11, "module-topwrap.frontend.frontend", false]], "topwrap.interconnects.types.interconnecttypeinfo": [[9, "module-topwrap.interconnects.types.InterconnectTypeInfo", false]], "topwrap.model.connections": [[11, "module-topwrap.model.connections", false]], "topwrap.model.design": [[11, "module-topwrap.model.design", false]], "topwrap.model.hdl_types": [[11, "module-topwrap.model.hdl_types", false]], "topwrap.model.inference.inference": [[11, "module-topwrap.model.inference.inference", false]], "topwrap.model.inference.mapping": [[11, "module-topwrap.model.inference.mapping", false]], "topwrap.model.inference.port": [[11, "module-topwrap.model.inference.port", false]], "topwrap.model.interconnect": [[11, "module-topwrap.model.interconnect", false]], "topwrap.model.interface": [[11, "module-topwrap.model.interface", false]], "topwrap.model.misc": [[11, "module-topwrap.model.misc", false]], "topwrap.model.module": [[11, "module-topwrap.model.module", false]], "translationerror": [[11, "topwrap.model.misc.TranslationError", false]], "type (interfacesignal attribute)": [[11, "topwrap.model.interface.InterfaceSignal.type", false]], "type (port attribute)": [[11, "topwrap.model.connections.Port.type", false]], "type (structfield attribute)": [[11, "topwrap.model.hdl_types.StructField.type", false]], "unmatched_port_penalty_leniency (interfaceinferenceoptions attribute)": [[11, "topwrap.model.inference.inference.InterfaceInferenceOptions.unmatched_port_penalty_leniency", false]], "unspecified (interfacemode attribute)": [[11, "topwrap.model.interface.InterfaceMode.UNSPECIFIED", false]], "upper (dimensions attribute)": [[11, "topwrap.model.hdl_types.Dimensions.upper", false]], "validate_kpm_design() (dataflowvalidator method)": [[3, "topwrap.kpm_dataflow_validator.DataflowValidator.validate_kpm_design", false]], "value (elaboratablevalue attribute)": [[11, "topwrap.model.misc.ElaboratableValue.value", false]], "variablename (in module topwrap.model.misc)": [[11, "topwrap.model.misc.VariableName", false]], "variants (enum attribute)": [[11, "topwrap.model.hdl_types.Enum.variants", false]], "vendor (identifier attribute)": [[11, "topwrap.model.misc.Identifier.vendor", false]], "verilog_generators_map (in module topwrap.backend.sv.generators)": [[7, "topwrap.backend.sv.generators.verilog_generators_map", false]], "wishbonerrsystemveriloggenerator (class in topwrap.backend.sv.generators)": [[7, "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator", false]]}, "objects": {"tests_kpm.test_kpm_validation": [[3, 0, 1, 0, "dataflow_complex_hierarchy", "Dataflow containing many edge cases such as duplicate subgraph node names, stressing out the capabilities of saving a design."], [3, 0, 1, 0, "dataflow_conn_subgraph_metanode", "Dataflow containing subgraph metanode with connection to exposed interface. It can be seen by selecting the \"Edit Subgraph\" on subgraph node."], [3, 0, 1, 0, "dataflow_duplicate_external_input_interfaces", "Dataflow containing two External Input Metanodes with the same name. Here connection is to interface instead of port as in the example above."], [3, 0, 1, 0, "dataflow_duplicate_ip_names", "Dataflow containing two IP cores with the same instance name. This is considered as not possible to represent in design yaml since we can't distinguish them."], [3, 0, 1, 0, "dataflow_duplicate_metanode_names", "Dataflow containing two External Output Metanodes with the same \"External Name\" value."], [3, 0, 1, 0, "dataflow_ext_in_to_ext_out_connections", "Dataflow containing Metanode<->Metanode connection."], [3, 0, 1, 0, "dataflow_hier_duplicate_names", "Dataflow containing subgraph node inside which are duplicate IP's."], [3, 0, 1, 0, "dataflow_inouts_connections", "Dataflow containing a connection between two inout ports."], [3, 0, 1, 0, "dataflow_invalid_parameters_values", "Dataflow containing an IP core with multiple parameters, but it's impossible to resolve the INVALID NAME!!!."], [3, 0, 1, 0, "dataflow_ports_multiple_external_metanodes", "Dataflow containing a port connected to two External Metanodes."], [3, 0, 1, 0, "dataflow_subgraph_multiple_external_metanodes", "Dataflow containing subgraph node with connection to two External Output Metanodes."], [3, 0, 1, 0, "dataflow_unconn_hierarchy", "Dataflow containing subgraph node with two unconnected interfaces."], [3, 0, 1, 0, "dataflow_unnamed_metanodes", "Dataflow containing unnamed External Input Metanode with multiple connections to it."]], "topwrap.backend": [[11, 1, 0, 1, "backend", ""]], "topwrap.backend.backend": [[11, 2, 1, 0, "Backend", "Bases: ABC, Generic[_T]"], [11, 2, 1, 0, "BackendOutputInfo", "Bases: object"]], "topwrap.backend.backend.Backend": [[11, 3, 1, 0, "represent", "Convert the IR into an arbitrary custom external format."], [11, 3, 1, 0, "serialize", "Serialize the custom format object into one or more text files, represented by their content, alongside with additional information about them, like the suggested filename."]], "topwrap.backend.backend.Backend.represent": [[11, 4, 2, "topwrap.backend.backend.Backend.represent", "module", "Convert the IR into an arbitrary custom external format."]], "topwrap.backend.backend.Backend.serialize": [[11, 4, 2, "topwrap.backend.backend.Backend.serialize", "repr", "Serialize the custom format object into one or more text files, represented by their content, alongside with additional information about them, like the suggested filename."]], "topwrap.backend.backend.BackendOutputInfo": [[11, 5, 1, 0, "content", "The content of the file generated by the backend"], [11, 5, 1, 0, "filename", "The filename for this output as suggested by the specific backend E.g. dataflow.kpm.json or axibridge.sv"], [11, 3, 1, 0, "save", "Save this output as a file on the filesystem under a given path"]], "topwrap.backend.backend.BackendOutputInfo.__init__": [[11, 4, 2, "topwrap.backend.backend.BackendOutputInfo", "content", "Bases: object"], [11, 4, 2, "topwrap.backend.backend.BackendOutputInfo", "filename", "Bases: object"]], "topwrap.backend.backend.BackendOutputInfo.save": [[11, 4, 2, 0, "path", "The path where to save the file."]], "topwrap.backend.generator": [[7, 2, 1, 0, "Generator", "Returns generated ModuleInstance based on Interconnect, generated ModuleInsance always has rst and clk, ModuleInstance also has additional ports and interfaces based on what bus is used with managers and subordinates. ModuleInstance`s of subordinates and managers are connected to generated `ModuleInsatnce"]], "topwrap.backend.generator.Generator": [[7, 3, 1, 0, "add_module_instance_to_design", "Returns generated ModuleInstance based on Interconnect, generated ModuleInsance always has rst and clk, ModuleInstance also has additional ports and interfaces based on what bus is used with managers and subordinates. ModuleInstance`s of subordinates and managers are connected to generated `ModuleInsatnce"], [7, 3, 1, 0, "generate", "Returns generated HDL code wrapped in class specific for backend"], [7, 3, 1, 0, "get_name", "Returns name for InterfaceSignal, generated backend specific code need to have same naming convention"]], "topwrap.backend.generator.Generator.add_module_instance_to_design": [[7, 4, 2, 0, "interconnect", "Interconnect to represent as ModuleInstance"]], "topwrap.backend.generator.Generator.generate": [[7, 4, 2, 0, "interconnect", "HDL code is generated based on this Interconnect"], [7, 4, 2, 0, "module_instance", "generated based on Interconnect, it don't need to be used for generation, but can be helpful"]], "topwrap.backend.generator.Generator.get_name": [[7, 4, 2, 0, "referenced_interface", "InterfaceInstance containing this InterfaceSignal"], [7, 4, 2, 0, "signal", "Signal to give name"]], "topwrap.backend.sv.generators": [[7, 2, 1, 0, "SystemVerilogGenerator", "It is System Verilog specific generator, it's empty and need subclass for each Interconnect that SV backend need to support"], [7, 2, 1, 0, "WishboneRRSystemVerilogGenerator", "Returns generated ModuleInstance based on Interconnect, generated ModuleInstance always has rst and clk, ModuleInstance also has additional ports and interfaces based on what bus is used with managers and subordinates. ModuleInstance`s of subordinates and managers are connected to generated `ModuleInstance"], [7, 6, 1, 0, "verilog_generators_map", "Used by SV backend to get correct generator. All implementations of Generator for SV backend need to be present in this map."]], "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator": [[7, 3, 1, 0, "add_module_instance_to_design", "Returns generated ModuleInstance based on Interconnect, generated ModuleInstance always has rst and clk, ModuleInstance also has additional ports and interfaces based on what bus is used with managers and subordinates. ModuleInstance`s of subordinates and managers are connected to generated `ModuleInstance"], [7, 3, 1, 0, "generate", "Returns generated HDL code wrapped in class specific for backend"], [7, 3, 1, 0, "get_name", "Returns name for InterfaceSignal, generated backend specific code need to have same naming convention"]], "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.add_module_instance_to_design": [[7, 4, 2, 0, "interconnect", "Interconnect to represent as ModuleInstance"]], "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.generate": [[7, 4, 2, 0, "interconnect", "HDL code is generated based on this Interconnect"], [7, 4, 2, 0, "module_instance", "generated based on Interconnect, it don't need to be used for generation, but can be helpful"]], "topwrap.backend.sv.generators.WishboneRRSystemVerilogGenerator.get_name": [[7, 4, 2, 0, "referenced_interface", "InterfaceInstance containing this InterfaceSignal"], [7, 4, 2, 0, "signal", "Signal to give name"]], "topwrap.config": [[4, 2, 1, 0, "Config", "Global topwrap configuration"], [4, 2, 1, 0, "ConfigManager", "Manager used to load topwrap's configuration from files."]], "topwrap.config.Config": [[4, 5, 1, 0, "Schema", "alias of Config"]], "topwrap.config.Config.__init__": [[4, 4, 2, "topwrap.config.Config", "force_interface_compliance: bool | None = False", "Global topwrap configuration"], [4, 4, 2, "topwrap.config.Config", "repositories: dict[str", "Global topwrap configuration"]], "topwrap.config.Config.__init__.kpm_build_location: str = &#x27;/github/home/": [[4, 4, 2, "topwrap.config.Config", "local/cache/topwrap/kpm_build&#x27;", "Global topwrap configuration"]], "topwrap.config.Config.__init__.~topwrap.resource_field": [[4, 4, 2, "topwrap.config.Config", "ResourceReferenceHandler] = &lt;factory&gt;", "Global topwrap configuration"]], "topwrap.config.ConfigManager": [[4, 5, 1, 0, "BUILTIN_DIR", ""]], "topwrap.config.ConfigManager.__init__": [[4, 4, 2, "topwrap.config.ConfigManager", "search_paths", "Manager used to load topwrap's configuration from files."]], "topwrap.frontend": [[11, 1, 0, 1, "frontend", ""]], "topwrap.frontend.frontend": [[11, 2, 1, 0, "Frontend", "Bases: ABC"], [11, 2, 1, 0, "FrontendMetadata", "Bases: object"], [11, 8, 1, 0, "FrontendParseException", "Bases: TranslationError"], [11, 2, 1, 0, "FrontendParseStrInput", "Bases: object"]], "topwrap.frontend.frontend.Frontend": [[11, 7, 1, 0, "metadata", "Return metadata about this frontend such as its file associations"], [11, 3, 1, 0, "parse_files", "Parse a collection of source files into IR modules"], [11, 3, 1, 0, "parse_str", "Parse a collection of string sources into IR modules"]], "topwrap.frontend.frontend.Frontend.__init__": [[11, 4, 2, "topwrap.frontend.frontend.Frontend", "interfaces", "Bases: ABC"], [11, 4, 2, "topwrap.frontend.frontend.Frontend", "modules", "Bases: ABC"]], "topwrap.frontend.frontend.Frontend.parse_files": [[11, 4, 2, 0, "sources", "Collection of paths to sources"]], "topwrap.frontend.frontend.Frontend.parse_str": [[11, 4, 2, 0, "sources", "Iterable of string sources."]], "topwrap.frontend.frontend.FrontendMetadata": [[11, 5, 1, 0, "file_association", "File extensions associated with this frontend in the form of a set of extensions (e.g. {\".yaml\", \".yml\"})"], [11, 5, 1, 0, "name", "A short name for this frontend used in contexts when a specific frontend needs to be identified for example in a configuration file or CLI"]], "topwrap.frontend.frontend.FrontendMetadata.__init__": [[11, 4, 2, "topwrap.frontend.frontend.FrontendMetadata", "file_association: Iterable[str] = &lt;factory&gt;", "Bases: object"], [11, 4, 2, "topwrap.frontend.frontend.FrontendMetadata", "name: str", "Bases: object"]], "topwrap.frontend.frontend.FrontendParseStrInput": [[11, 5, 1, 0, "content", ""], [11, 5, 1, 0, "name", ""]], "topwrap.frontend.frontend.FrontendParseStrInput.__init__": [[11, 4, 2, "topwrap.frontend.frontend.FrontendParseStrInput", "content", "Bases: object"], [11, 4, 2, "topwrap.frontend.frontend.FrontendParseStrInput", "name", "Bases: object"]], "topwrap.fuse_helper": [[5, 2, 1, 0, "FuseSocBuilder", "Use this class to generate a FuseSoC .core file"]], "topwrap.fuse_helper.FuseSocBuilder": [[5, 3, 1, 0, "add_dependency", "Adds a dependency to the list of dependencies in the core file"], [5, 3, 1, 0, "add_external_ip", "Store information about IP Cores from Vivado library to generate hooks that will add the IPs in a TCL script."], [5, 3, 1, 0, "add_source", "Adds an HDL source to the list of sources in the core file"], [5, 3, 1, 0, "add_sources_dir", "Given a name of a directory, add all files found inside it. Recognize VHDL, Verilog, and XDC files."], [5, 3, 1, 0, "build", "Generate the final create .core file"]], "topwrap.fuse_helper.FuseSocBuilder.__init__": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder", "part", "Use this class to generate a FuseSoC .core file"]], "topwrap.fuse_helper.FuseSocBuilder.add_dependency": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_dependency", "dependency", "Adds a dependency to the list of dependencies in the core file"]], "topwrap.fuse_helper.FuseSocBuilder.add_external_ip": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_external_ip", "name", "Store information about IP Cores from Vivado library to generate hooks that will add the IPs in a TCL script."], [5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_external_ip", "vlnv", "Store information about IP Cores from Vivado library to generate hooks that will add the IPs in a TCL script."]], "topwrap.fuse_helper.FuseSocBuilder.add_source": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_source", "filename", "Adds an HDL source to the list of sources in the core file"], [5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_source", "type", "Adds an HDL source to the list of sources in the core file"]], "topwrap.fuse_helper.FuseSocBuilder.add_sources_dir": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_sources_dir", "core_path", "Given a name of a directory, add all files found inside it. Recognize VHDL, Verilog, and XDC files."], [5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.add_sources_dir", "sources_dir", "Given a name of a directory, add all files found inside it. Recognize VHDL, Verilog, and XDC files."]], "topwrap.fuse_helper.FuseSocBuilder.build": [[5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.build", "core_path", "Generate the final create .core file"], [5, 4, 2, 0, "sources_dir", "additional directory with source files to add"], [5, 4, 2, 0, "template_name", "name of jinja2 template to be used, either in working directory, or bundled with the package. defaults to a bundled template"], [5, 4, 2, "topwrap.fuse_helper.FuseSocBuilder.build", "top_name", "Generate the final create .core file"]], "topwrap.interconnects.types": [[9, 6, 1, 0, "INTERCONNECT_TYPES", "Maps name to specific interconnect implementation. Used by YAML frontend."], [9, 1, 0, 1, "InterconnectTypeInfo", ""]], "topwrap.interface": [[10, 2, 1, 0, "InterfaceDefinition", "Interface described in YAML interface definition file"], [10, 0, 1, 0, "get_interface_by_name", "Retrieve interface definition by its name"]], "topwrap.interface.InterfaceDefinition": [[10, 5, 1, 0, "Schema", "alias of InterfaceDefinition"], [10, 3, 1, 0, "get_builtins", "Loads all builtin internal interfaces"]], "topwrap.interface.InterfaceDefinition.__init__": [[10, 4, 2, "topwrap.interface.InterfaceDefinition", "name: str", "Interface described in YAML interface definition file"], [10, 4, 2, "topwrap.interface.InterfaceDefinition", "port_prefix: str", "Interface described in YAML interface definition file"]], "topwrap.interface.InterfaceDefinition.__init__.signals: ~topwrap.interface": [[10, 4, 2, "topwrap.interface.InterfaceDefinition", "InterfaceDefinitionSignals = &lt;factory&gt;", "Interface described in YAML interface definition file"]], "topwrap.interface.get_interface_by_name": [[10, 4, 2, "topwrap.interface.get_interface_by_name", "name", "Retrieve interface definition by its name"]], "topwrap.kpm_dataflow_validator": [[3, 2, 1, 0, "CheckResult", "Return type of each validation check"], [3, 2, 1, 0, "DataflowValidator", "The main class that contains all the validation checks. The purpose of validation is to check for common errors the user may make while creating the design and make sure the design can be saved in topwrap yaml format. These functions are called in two cases:"]], "topwrap.kpm_dataflow_validator.CheckResult.__init__": [[3, 4, 2, 0, "check_name", "Name of the check"], [3, 4, 2, 0, "error_count", "Number of errors if status is not OK"], [3, 4, 2, 0, "message", "Message describing errors"], [3, 4, 2, 0, "status", "Check can be return one of three MessageTypes (OK, ERROR, WARNING)"]], "topwrap.kpm_dataflow_validator.DataflowValidator": [[3, 3, 1, 0, "check_connection_to_subgraph_metanodes", "Check for any connections to exposed subgraph metanode ports."], [3, 3, 1, 0, "check_duplicate_metanode_names", "Check for duplicate names of external metanodes. The name of metanode is in \"External Name\" property. In design, these external metanodes are referenced by this name so if there are multiple metanodes with the same name it will not be possible to represent them, hence the error."], [3, 3, 1, 0, "check_duplicate_node_names", "Check for any duplicate IP instance names in the graph (graph represents a hierarchy level). This check prevents from creating multiple nodes with the same \"instanceName\" in a given graph, since this is invalid in design. There can be multiple nodes with the same \"instanceName\" in the whole design (on various hierarchy levels)."], [3, 3, 1, 0, "check_external_in_to_external_out_connections", "Check for connections between two external metanodes. In our design format (YAML), connections to external nodes are always represented as port: external, regardless of whether the external node is an input or output. Therefore, connections directly between two external metanodes cannot be represented within this format and are invalid by design."], [3, 3, 1, 0, "check_parameters_values", "Check if parameters in IP nodes are valid."], [3, 3, 1, 0, "check_port_to_multiple_external_metanodes", "Check for ports that have connections to multiple external metanodes. Design schema allows only one connection between an IPcore/hierarchy port and an external metanode. The connection between the port and external metanode is a single entry, not a list that's why we can't add more connections."], [3, 3, 1, 0, "check_unconnected_ports_interfaces", "Check for unconnected ports or interfaces. This check helps identify any unconnected elements, warning the user about potential oversights or missed connections."], [3, 3, 1, 0, "check_unnamed_external_metanodes_with_multiple_conn", "Check for external metanodes that are connected to more than one port and don't have a user-specified name. This is important to check because it is an undefined behavior when saving a design. Currently, when there is a connection to an unnamed metanode in design this metanode will have the name of the port it's connected to."], [3, 3, 1, 0, "validate_kpm_design", "Run checks to validate the user-created design in KPM. Checks are designed to inform the user about errors present in his design that make it impossible to save and display warnings about potential issues in the design."]], "topwrap.kpm_dataflow_validator.DataflowValidator.__init__": [[3, 4, 2, "topwrap.kpm_dataflow_validator.DataflowValidator", "dataflow", "The main class that contains all the validation checks. The purpose of validation is to check for common errors the user may make while creating the design and make sure the design can be saved in topwrap yaml format. These functions are called in two cases:"]], "topwrap.model": [[11, 1, 0, 1, "connections", ""], [11, 1, 0, 1, "design", ""], [11, 1, 0, 1, "hdl_types", ""], [11, 1, 0, 1, "interconnect", ""], [11, 1, 0, 1, "interface", ""], [11, 1, 0, 1, "misc", ""], [11, 1, 0, 1, "module", ""]], "topwrap.model.connections": [[11, 2, 1, 0, "ConstantConnection", "Bases: _Connection[ElaboratableValue, ReferencedPort]"], [11, 2, 1, 0, "InterfaceConnection", "Bases: _Connection[ReferencedInterface, ReferencedInterface]"], [11, 2, 1, 0, "Port", "Bases: ModelBase"], [11, 2, 1, 0, "PortConnection", "Bases: _Connection[ReferencedPort, ReferencedPort]"], [11, 2, 1, 0, "PortDirection", "Bases: Enum"], [11, 2, 1, 0, "ReferencedInterface", "Bases: _ReferencedIO[Interface]"], [11, 2, 1, 0, "ReferencedPort", "Bases: _ReferencedIO[Port]"]], "topwrap.model.connections.ConstantConnection.__init__": [[11, 4, 2, "topwrap.model.connections.ConstantConnection", "source", "Bases: _Connection[ElaboratableValue, ReferencedPort]"], [11, 4, 2, "topwrap.model.connections.ConstantConnection", "target", "Bases: _Connection[ElaboratableValue, ReferencedPort]"]], "topwrap.model.connections.InterfaceConnection.__init__": [[11, 4, 2, "topwrap.model.connections.InterfaceConnection", "source", "Bases: _Connection[ReferencedInterface, ReferencedInterface]"], [11, 4, 2, "topwrap.model.connections.InterfaceConnection", "target", "Bases: _Connection[ReferencedInterface, ReferencedInterface]"]], "topwrap.model.connections.Port": [[11, 5, 1, 0, "direction", ""], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "parent", "The module definition that exposes this port"], [11, 5, 1, 0, "type", "The type of this port. (Bit, BitStruct, LogicArray etc.)"]], "topwrap.model.connections.Port.__init__": [[11, 4, 2, "topwrap.model.connections.Port", "direction", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.connections.Port", "name", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.connections.Port", "type", "Bases: ModelBase"]], "topwrap.model.connections.PortConnection.__init__": [[11, 4, 2, "topwrap.model.connections.PortConnection", "source", "Bases: _Connection[ReferencedPort, ReferencedPort]"], [11, 4, 2, "topwrap.model.connections.PortConnection", "target", "Bases: _Connection[ReferencedPort, ReferencedPort]"]], "topwrap.model.connections.PortDirection": [[11, 5, 1, 0, "IN", ""], [11, 5, 1, 0, "INOUT", ""], [11, 5, 1, 0, "OUT", ""], [11, 3, 1, 0, "reverse", ""]], "topwrap.model.connections.PortDirection.__init__": [[11, 4, 2, "topwrap.model.connections.PortDirection", "boundary", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "module", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "names", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "qualname", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "start", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "type", "Bases: Enum"], [11, 4, 2, "topwrap.model.connections.PortDirection", "value", "Bases: Enum"]], "topwrap.model.connections.ReferencedInterface.__init__": [[11, 4, 2, "topwrap.model.connections.ReferencedInterface", "instance", "Bases: _ReferencedIO[Interface]"], [11, 4, 2, "topwrap.model.connections.ReferencedInterface", "io", "Bases: _ReferencedIO[Interface]"]], "topwrap.model.connections.ReferencedPort": [[11, 3, 1, 0, "external", "A shortcut constructor for a reference to a top-level IO of the current module"], [11, 3, 1, 0, "overlaps", "Checks for overlap between two port references."], [11, 5, 1, 0, "select", ""]], "topwrap.model.connections.ReferencedPort.__init__": [[11, 4, 2, "topwrap.model.connections.ReferencedPort", "instance", "Bases: _ReferencedIO[Port]"], [11, 4, 2, "topwrap.model.connections.ReferencedPort", "io", "Bases: _ReferencedIO[Port]"], [11, 4, 2, "topwrap.model.connections.ReferencedPort", "select", "Bases: _ReferencedIO[Port]"]], "topwrap.model.connections.ReferencedPort.external": [[11, 4, 2, "topwrap.model.connections.ReferencedPort.external", "io", "A shortcut constructor for a reference to a top-level IO of the current module"], [11, 4, 2, "topwrap.model.connections.ReferencedPort.external", "select", "A shortcut constructor for a reference to a top-level IO of the current module"]], "topwrap.model.connections.ReferencedPort.overlaps": [[11, 4, 2, "topwrap.model.connections.ReferencedPort.overlaps", "other", "Checks for overlap between two port references."]], "topwrap.model.design": [[11, 2, 1, 0, "Design", "Bases: ModelBase"], [11, 2, 1, 0, "ModuleInstance", "Bases: ModelBase"]], "topwrap.model.design.Design": [[11, 3, 1, 0, "add_component", ""], [11, 3, 1, 0, "add_connection", ""], [11, 3, 1, 0, "add_interconnect", ""], [11, 7, 1, 0, "components", ""], [11, 7, 1, 0, "connections", ""], [11, 3, 1, 0, "connections_with", "Yields everything that is connected to a given IO."], [11, 7, 1, 0, "interconnects", ""], [11, 5, 1, 0, "parent", ""]], "topwrap.model.design.Design.__init__": [[11, 4, 2, "topwrap.model.design.Design", "components", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.design.Design", "connections", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.design.Design", "interconnects", "Bases: ModelBase"]], "topwrap.model.design.Design.add_component": [[11, 4, 2, "topwrap.model.design.Design.add_component", "component", ""]], "topwrap.model.design.Design.add_connection": [[11, 4, 2, "topwrap.model.design.Design.add_connection", "connection", ""]], "topwrap.model.design.Design.add_interconnect": [[11, 4, 2, "topwrap.model.design.Design.add_interconnect", "interconnect", ""]], "topwrap.model.design.Design.connections_with": [[11, 4, 2, 0, "io", "The IO of which connections to yield."]], "topwrap.model.design.ModuleInstance": [[11, 5, 1, 0, "module", "The module that this is an instance of. Corresponds to \"MODULE\" in the Verilog construct defined above."], [11, 5, 1, 0, "name", "The name of this instance. It corresponds to \"instance_name\" in this exemplary Verilog construct: MODULE #(.WIDTH(32)) instance_name (.clk(clk));"], [11, 5, 1, 0, "parameters", "Concrete parameter values for the module that this is an instance of. Corresponds to \"#(.WIDTH(32))\" in the above Verilog construct."], [11, 5, 1, 0, "parent", "Reference to the design that contains this component"]], "topwrap.model.design.ModuleInstance.__init__": [[11, 4, 2, "topwrap.model.design.ModuleInstance", "module", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.design.ModuleInstance", "name", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.design.ModuleInstance", "parameters", "Bases: ModelBase"]], "topwrap.model.hdl_types": [[11, 2, 1, 0, "Bit", "Bases: Logic"], [11, 2, 1, 0, "BitStruct", "Bases: Logic"], [11, 2, 1, 0, "Bits", "Bases: LogicArray[Bit]"], [11, 2, 1, 0, "Dimensions", "Bases: object"], [11, 2, 1, 0, "Enum", "Bases: Bits"], [11, 2, 1, 0, "Logic", "Bases: ModelBase, ABC"], [11, 2, 1, 0, "LogicArray", "Bases: Logic, Generic[_ArrayItemOrField]"], [11, 2, 1, 0, "LogicBitSelect", "Bases: object"], [11, 2, 1, 0, "LogicFieldSelect", "Bases: object"], [11, 2, 1, 0, "LogicSelect", "Bases: object"], [11, 2, 1, 0, "StructField", "Bases: Logic, Generic[_ArrayItemOrField]"]], "topwrap.model.hdl_types.Bit": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 7, 1, 0, "size", "All Logic subclasses should have an elaboratable size (the number of bits)"]], "topwrap.model.hdl_types.Bit.__init__": [[11, 4, 2, "topwrap.model.hdl_types.Bit", "name", "Bases: Logic"]], "topwrap.model.hdl_types.BitStruct": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 5, 1, 0, "fields", ""], [11, 7, 1, 0, "size", "All Logic subclasses should have an elaboratable size (the number of bits)"]], "topwrap.model.hdl_types.BitStruct.__init__": [[11, 4, 2, "topwrap.model.hdl_types.BitStruct", "fields", "Bases: Logic"], [11, 4, 2, "topwrap.model.hdl_types.BitStruct", "name", "Bases: Logic"]], "topwrap.model.hdl_types.Bits.__init__": [[11, 4, 2, "topwrap.model.hdl_types.Bits", "dimensions", "Bases: LogicArray[Bit]"], [11, 4, 2, "topwrap.model.hdl_types.Bits", "name", "Bases: LogicArray[Bit]"]], "topwrap.model.hdl_types.Dimensions": [[11, 5, 1, 0, "lower", ""], [11, 3, 1, 0, "single", ""], [11, 5, 1, 0, "upper", ""]], "topwrap.model.hdl_types.Dimensions.__init__.lower: ~topwrap.model.misc": [[11, 4, 2, "topwrap.model.hdl_types.Dimensions", "ElaboratableValue = &lt;factory&gt;", "Bases: object"]], "topwrap.model.hdl_types.Dimensions.__init__.upper: ~topwrap.model.misc": [[11, 4, 2, "topwrap.model.hdl_types.Dimensions", "ElaboratableValue = &lt;factory&gt;", "Bases: object"]], "topwrap.model.hdl_types.Dimensions.single": [[11, 4, 2, "topwrap.model.hdl_types.Dimensions.single", "val", ""]], "topwrap.model.hdl_types.Enum": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 5, 1, 0, "variants", ""]], "topwrap.model.hdl_types.Enum.__init__": [[11, 4, 2, "topwrap.model.hdl_types.Enum", "dimensions", "Bases: Bits"], [11, 4, 2, "topwrap.model.hdl_types.Enum", "name", "Bases: Bits"], [11, 4, 2, "topwrap.model.hdl_types.Enum", "variants", "Bases: Bits"]], "topwrap.model.hdl_types.Logic": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "parent", "The parent of this type. Used to create a reference tree between complex type definitions, for example between LogicArray and the inner type it contains or between a BitStruct and its fields. Is None when this represents a top-level type"], [11, 7, 1, 0, "size", "All Logic subclasses should have an elaboratable size (the number of bits)"]], "topwrap.model.hdl_types.Logic.__init__": [[11, 4, 2, "topwrap.model.hdl_types.Logic", "name", "Bases: ModelBase, ABC"]], "topwrap.model.hdl_types.LogicArray": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 5, 1, 0, "dimensions", ""], [11, 5, 1, 0, "item", ""], [11, 7, 1, 0, "size", "All Logic subclasses should have an elaboratable size (the number of bits)"]], "topwrap.model.hdl_types.LogicArray.__init__": [[11, 4, 2, "topwrap.model.hdl_types.LogicArray", "dimensions", "Bases: Logic, Generic[_ArrayItemOrField]"], [11, 4, 2, "topwrap.model.hdl_types.LogicArray", "item", "Bases: Logic, Generic[_ArrayItemOrField]"], [11, 4, 2, "topwrap.model.hdl_types.LogicArray", "name", "Bases: Logic, Generic[_ArrayItemOrField]"]], "topwrap.model.hdl_types.LogicBitSelect": [[11, 5, 1, 0, "slice", ""]], "topwrap.model.hdl_types.LogicBitSelect.__init__": [[11, 4, 2, "topwrap.model.hdl_types.LogicBitSelect", "slice", "Bases: object"]], "topwrap.model.hdl_types.LogicFieldSelect": [[11, 5, 1, 0, "field", ""]], "topwrap.model.hdl_types.LogicFieldSelect.__init__": [[11, 4, 2, "topwrap.model.hdl_types.LogicFieldSelect", "field", "Bases: object"]], "topwrap.model.hdl_types.LogicSelect": [[11, 5, 1, 0, "logic", ""], [11, 5, 1, 0, "ops", ""], [11, 3, 1, 0, "overlaps", "Checks if this selection of a logic type overlaps with another selection. An overlap occurs if two selections of types flatten to a packed bit-vector would target a range of the same bits. E.g.:"]], "topwrap.model.hdl_types.LogicSelect.__init__.logic: ~topwrap.model.hdl_types": [[11, 4, 2, "topwrap.model.hdl_types.LogicSelect", "Logic", "Bases: object"]], "topwrap.model.hdl_types.LogicSelect.__init__.ops: list[~topwrap.model.hdl_types.LogicFieldSelect | ~topwrap.model.hdl_types": [[11, 4, 2, "topwrap.model.hdl_types.LogicSelect", "LogicBitSelect] = &lt;factory&gt;", "Bases: object"]], "topwrap.model.hdl_types.LogicSelect.overlaps": [[11, 4, 2, "topwrap.model.hdl_types.LogicSelect.overlaps", "other", "Checks if this selection of a logic type overlaps with another selection. An overlap occurs if two selections of types flatten to a packed bit-vector would target a range of the same bits. E.g.:"]], "topwrap.model.hdl_types.StructField": [[11, 3, 1, 0, "copy", "Clones the Logic type in a way to create two separate object trees, so that a deeper modification to one tree is not be reflected in the other."], [11, 5, 1, 0, "field_name", ""], [11, 7, 1, 0, "size", "All Logic subclasses should have an elaboratable size (the number of bits)"], [11, 5, 1, 0, "type", ""]], "topwrap.model.hdl_types.StructField.__init__": [[11, 4, 2, "topwrap.model.hdl_types.StructField", "name", "Bases: Logic, Generic[_ArrayItemOrField]"], [11, 4, 2, "topwrap.model.hdl_types.StructField", "type", "Bases: Logic, Generic[_ArrayItemOrField]"]], "topwrap.model.inference": [[11, 1, 0, 1, "inference", ""], [11, 1, 0, 1, "mapping", ""], [11, 1, 0, 1, "port", ""]], "topwrap.model.inference.inference": [[11, 2, 1, 0, "InterfaceInferenceOptions", "Bases: object"], [11, 0, 1, 0, "infer_interfaces_from_module", "Perform interface inference. Yields a mapping that can be applied using map_interfaces_to_module()."], [11, 0, 1, 0, "parse_grouping_hints", "Parse user-facing grouping hints into a dictionary for infer_interfaces_from_module()."]], "topwrap.model.inference.inference.InterfaceInferenceOptions": [[11, 5, 1, 0, "min_group_size", "Minimum number of ports that must be in a group for it to be considered."], [11, 5, 1, 0, "min_signal_count", "Minimum number of signals an interface must have for it to be considered."], [11, 5, 1, 0, "optional_match_score", "Points awarded for matching all optional signals (applied proportionally)."], [11, 5, 1, 0, "optional_missing_score", "Points awarded for missing all optional signals (applied proportionally)."], [11, 5, 1, 0, "prefix_consider_camel_case", "Should camel case prefixes be considered."], [11, 5, 1, 0, "prefix_length_score", "Points awarded to each character of the prefix."], [11, 5, 1, 0, "prefix_split_tokens", "Tokens on which prefixes are split on."], [11, 5, 1, 0, "required_match_score", "Points awarded for matching all required signals (applied proportionally)."], [11, 5, 1, 0, "required_missing_score", "Points awarded for missing all required signals (applied proportionally)."], [11, 5, 1, 0, "score_lower_limit", "Candidate interfaces with score below or equal to this limit will be ignored."], [11, 5, 1, 0, "unmatched_port_penalty_leniency", "Leniency in penalty for unmatched ports in a group. Penalty is computed as -(exp(n/leniency) - 1), such that matching all ports yields 0 points."]], "topwrap.model.inference.inference.InterfaceInferenceOptions.__init__": [[11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "min_group_size: int = 2", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "min_signal_count: int = 2", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "optional_match_score: int = 10", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "optional_missing_score: int = -2", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "prefix_consider_camel_case: bool = True", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "prefix_length_score: int = 2", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "prefix_split_tokens: list[str] = &lt;factory&gt;", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "required_match_score: int = 15", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "required_missing_score: int = -100", "Bases: object"], [11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "score_lower_limit: int = 0", "Bases: object"]], "topwrap.model.inference.inference.InterfaceInferenceOptions.__init__.unmatched_port_penalty_leniency: float = 7": [[11, 4, 2, "topwrap.model.inference.inference.InterfaceInferenceOptions", "5", "Bases: object"]], "topwrap.model.inference.inference.infer_interfaces_from_module": [[11, 4, 2, 0, "grouping_hints", "Hints for merging discovered groups into one."], [11, 4, 2, 0, "intf_defs", "Interface definitions to consider."], [11, 4, 2, 0, "module", "Module to perform inference on."], [11, 4, 2, 0, "options", "Configuration options for inference."]], "topwrap.model.inference.inference.parse_grouping_hints": [[11, 4, 2, "topwrap.model.inference.inference.parse_grouping_hints", "grouping_hints", "Parse user-facing grouping hints into a dictionary for infer_interfaces_from_module()."]], "topwrap.model.inference.mapping": [[11, 8, 1, 0, "InterfaceMappingError", "Bases: RuntimeError"], [11, 2, 1, 0, "InterfacePortGrouping", "Bases: MarshmallowDataclassExtensions"], [11, 2, 1, 0, "InterfacePortMapping", "Bases: MarshmallowDataclassExtensions"], [11, 2, 1, 0, "InterfacePortMappingDefinition", "Bases: MarshmallowDataclassExtensions"], [11, 0, 1, 0, "map_interfaces_to_module", "Apply mappings to the given module. Potentially modifies the module by adding new interfaces, as described in the given mappings."]], "topwrap.model.inference.mapping.InterfacePortGrouping": [[11, 5, 1, 0, "Schema", "alias of InterfacePortGrouping"], [11, 5, 1, 0, "clock", "Clock signal for this interface. Might be shared with other interfaces in a module."], [11, 5, 1, 0, "interface", "Identifier of the interface that this grouping uses."], [11, 5, 1, 0, "mode", "The interface mode (manager, subordinate) for this grouping."], [11, 5, 1, 0, "reset", "Reset signal for this interface. Might be shared with other interfaces in a module."], [11, 5, 1, 0, "signals", "A signal name to port selector mapping for this grouping."]], "topwrap.model.inference.mapping.InterfacePortGrouping.__init__": [[11, 4, 2, "topwrap.model.inference.mapping.InterfacePortGrouping", "clock", "Bases: MarshmallowDataclassExtensions"], [11, 4, 2, "topwrap.model.inference.mapping.InterfacePortGrouping", "interface", "Bases: MarshmallowDataclassExtensions"], [11, 4, 2, "topwrap.model.inference.mapping.InterfacePortGrouping", "mode", "Bases: MarshmallowDataclassExtensions"], [11, 4, 2, "topwrap.model.inference.mapping.InterfacePortGrouping", "reset", "Bases: MarshmallowDataclassExtensions"], [11, 4, 2, "topwrap.model.inference.mapping.InterfacePortGrouping", "signals", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.inference.mapping.InterfacePortMapping": [[11, 5, 1, 0, "Schema", "alias of InterfacePortMapping"], [11, 5, 1, 0, "id", "The identifier of the module this mapping applies to."], [11, 5, 1, 0, "interfaces", "Named groupings of ports into interfaces. See PortSelector for a description of the format."]], "topwrap.model.inference.mapping.InterfacePortMapping.__init__": [[11, 4, 2, "topwrap.model.inference.mapping.InterfacePortMapping", "interfaces: dict[str", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.inference.mapping.InterfacePortMapping.__init__.id: ~topwrap.model.misc": [[11, 4, 2, "topwrap.model.inference.mapping.InterfacePortMapping", "Identifier", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.inference.mapping.InterfacePortMapping.__init__.~topwrap.model.inference.mapping": [[11, 4, 2, "topwrap.model.inference.mapping.InterfacePortMapping", "InterfacePortGrouping] = &lt;factory&gt;", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.inference.mapping.InterfacePortMappingDefinition": [[11, 5, 1, 0, "Schema", "alias of InterfacePortMappingDefinition"], [11, 5, 1, 0, "modules", ""]], "topwrap.model.inference.mapping.InterfacePortMappingDefinition.__init__": [[11, 4, 2, "topwrap.model.inference.mapping.InterfacePortMappingDefinition", "modules", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.inference.mapping.map_interfaces_to_module": [[11, 4, 2, 0, "intf_defs", "Known interface definitions for mappings."], [11, 4, 2, 0, "mappings", "The mappings to use."], [11, 4, 2, 0, "module", "Module to apply mappings to."]], "topwrap.model.inference.port": [[11, 2, 1, 0, "PortSelector", "Bases: object"], [11, 2, 1, 0, "PortSelectorField", "Bases: Field"], [11, 2, 1, 0, "PortSelectorOp", "Bases: Enum"]], "topwrap.model.inference.port.PortSelector": [[11, 3, 1, 0, "from_str", "Parse a port selector string into an instance of PortSelector."], [11, 3, 1, 0, "make_referenced_port", "Construct a ReferencedPort, potentially with an instance of LogicSelect based on the information contained in this selector."], [11, 5, 1, 0, "ops", "Tuple of operations to be performed on the port."], [11, 5, 1, 0, "port", "Name of the module port this selector targets."]], "topwrap.model.inference.port.PortSelector.from_str": [[11, 4, 2, "topwrap.model.inference.port.PortSelector.from_str", "sel", "Parse a port selector string into an instance of PortSelector."]], "topwrap.model.inference.port.PortSelector.make_referenced_port": [[11, 4, 2, "topwrap.model.inference.port.PortSelector.make_referenced_port", "mode", "Construct a ReferencedPort, potentially with an instance of LogicSelect based on the information contained in this selector."], [11, 4, 2, "topwrap.model.inference.port.PortSelector.make_referenced_port", "module", "Construct a ReferencedPort, potentially with an instance of LogicSelect based on the information contained in this selector."], [11, 4, 2, "topwrap.model.inference.port.PortSelector.make_referenced_port", "signal", "Construct a ReferencedPort, potentially with an instance of LogicSelect based on the information contained in this selector."]], "topwrap.model.inference.port.PortSelectorOp": [[11, 5, 1, 0, "FIELD", ""], [11, 5, 1, 0, "SLICE", ""]], "topwrap.model.inference.port.PortSelectorOp.__init__": [[11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "boundary", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "module", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "names", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "qualname", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "start", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "type", "Bases: Enum"], [11, 4, 2, "topwrap.model.inference.port.PortSelectorOp", "value", "Bases: Enum"]], "topwrap.model.interconnect": [[11, 2, 1, 0, "Interconnect", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 2, 1, 0, "InterconnectManagerParams", "Bases: MarshmallowDataclassExtensions"], [11, 2, 1, 0, "InterconnectParams", "Bases: MarshmallowDataclassExtensions"], [11, 2, 1, 0, "InterconnectSubordinateParams", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.interconnect.Interconnect": [[11, 5, 1, 0, "clock", "The clock signal for this interconnect"], [11, 5, 1, 0, "managers", "Manager interfaces controlling this interconnect described as a mapping between a referenced interface in a design and the type-specific manager configuration"], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "params", "Interconnect-wide type-specific parameters"], [11, 5, 1, 0, "parent", "The design containing this interconnect"], [11, 5, 1, 0, "reset", "The reset signal for this interconnect"], [11, 5, 1, 0, "subordinates", "Subordinate interfaces subject to this interconnect described in the same format as managers"]], "topwrap.model.interconnect.Interconnect.__init__": [[11, 4, 2, "topwrap.model.interconnect.Interconnect", "clock", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 4, 2, "topwrap.model.interconnect.Interconnect", "managers", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 4, 2, "topwrap.model.interconnect.Interconnect", "name", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 4, 2, "topwrap.model.interconnect.Interconnect", "params", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 4, 2, "topwrap.model.interconnect.Interconnect", "reset", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"], [11, 4, 2, "topwrap.model.interconnect.Interconnect", "subordinates", "Bases: ABC, Generic[_IPAR, _MANPAR, _SUBPAR]"]], "topwrap.model.interconnect.InterconnectManagerParams": [[11, 5, 1, 0, "Schema", "alias of InterconnectManagerParams"]], "topwrap.model.interconnect.InterconnectParams": [[11, 5, 1, 0, "Schema", "alias of InterconnectParams"]], "topwrap.model.interconnect.InterconnectSubordinateParams": [[11, 5, 1, 0, "Schema", "alias of InterconnectSubordinateParams"], [11, 5, 1, 0, "address", "The start address of this subordinate in the memory map"], [11, 5, 1, 0, "size", "The size in bytes of this subordinate's address space"]], "topwrap.model.interconnect.InterconnectSubordinateParams.__init__.address: ~topwrap.model.misc": [[11, 4, 2, "topwrap.model.interconnect.InterconnectSubordinateParams", "ElaboratableValue = &lt;factory&gt;", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.interconnect.InterconnectSubordinateParams.__init__.size: ~topwrap.model.misc": [[11, 4, 2, "topwrap.model.interconnect.InterconnectSubordinateParams", "ElaboratableValue = &lt;factory&gt;", "Bases: MarshmallowDataclassExtensions"]], "topwrap.model.interface": [[11, 2, 1, 0, "Interface", "Bases: ModelBase"], [11, 2, 1, 0, "InterfaceDefinition", "Bases: ModelBase"], [11, 2, 1, 0, "InterfaceMode", "Bases: Enum"], [11, 2, 1, 0, "InterfaceSignal", "Bases: ModelBase"], [11, 2, 1, 0, "InterfaceSignalConfiguration", "Bases: object"]], "topwrap.model.interface.Interface": [[11, 5, 1, 0, "definition", "The definition of the interface that this is an instance of"], [11, 7, 1, 0, "has_independent_signals", ""], [11, 7, 1, 0, "has_sliced_signals", ""], [11, 7, 1, 0, "independent_signals", "Yields signals that are not realized by any external ports of the Module"], [11, 5, 1, 0, "mode", "The mode of this instance (e.g. manager/subordinate)"], [11, 5, 1, 0, "name", "Name for this interface instance"], [11, 5, 1, 0, "parent", "The module definition that contains this interface instance"], [11, 5, 1, 0, "signals", "Realization of signals defined in this interface. A signal can be realized either by:"], [11, 7, 1, 0, "sliced_signals", "Yields signals that are realized by external ports of the Module"]], "topwrap.model.interface.Interface.__init__": [[11, 4, 2, "topwrap.model.interface.Interface", "definition", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.Interface", "mode", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.Interface", "name", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.Interface", "signals", "Bases: ModelBase"]], "topwrap.model.interface.InterfaceDefinition": [[11, 3, 1, 0, "add_signal", ""], [11, 5, 1, 0, "id", ""], [11, 7, 1, 0, "signals", "A list of signal definitions that make up this interface E.g. awaddr, araddr, wdata, rdata, etc.... in AXI"]], "topwrap.model.interface.InterfaceDefinition.__init__": [[11, 4, 2, "topwrap.model.interface.InterfaceDefinition", "id", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.InterfaceDefinition", "signals", "Bases: ModelBase"]], "topwrap.model.interface.InterfaceDefinition.add_signal": [[11, 4, 2, "topwrap.model.interface.InterfaceDefinition.add_signal", "signal", ""]], "topwrap.model.interface.InterfaceMode": [[11, 5, 1, 0, "MANAGER", ""], [11, 5, 1, 0, "SUBORDINATE", ""], [11, 5, 1, 0, "UNSPECIFIED", ""]], "topwrap.model.interface.InterfaceMode.__init__": [[11, 4, 2, "topwrap.model.interface.InterfaceMode", "boundary", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "module", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "names", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "qualname", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "start", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "type", "Bases: Enum"], [11, 4, 2, "topwrap.model.interface.InterfaceMode", "value", "Bases: Enum"]], "topwrap.model.interface.InterfaceSignal": [[11, 5, 1, 0, "default", "The default value for this signal, if any"], [11, 5, 1, 0, "modes", "A dictionary of modes for this signal and their specific configurations E.g.: A signal that only has an InterfaceMode.MANAGER entry in this dictionary means that it's valid only on the manager's side."], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "parent", "The definition that this signal belongs to"], [11, 5, 1, 0, "regexp", "While automatically deducing interfaces, if an arbitrary signal's name matches this regular expression then that signal is considered as a candidate for realizing this signal definition"], [11, 5, 1, 0, "type", "The logical type of this signal. Fulfills the same function as Port.type"]], "topwrap.model.interface.InterfaceSignal.__init__": [[11, 4, 2, "topwrap.model.interface.InterfaceSignal", "default", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.InterfaceSignal", "modes", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.InterfaceSignal", "name", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.InterfaceSignal", "regexp", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.interface.InterfaceSignal", "type", "Bases: ModelBase"]], "topwrap.model.interface.InterfaceSignalConfiguration": [[11, 5, 1, 0, "direction", "The direction of this signal in a given InterfaceMode"], [11, 5, 1, 0, "required", "Whether this signal is required or optional"]], "topwrap.model.interface.InterfaceSignalConfiguration.__init__": [[11, 4, 2, "topwrap.model.interface.InterfaceSignalConfiguration", "direction", "Bases: object"], [11, 4, 2, "topwrap.model.interface.InterfaceSignalConfiguration", "required", "Bases: object"]], "topwrap.model.misc": [[11, 2, 1, 0, "ElaboratableValue", "Bases: object"], [11, 2, 1, 0, "FileReference", "Bases: object"], [11, 2, 1, 0, "Identifier", "Bases: object"], [11, 2, 1, 0, "ModelBase", "Bases: ABC"], [11, 8, 1, 0, "NotElaboratedException", "Bases: Exception"], [11, 2, 1, 0, "ObjectId", "Bases: Generic[_T]"], [11, 2, 1, 0, "Parameter", "Bases: ModelBase"], [11, 2, 1, 0, "QuerableView", "Bases: Sequence[_E]"], [11, 8, 1, 0, "RelationshipError", "Bases: Exception"], [11, 8, 1, 0, "TranslationError", "Bases: Exception"], [11, 5, 1, 0, "VariableName", "A placeholder for a future, possibly bounded type for IR object names. For example we may want to reduce possible names to only alphanumerical strings in the future."], [11, 0, 1, 0, "set_parent", ""]], "topwrap.model.misc.ElaboratableValue": [[11, 2, 1, 0, "DataclassRepr", "Bases: Field"], [11, 5, 1, 0, "Field", "alias of ElaboratableValue[ElaboratableValue]"], [11, 3, 1, 0, "elaborate", ""], [11, 5, 1, 0, "value", ""]], "topwrap.model.misc.ElaboratableValue.__init__": [[11, 4, 2, "topwrap.model.misc.ElaboratableValue", "expr", "Bases: object"]], "topwrap.model.misc.FileReference": [[11, 5, 1, 0, "column", ""], [11, 5, 1, 0, "file", ""], [11, 5, 1, 0, "line", ""]], "topwrap.model.misc.FileReference.__init__": [[11, 4, 2, "topwrap.model.misc.FileReference", "column", "Bases: object"], [11, 4, 2, "topwrap.model.misc.FileReference", "file", "Bases: object"], [11, 4, 2, "topwrap.model.misc.FileReference", "line", "Bases: object"]], "topwrap.model.misc.Identifier": [[11, 3, 1, 0, "combined", ""], [11, 5, 1, 0, "library", ""], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "vendor", ""]], "topwrap.model.misc.Identifier.__init__": [[11, 4, 2, "topwrap.model.misc.Identifier", "library", "Bases: object"], [11, 4, 2, "topwrap.model.misc.Identifier", "name", "Bases: object"], [11, 4, 2, "topwrap.model.misc.Identifier", "vendor", "Bases: object"]], "topwrap.model.misc.ObjectId": [[11, 3, 1, 0, "resolve", "Resolve this id to a concrete object instance"]], "topwrap.model.misc.ObjectId.__init__": [[11, 4, 2, "topwrap.model.misc.ObjectId", "obj", "Bases: Generic[_T]"]], "topwrap.model.misc.Parameter": [[11, 5, 1, 0, "default_value", "If a value for this parameter was not provided during elaboration, this default will be used."], [11, 5, 1, 0, "name", ""], [11, 5, 1, 0, "parent", ""]], "topwrap.model.misc.Parameter.__init__": [[11, 4, 2, "topwrap.model.misc.Parameter", "default_value", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.misc.Parameter", "name", "Bases: ModelBase"]], "topwrap.model.misc.QuerableView": [[11, 3, 1, 0, "find_by", ""], [11, 3, 1, 0, "find_by_name", ""], [11, 3, 1, 0, "find_by_name_or_error", ""]], "topwrap.model.misc.QuerableView.__init__": [[11, 4, 2, "topwrap.model.misc.QuerableView", "parts", "Bases: Sequence[_E]"]], "topwrap.model.misc.QuerableView.find_by": [[11, 4, 2, "topwrap.model.misc.QuerableView.find_by", "filter", ""]], "topwrap.model.misc.QuerableView.find_by_name": [[11, 4, 2, "topwrap.model.misc.QuerableView.find_by_name", "name", ""]], "topwrap.model.misc.QuerableView.find_by_name_or_error": [[11, 4, 2, "topwrap.model.misc.QuerableView.find_by_name_or_error", "name", ""]], "topwrap.model.misc.set_parent": [[11, 4, 2, "topwrap.model.misc.set_parent", "child", ""], [11, 4, 2, "topwrap.model.misc.set_parent", "parent", ""]], "topwrap.model.module": [[11, 2, 1, 0, "Module", "Bases: ModelBase"]], "topwrap.model.module.Module": [[11, 3, 1, 0, "add_interface", ""], [11, 3, 1, 0, "add_parameter", ""], [11, 3, 1, 0, "add_port", ""], [11, 3, 1, 0, "add_reference", ""], [11, 7, 1, 0, "design", "Returns the optional inner block design of this module"], [11, 3, 1, 0, "hierarchy", "Traverses the entire hierarchy tree of this module in order, using a BFS algorithm. Returns every unique module encountered on the way. The result also includes the current module."], [11, 5, 1, 0, "id", ""], [11, 7, 1, 0, "interfaces", ""], [11, 7, 1, 0, "ios", "Returns a combined view on both ports and interfaces"], [11, 3, 1, 0, "non_intf_ports", "Yield ports that don't realise signals of any interface"], [11, 7, 1, 0, "parameters", ""], [11, 7, 1, 0, "ports", ""], [11, 7, 1, 0, "refs", "Returns references to external files that define this module, if any. This information is generally added by the respective frontend used to parse this module."]], "topwrap.model.module.Module.__init__": [[11, 4, 2, "topwrap.model.module.Module", "design", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.module.Module", "id", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.module.Module", "interfaces", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.module.Module", "parameters", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.module.Module", "ports", "Bases: ModelBase"], [11, 4, 2, "topwrap.model.module.Module", "refs", "Bases: ModelBase"]], "topwrap.model.module.Module.add_interface": [[11, 4, 2, "topwrap.model.module.Module.add_interface", "interface", ""]], "topwrap.model.module.Module.add_parameter": [[11, 4, 2, "topwrap.model.module.Module.add_parameter", "parameter", ""]], "topwrap.model.module.Module.add_port": [[11, 4, 2, "topwrap.model.module.Module.add_port", "port", ""]], "topwrap.model.module.Module.add_reference": [[11, 4, 2, "topwrap.model.module.Module.add_reference", "ref", ""]], "topwrap.repo.repo": [[14, 2, 1, 0, "Repo", "Base class for implementing repositories. A repository is a container for resources of various types."]], "topwrap.repo.repo.Repo": [[14, 3, 1, 0, "add_files", "Parses resources available in files and adds them to the repository"], [14, 3, 1, 0, "add_resource", "Adds a single resource to the repository"], [14, 3, 1, 0, "get_resource", "Searches for resource with given type in repository"], [14, 3, 1, 0, "get_resources", "Implements the same operation as self.resources[type] but gives correct hints to the typechecker"], [14, 3, 1, 0, "load", "Loads repository from repo_path"], [14, 5, 1, 0, "name", "Name of the repository"], [14, 3, 1, 0, "remove_resource", "Removes a single resource from repository"], [14, 3, 1, 0, "save", "Saves repository to dest :raises ResourceNotSupportedException:"]], "topwrap.repo.repo.Repo.__init__": [[14, 4, 2, "topwrap.repo.repo.Repo", "name", "Base class for implementing repositories. A repository is a container for resources of various types."], [14, 4, 2, "topwrap.repo.repo.Repo", "resource_handlers", "Base class for implementing repositories. A repository is a container for resources of various types."]], "topwrap.repo.repo.Repo.add_files": [[14, 4, 2, 0, "exist_strategy", "What to do if resource exists in repo already"], [14, 4, 2, 0, "handler", "Handler that contains sources"]], "topwrap.repo.repo.Repo.add_resource": [[14, 4, 2, 0, "exist_strategy", "What to do if resource exists"], [14, 4, 2, 0, "resource", "Resource to add to repo"]], "topwrap.repo.repo.Repo.get_resource": [[14, 4, 2, "topwrap.repo.repo.Repo.get_resource", "name", "Searches for resource with given type in repository"], [14, 4, 2, "topwrap.repo.repo.Repo.get_resource", "resource_type", "Searches for resource with given type in repository"]], "topwrap.repo.repo.Repo.get_resources": [[14, 4, 2, "topwrap.repo.repo.Repo.get_resources", "type", "Implements the same operation as self.resources[type] but gives correct hints to the typechecker"]], "topwrap.repo.repo.Repo.load": [[14, 4, 2, "topwrap.repo.repo.Repo.load", "kwargs", "Loads repository from repo_path"], [14, 4, 2, "topwrap.repo.repo.Repo.load", "repo_path", "Loads repository from repo_path"]], "topwrap.repo.repo.Repo.remove_resource": [[14, 4, 2, 0, "resource", "Resource to remove from repo"]], "topwrap.repo.repo.Repo.save": [[14, 4, 2, "topwrap.repo.repo.Repo.save", "dest", "Saves repository to dest :raises ResourceNotSupportedException:"], [14, 4, 2, "topwrap.repo.repo.Repo.save", "kwargs", "Saves repository to dest :raises ResourceNotSupportedException:"]], "topwrap.repo.resource": [[14, 2, 1, 0, "FileHandler", "Base class for file handlers. A file handler is used to extract repository resources from a set of given files."], [14, 2, 1, 0, "Resource", "Base class for representing a resource in a repository. Each derived resource should define its own structure."], [14, 2, 1, 0, "ResourceHandler", "Base for classes that can perform various operations on resources of a given type."]], "topwrap.repo.resource.FileHandler": [[14, 3, 1, 0, "parse", "Parses a file to extract resources"]], "topwrap.repo.resource.FileHandler.__init__": [[14, 4, 2, "topwrap.repo.resource.FileHandler", "files", "Base class for file handlers. A file handler is used to extract repository resources from a set of given files."]], "topwrap.repo.resource.Resource": [[14, 5, 1, 0, "name", "Name of the resource"]], "topwrap.repo.resource.Resource.__init__": [[14, 4, 2, "topwrap.repo.resource.Resource", "name", "Base class for representing a resource in a repository. Each derived resource should define its own structure."]], "topwrap.repo.resource.ResourceHandler": [[14, 3, 1, 0, "add_resource", "Custom behavior for adding a resource to a loaded repository :raises ResourceExistsException: Resource already exists in the repository"], [14, 3, 1, 0, "load", "Loads list of resources from the repo_path repository"], [14, 3, 1, 0, "remove_resource", "Custom behavior for removing a resource from a loaded repository :raises ResourceNotFoundException: Could not find that resource"], [14, 5, 1, 0, "resource_type", "For which resource type this handler is responsible"], [14, 3, 1, 0, "save", "Saves a resource in the repo_path repository"]], "topwrap.repo.resource.ResourceHandler.add_resource": [[14, 4, 2, "topwrap.repo.resource.ResourceHandler.add_resource", "exists_strategy", "Custom behavior for adding a resource to a loaded repository :raises ResourceExistsException: Resource already exists in the repository"], [14, 4, 2, "topwrap.repo.resource.ResourceHandler.add_resource", "res", "Custom behavior for adding a resource to a loaded repository :raises ResourceExistsException: Resource already exists in the repository"], [14, 4, 2, "topwrap.repo.resource.ResourceHandler.add_resource", "resources", "Custom behavior for adding a resource to a loaded repository :raises ResourceExistsException: Resource already exists in the repository"]], "topwrap.repo.resource.ResourceHandler.load": [[14, 4, 2, "topwrap.repo.resource.ResourceHandler.load", "repo_path", "Loads list of resources from the repo_path repository"]], "topwrap.repo.resource.ResourceHandler.remove_resource": [[14, 4, 2, "topwrap.repo.resource.ResourceHandler.remove_resource", "res", "Custom behavior for removing a resource from a loaded repository :raises ResourceNotFoundException: Could not find that resource"], [14, 4, 2, "topwrap.repo.resource.ResourceHandler.remove_resource", "resources", "Custom behavior for removing a resource from a loaded repository :raises ResourceNotFoundException: Could not find that resource"]], "topwrap.repo.resource.ResourceHandler.save": [[14, 4, 2, "topwrap.repo.resource.ResourceHandler.save", "repo_path", "Saves a resource in the repo_path repository"], [14, 4, 2, "topwrap.repo.resource.ResourceHandler.save", "res", "Saves a resource in the repo_path repository"]]}, "objnames": {"0": ["py", "function", "Python function"], "1": ["py", "module", "Python module"], "2": ["py", "class", "Python class"], "3": ["py", "method", "Python method"], "4": ["py", "parameter", "Python parameter"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "property", "Python property"], "8": ["py", "exception", "Python exception"]}, "objtypes": {"0": "py:function", "1": "py:module", "2": "py:class", "3": "py:method", "4": "py:parameter", "5": "py:attribute", "6": "py:data", "7": "py:property", "8": "py:exception"}, "terms": {"": [0, 2, 3, 4, 5, 7, 10, 11, 12, 13, 16, 17, 18, 19, 20, 22, 23, 26], "0": [2, 3, 11, 12, 22], "0b101000": 0, "0x0": 13, "0x10000": 13, "0x28": 0, "0x4000000": 18, "1": [0, 2, 11, 12, 18, 21, 22], "10": [11, 17], "100": 11, "12": 2, "127": 11, "15": 11, "16": [3, 24], "180": 12, "2": [11, 12, 13, 18, 21], "2009": 12, "2014": 12, "2020": 18, "2022": 12, "23": 2, "2888": 12, "2mux": 12, "2mux_compressor": 12, "3": [2, 9, 11, 12, 13, 17, 18, 19, 21], "31": [2, 11, 12], "32": [2, 3, 11, 12, 24], "35": 2, "36": 2, "4": [0, 3, 12, 13], "40": 0, "5": 11, "50": 11, "51": 11, "600": 12, "63": [2, 11], "64": [2, 11, 12, 13, 18, 24], "7": [2, 11], "8": [0, 2, 3, 12, 24], "A": [0, 2, 3, 12, 14, 19, 21, 24, 26], "As": [0, 2, 6, 12, 17, 18, 25], "At": 22, "By": [19, 26], "For": [0, 1, 2, 11, 12, 14, 17, 18, 20, 22], "IN": 11, "If": [0, 2, 11, 12, 16, 19, 20, 22, 23, 26], "In": [2, 3, 6, 11, 12, 15, 18, 20, 22, 24], "It": [2, 3, 4, 6, 7, 8, 11, 12, 13, 15, 18, 19, 20, 23, 24, 25], "Its": 14, "Not": 12, "On": [12, 20, 23], "One": [3, 6], "The": [0, 1, 2, 3, 4, 5, 8, 11, 13, 14, 15, 17, 18, 19, 20, 22, 24, 25, 26], "Their": 18, "Then": [12, 22], "There": [3, 7, 11, 12, 13, 17, 22], "These": [2, 3, 6, 10, 18, 22], "To": [0, 2, 6, 7, 11, 12, 13, 16, 17, 18, 19, 20, 22, 26], "With": [0, 11, 20], "_arrayitemorfield": 11, "_connect": 11, "_e": 11, "_generatorcontextmanag": 4, "_ipar": 11, "_it": 7, "_manpar": 11, "_referencedio": 11, "_refio": 11, "_src": 11, "_subpar": 11, "_t": [7, 11], "_trg": 11, "abc": 11, "abc123": 26, "abil": 21, "abl": [6, 11], "about": [0, 3, 5, 6, 9, 11, 12, 18, 26], "abov": [2, 3, 11, 18], "absolut": 1, "abstract": [7, 11, 12, 14], "abstractiondefinit": 12, "abstractionref": 12, "abstractiontyp": 12, "accellera": 12, "accept": [12, 22], "access": [3, 4, 6, 9, 11, 12, 18, 24, 26], "accident": [0, 12], "accomplish": 25, "accord": 26, "accordingli": 18, "account": [12, 13], "across": 25, "act": 13, "action": [11, 16], "activ": [15, 23], "actual": [11, 12], "ad": [0, 2, 5, 6, 9, 11, 12, 14, 18, 21, 22], "add": [0, 2, 3, 5, 6, 7, 11, 12, 14, 18, 19, 20, 22, 26], "add_compon": 11, "add_connect": 11, "add_depend": 5, "add_external_ip": 5, "add_fil": 14, "add_interconnect": 11, "add_interfac": 11, "add_module_instance_to_design": 7, "add_paramet": 11, "add_port": 11, "add_refer": 11, "add_resourc": 14, "add_sign": 11, "add_sourc": 5, "add_sources_dir": 5, "adder": 13, "addit": [2, 5, 7, 11, 12, 21, 22], "addition": [0, 6, 12, 17, 19, 20, 22], "additional_metadata": 11, "addr": 11, "addr_width": [3, 24], "address": [2, 6, 9, 11, 12, 13, 18, 24], "addressoffset": 12, "addressspac": 12, "addressspaceref": 12, "addressunitbit": 12, "adhocconnect": 12, "adjust": 0, "advanc": [11, 21], "aforement": 11, "after": [12, 13, 16, 19, 22], "ahb": [11, 12, 22], "ahb_intf": 11, "ahb_sub": 11, "aim": [6, 11, 13], "algorithm": 11, "alia": [4, 10, 11], "all": [1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 20, 22, 26], "allow": [0, 2, 3, 6, 12, 13, 24], "allow_non": 11, "almost": 16, "along": 19, "alongsid": [11, 12], "alphanumer": 11, "alreadi": [11, 12, 14], "also": [2, 4, 6, 7, 11, 12, 13, 15, 16, 17, 18, 19, 22, 23, 26], "altern": [8, 16, 24], "alwai": [3, 7, 11, 20], "amba": 12, "amba4": 12, "among": 26, "amongst": 26, "amount": 12, "an": [0, 1, 2, 3, 5, 11, 12, 13, 14, 17, 18, 20, 22, 24, 25, 26], "ani": [2, 3, 7, 11, 12, 14, 19, 20, 24], "anonym": 13, "anoth": [2, 6, 11, 13], "another_repo": 1, "antmicro": [2, 12, 23, 26], "antmicro_axilib_axireflector": 26, "anyth": 11, "anywai": [12, 26], "anywher": 12, "api": [21, 25], "appear": [10, 26], "append": 19, "appli": [11, 22], "applic": [6, 26], "approach": [24, 25], "appropri": [0, 11], "apt": [18, 23], "ar": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 20, 22, 24, 26], "araddr": 11, "arbit": [6, 12, 24], "arbitrari": [11, 12, 26], "arbitrarili": [11, 13], "architectur": 12, "area": 6, "arg": 2, "arg1": 2, "arg2": 2, "arguabl": 12, "argument": [2, 22, 26], "arithmet": [0, 11, 12], "arm": 12, "around": 12, "arrai": [11, 13, 22, 26], "arriv": 13, "arrow": 18, "artifact": 26, "aspect": 12, "assert": 11, "assign": [0, 2, 11, 18, 22, 24], "associ": [11, 12, 14, 26], "assum": [2, 12, 19], "asymmetr": 12, "asynchron": [16, 18], "attach": 12, "attempt": 22, "attribut": 11, "autom": [6, 20, 21, 25], "automat": [0, 2, 6, 11, 12, 16, 17, 18, 20, 22, 25, 26], "avail": [6, 11, 12, 13, 14, 17, 19, 21, 23, 24, 26], "avoid": [12, 16, 17], "awaddr": [11, 22], "award": 11, "awkward": 12, "awlen": 22, "axi": [2, 6, 11, 12, 18, 22], "axi3": 2, "axi4": [0, 2, 12, 22], "axi4lit": 0, "axi4stream": [2, 12, 13], "axi4stream_rtl": 12, "axi_axil_adapt": 18, "axi_cdc": 22, "axi_data_width": 0, "axi_demux": 11, "axi_gp0": 18, "axi_pkg": 26, "axi_protocol_convert": 2, "axi_reflector": 26, "axi_reg": 26, "axibridg": 11, "axilit": 18, "axis_width_convert": 2, "axistream": 2, "b": [2, 11], "b00011111": 0, "b4": 12, "back": [18, 20], "backend": [6, 7, 18, 19, 21], "backendoutputinfo": 11, "bar": 20, "base": [0, 1, 3, 5, 7, 9, 11, 14, 18, 20, 22, 23, 24, 25], "baseaddress": 12, "becaus": [3, 12, 13], "becom": 12, "been": 23, "befor": [0, 11, 12, 17], "behav": 22, "behavior": [3, 7, 11, 14, 26], "behaviour": 12, "being": [11, 12, 22], "belong": [2, 11], "below": [0, 2, 3, 8, 11, 12, 20, 24], "benefit": [2, 11], "best": 22, "between": [0, 2, 11, 12, 20, 22, 24, 26], "beyond": 2, "bf": 11, "bid": 2, "bidirect": 18, "bin": [15, 23], "bit": [0, 2, 11, 12, 13, 18, 22, 24], "bitstream": [18, 21], "bitstruct": [11, 13], "black": [12, 18], "block": [11, 12, 18, 21, 25], "blueprint": 18, "board": 18, "bookworm": 23, "bool": [4, 11, 12], "boolean": [1, 8], "both": [2, 6, 11, 12, 13], "bottom": 12, "bound": [7, 11], "boundari": 11, "box": 12, "bracket": 2, "branch": 18, "brows": [17, 26], "browser": [8, 18, 20], "bsdextrautil": 18, "bte": 24, "btn": 13, "bu": [7, 11, 13, 21, 24], "buffer": 18, "build": [0, 2, 3, 5, 6, 8, 12, 13, 18, 21, 22, 25, 26], "built": [3, 26], "builtin": [2, 10, 12], "builtin_dir": 4, "bullsey": 23, "bundl": [5, 19], "busdefinit": 12, "buse": [6, 12], "businterfac": 12, "bustyp": 12, "button": [6, 13, 18, 20], "byte": 11, "c": [11, 20], "cach": 4, "call": [3, 11, 22], "callabl": 11, "camel": 11, "can": [0, 2, 3, 4, 5, 6, 7, 9, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 26], "candid": [11, 22], "cannot": [2, 3, 11, 12], "capabl": 3, "captur": 17, "case": [0, 2, 3, 6, 11, 12, 22], "cd": 18, "cdc_flag": 2, "center": 18, "certain": 12, "chang": [0, 4, 7, 12, 13, 15, 17, 19, 20], "chapter": [0, 2, 18, 20], "charact": [11, 12], "characterist": 24, "check": [2, 9, 11, 12, 16, 18, 21, 22, 23], "check_connection_to_subgraph_metanod": 3, "check_duplicate_metanode_nam": 3, "check_duplicate_node_nam": 3, "check_external_in_to_external_out_connect": 3, "check_nam": 3, "check_parameters_valu": 3, "check_port_to_multiple_external_metanod": 3, "check_unconnected_ports_interfac": 3, "check_unnamed_external_metanodes_with_multiple_conn": 3, "checkresult": [3, 21], "child": [11, 12], "chip": 19, "chosen": 26, "chunk": 24, "ci": 17, "circl": 18, "class": [3, 4, 5, 7, 9, 10, 12, 14, 21], "classic": 12, "classmethod": 11, "clearli": 11, "cli": [2, 11, 12, 17, 18, 20, 21, 25], "click": [3, 18, 20], "client": 6, "clk": [2, 7, 11, 13, 20], "clk_port_nam": 24, "clka": 2, "clkb": 2, "clock": [2, 11, 12, 22, 24], "clock_cross": 2, "clone": 11, "closest": 12, "co": 6, "code": [7, 11, 12, 15, 18, 19, 21], "codebas": [4, 12], "codespel": 16, "collect": [5, 11, 12, 13], "column": 11, "com": [2, 12, 23, 26], "combin": [1, 9, 11, 25], "combo": 12, "come": [2, 13, 26], "comma": 22, "command": [6, 11, 16, 21, 22, 26], "commit": [15, 21], "common": [3, 11, 12, 16, 22], "commun": 24, "comp": 11, "compar": 18, "compat": 23, "complementarili": 11, "complet": [1, 2, 12, 17], "complex": [2, 6, 11, 13, 18, 25], "complianc": 1, "compliant": 2, "complic": 6, "compon": [11, 18, 26], "componentinst": 12, "componentinstanceref": 12, "componentinstanti": 12, "comput": 11, "concaten": 11, "concept": [9, 12], "conclus": 21, "concret": [9, 11, 12, 14, 22, 26], "condit": 3, "config": [2, 16, 18, 21, 26], "configmanag": [4, 21], "configur": [2, 4, 11, 12, 13, 14, 20, 21, 24, 25], "conform": 12, "conjunct": 22, "connect": [0, 2, 6, 7, 9, 13, 18, 20, 21, 24, 26], "connections_with": 11, "consecut": 24, "consid": [3, 11, 22], "consider": [12, 13], "consist": [2, 3, 11, 13, 18, 20], "constant": [11, 13, 20, 21], "constantconnect": 11, "constantli": 13, "constraint": [18, 19], "construct": [11, 14, 21], "constructor": [4, 11], "contain": [1, 2, 3, 5, 7, 11, 12, 14, 18, 20, 22, 24, 26], "content": [0, 11], "context": [3, 11, 18], "contextlib": 4, "contribut": 23, "control": [2, 11, 13], "conveni": [6, 11], "convent": [2, 7, 11], "convers": [6, 12], "convert": [11, 12, 18, 24], "copi": [8, 11, 19, 20], "core": [0, 1, 2, 5, 8, 11, 12, 13, 18, 20, 21, 24], "core1": 18, "core2": 18, "core_path": 5, "cores_export": 26, "correct": [3, 7, 10, 14], "correctli": [11, 23], "correspond": [11, 22], "could": [6, 11, 12, 14, 20], "counter": 13, "cov": 17, "cover": [0, 17], "coverag": 21, "cpu": 13, "creat": [3, 4, 5, 6, 7, 11, 12, 13, 18, 21, 22, 24, 26], "creation": [2, 11, 12, 20, 25], "cross": [2, 24], "crossbar": 6, "css": 8, "cti": 24, "ctrl_i": 12, "cumbersom": [6, 11], "current": [0, 1, 2, 3, 6, 11, 12, 15, 16, 24], "custom": [1, 6, 11, 12, 14, 18, 24, 25, 26], "custom_cor": 11, "cycl": 12, "d": [0, 11, 18, 19], "dat_i": 12, "data": [11, 12, 13, 18, 21, 24], "data_kei": 11, "data_width": [2, 3, 24], "dataclass": [10, 11], "dataclassrepr": 11, "dataflow": [0, 3, 8, 11, 17], "dataflow_complex_hierarchi": 3, "dataflow_conn_subgraph_metanod": 3, "dataflow_duplicate_external_input_interfac": 3, "dataflow_duplicate_ip_nam": 3, "dataflow_duplicate_metanode_nam": 3, "dataflow_ext_in_to_ext_out_connect": 3, "dataflow_hier_duplicate_nam": 3, "dataflow_inouts_connect": 3, "dataflow_invalid_parameters_valu": 3, "dataflow_latest_sav": 0, "dataflow_ports_multiple_external_metanod": 3, "dataflow_subgraph_multiple_external_metanod": 3, "dataflow_unconn_hierarchi": 3, "dataflow_unnamed_metanod": 3, "dataflow_valid": 3, "dataflowvalid": [3, 21], "deactiv": 16, "debian": 23, "debounc": 13, "debug": 17, "decid": [12, 24], "declar": 20, "deduc": [2, 11], "deeper": [11, 21], "deepli": 12, "default": [0, 1, 2, 4, 5, 7, 8, 11, 12, 13, 16, 20, 21, 22, 26], "default_search_path": 4, "default_valu": 11, "defaultvalu": 12, "defin": [1, 2, 4, 10, 11, 12, 13, 14, 16, 20], "definit": [1, 2, 3, 11, 18, 21, 22], "demo": [18, 20], "demonstr": [13, 18], "depend": [5, 12, 15, 18, 23], "depth": 13, "deriv": 14, "descend": [2, 24], "describ": [0, 2, 3, 10, 11, 12, 18, 20, 22, 24, 26], "descript": [6, 11, 18, 20, 21, 24], "description_fil": 26, "design": [7, 13, 18, 19, 21, 24, 25, 26], "design_nam": [2, 19, 20], "desir": [0, 18, 26], "despit": 11, "dest": 14, "dest_width": 2, "destin": 22, "detail": [1, 2, 20], "determin": [2, 3, 4, 22], "develop": [12, 15, 23], "devic": 6, "diagram": [21, 24], "dict": [3, 4, 7, 9, 10, 11, 14], "dictionari": [1, 11], "didn": [13, 22], "differ": [1, 2, 4, 12, 14, 18, 25, 26], "differenti": [11, 12], "digit": 13, "dimens": 11, "dimension": 22, "direct": [2, 8, 11, 12, 18, 22, 24], "directconnect": 12, "directli": [3, 6, 8, 17, 23], "directori": [1, 2, 5, 8, 11, 12, 17, 18, 19, 20, 26], "disabl": 26, "discov": [11, 22], "discrep": 12, "disp0": 13, "displai": [0, 3, 13, 17, 18], "displaynam": 12, "disregard": 12, "distinct": 12, "distinguish": [3, 12], "distribut": 23, "dmatop": 5, "do": [0, 2, 3, 12, 14, 20, 23], "doc": [11, 21], "document": [8, 9, 12, 14], "doe": [5, 11, 20, 26], "doesn": [8, 11, 12, 14, 20], "domain": 24, "don": [2, 3, 7, 11, 12, 13, 14, 18], "done": [3, 12, 22], "doubl": 11, "down": 24, "download": [2, 26], "drag": 20, "drive": [13, 24], "dsp": [12, 13], "dst": 22, "dst_req_o": 22, "dst_resp_i": 22, "due": 12, "dump_default": 11, "dump_onli": 11, "duplic": 2, "dure": [0, 2, 3, 6, 11, 12, 20, 22], "dynam": 13, "e": [0, 1, 2, 3, 5, 6, 7, 11, 12, 15, 17, 19, 22, 24], "each": [0, 1, 2, 3, 7, 9, 11, 12, 13, 14, 16, 20, 22, 24, 26], "earlier": 4, "easi": 26, "easier": [20, 25], "easili": [6, 11, 12, 16, 18, 20], "edg": 3, "edit": [2, 3, 15, 18, 19], "editor": 20, "either": [2, 5, 8, 11, 12, 13, 17, 20, 22], "elabor": 11, "elaborat": 11, "elaboratablevalu": 11, "element": [3, 11, 12, 18, 22], "elf": 18, "emb": 8, "embed": 21, "empti": [7, 8, 13, 20, 22], "enabl": [2, 10, 18, 19, 24, 25, 26], "enclos": 11, "encod": [12, 13], "encount": 11, "end": [11, 12, 20, 26], "endinterfac": 11, "endmodul": 11, "enforc": [1, 12], "enhanc": 21, "enough": 12, "ensur": [0, 3, 20], "entir": [2, 11, 12, 18], "entri": [1, 3, 11, 12, 19, 26], "enum": 11, "environ": [12, 15, 16, 17, 23], "equal": [11, 22], "equival": [2, 11], "err": 24, "error": [3, 7, 11, 20], "error_count": 3, "error_messag": 11, "essenti": 20, "establish": 0, "etc": [2, 11, 12], "evalu": [0, 1, 3], "even": [12, 26], "everi": [2, 11, 12, 17, 24], "everyth": [3, 11, 17, 20], "exactli": 12, "exampl": [0, 3, 5, 7, 11, 14, 17, 18, 20, 21, 22, 26], "except": 11, "exchang": 11, "execut": [16, 21], "exemplari": 11, "exhaust": 12, "exist": [0, 2, 11, 12, 14, 17, 18, 26], "exist_strategi": 14, "exists_strategi": 14, "existsstrategi": 14, "exit": 18, "exp": 11, "expand": 26, "expect": [12, 18], "experiment": [6, 24], "explain": [2, 12], "explicit": [11, 12, 22], "explicitli": [12, 26], "explor": [11, 12, 13, 18], "export": [6, 26], "expos": [3, 11], "expr": 11, "express": [0, 2, 11, 12], "ext_clk_port_nam": 24, "ext_interface_nam": 2, "ext_manag": 13, "ext_port_nam": 2, "ext_pwm": 0, "ext_rst_port_nam": 24, "extend": 2, "extens": [11, 18, 26], "extern": [0, 2, 11, 13, 20, 24], "extract": [14, 26], "f": [12, 19, 20], "face": [11, 26], "facilit": [22, 24, 25], "fact": 12, "factori": [4, 10, 11], "fail": 3, "fallback": 1, "fals": [1, 4, 11, 12], "familiar": 20, "fatal": 11, "featur": [2, 3, 6, 13, 18, 21, 24], "few": 11, "field": [0, 2, 11, 12, 22], "field_nam": 11, "file": [0, 4, 5, 10, 11, 13, 14, 16, 18, 21, 25], "file_associ": 11, "filehandl": 14, "filenam": [5, 11], "filerefer": 11, "fileset": [12, 19], "filesystem": [2, 11], "filetyp": 12, "fill": 11, "filter": 11, "final": [5, 12, 20, 22], "find": [11, 14, 18, 22], "find_bi": 11, "find_by_nam": 11, "find_by_name_or_error": 11, "fine": 25, "first": [20, 22], "fit": 22, "fix": [0, 16], "flag": [2, 12, 16, 17, 19, 22, 26], "flatli": 12, "flatten": 11, "flip": [2, 13, 18], "float": 11, "flop": [13, 18], "flow": 21, "focu": 12, "follow": [0, 1, 2, 3, 4, 7, 11, 20, 22, 23, 24, 26], "forc": 17, "force_interface_compli": [1, 2, 4], "forget": 18, "form": [11, 22], "format": [0, 3, 10, 11, 13, 16, 20, 21, 22, 26], "formatt": 16, "forward": 12, "found": [0, 2, 5, 20, 22, 26], "four": [12, 13, 20], "fpga": [18, 21], "fragment": 12, "framework": 16, "free": 26, "frequent": 15, "from": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 26], "from_str": 11, "front": 11, "frontend": [9, 21, 26], "frontendmetadata": 11, "frontendparseexcept": 11, "frontendparsestrinput": 11, "fulfil": 11, "full": [6, 22], "fulli": [2, 11, 22], "fullscreen": 18, "function": [2, 3, 10, 11, 12, 17, 18, 23], "further": [11, 13, 20], "fuse": [5, 19, 20], "fuse_help": [5, 19], "fusesoc": [5, 6, 12, 21, 26], "fusesoc_workspac": 26, "fusesocbuild": [19, 21], "futur": [11, 13, 21, 22], "g": [0, 1, 2, 3, 6, 7, 11, 12, 17, 18, 19, 22], "gcc": 18, "gen2": 12, "gen2_gen_out_to_two_mux_gen2": 12, "gen_out": 12, "gener": [0, 2, 5, 6, 9, 11, 13, 17, 18, 21, 25], "get": [0, 2, 7, 11, 12, 19, 21, 26], "get_builtin": 10, "get_interface_by_nam": [10, 21], "get_nam": 7, "get_resourc": 14, "getting_started_demo": 20, "git": [16, 18, 23], "github": [4, 23, 26], "githubusercont": 2, "give": [7, 14], "given": [3, 5, 10, 11, 12, 14, 20, 24, 26], "global": [2, 4], "go": [13, 20, 22], "goal": 3, "good": 22, "gpio_io_i": 2, "granular": 24, "graph": [0, 8, 18, 20], "green": [0, 18], "group": [2, 11, 12, 15, 22], "grouping_hint": 11, "gui": [3, 21, 24, 25], "guid": [20, 23], "h0": 12, "h10000": 12, "h1f": 0, "h5a5a": 3, "ha": [2, 3, 6, 7, 9, 11, 12, 13, 18, 22, 23], "had": [11, 12], "haddr": 11, "hand": 12, "handl": [2, 11, 12], "handler": 14, "happen": [12, 24], "hardcod": [2, 13], "hardwar": 6, "has_independent_sign": 11, "has_sliced_sign": 11, "have": [0, 2, 3, 4, 6, 7, 9, 11, 12, 13, 14, 17, 19, 20, 22, 24, 26], "haven": 20, "hdl": [1, 2, 5, 7, 10, 12, 18, 19, 20, 21], "hdl_type": 11, "hdmi": 21, "head": 2, "header": 18, "height": 8, "help": [3, 7, 12, 23, 26], "henc": 3, "here": [0, 1, 2, 3, 5, 12, 20, 26], "hff": 12, "hffff": 12, "hi": [3, 18], "hier_nam": 2, "hierarch": [2, 18, 21], "hierarchi": [1, 6, 11, 12, 13, 20, 21], "hierarchy_nam": 2, "hierarchy_name_1": 2, "hierarchy_name_2": 2, "high": 18, "higher": [1, 4, 12, 22], "highest": 1, "hint": [11, 14, 22], "hoc": 12, "hold": 11, "home": 4, "hook": [5, 16, 19], "how": [2, 5, 9, 13, 18, 20, 21, 22], "howev": [2, 6, 12], "hresp": 11, "html": [17, 26], "htmlcov": 17, "htran": 11, "http": [2, 23, 26], "i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26], "ibuf": 18, "id": [11, 22], "id_width": 2, "ident": 2, "identifi": [2, 3, 11, 12, 22, 26], "ifac": 2, "ifram": 21, "ignor": [11, 17, 22], "illustr": 2, "imaginari": 13, "immedi": [15, 17], "imped": 18, "implement": [9, 11, 12, 14, 18, 20, 21], "impli": 12, "import": [3, 5, 6, 12, 18, 22], "importantli": 12, "imposs": [3, 12, 13], "improv": 21, "includ": [0, 2, 6, 11, 12, 15, 18, 19, 20, 22, 25, 26], "incom": [2, 11], "incompat": 12, "incorpor": 12, "independ": 21, "independent_sign": 11, "index": [11, 17], "indic": [0, 12], "individu": [11, 20], "infer": [12, 13, 20, 21], "infer_interfaces_from_modul": 11, "inform": [0, 1, 2, 3, 5, 6, 11, 12, 18, 23, 26], "inherit": 7, "init": 20, "initi": [12, 20, 24, 26], "initiatorref": 12, "inject": 2, "inner": [11, 12, 18], "inout": [0, 2, 11, 13, 21], "input": [0, 2, 3, 11, 12, 13, 18, 20, 22], "insid": [2, 3, 5, 12, 13, 18, 21], "instal": [13, 15, 16, 17, 18, 19, 20, 21], "instanc": [2, 3, 9, 11, 20], "instance_nam": 11, "instancenam": 3, "instanti": [11, 18], "instead": [3, 8, 11, 12, 22, 23], "int": [3, 11], "integ": [0, 2, 3], "integr": [21, 26], "inter": 18, "interact": [11, 18, 20], "interchang": 11, "intercon": 9, "interconnect": [2, 7, 18, 21], "interconnect1_nam": 24, "interconnect_": 7, "interconnect_typ": [9, 21, 24], "interconnectmanagerparam": [9, 11], "interconnectparam": [9, 11], "interconnectsubordinateparam": [9, 11], "interconnecttyp": 12, "interconnecttypeinfo": 9, "interfac": [0, 1, 7, 9, 14, 18, 20, 21, 24], "interface1_nam": 2, "interface2_nam": 2, "interface_nam": 2, "interfaceconnect": 11, "interfacedefinit": [10, 11, 21], "interfacedefinitionsign": 10, "interfaceinferenceopt": 11, "interfaceinst": 7, "interfacemappingerror": 11, "interfacemod": 11, "interfaceportgroup": 11, "interfaceportmap": 11, "interfaceportmappingdefinit": 11, "interfacesign": [7, 11], "interfacesignalconfigur": 11, "intern": [2, 3, 10, 12, 21, 25], "internalportrefer": 12, "interpret": [0, 2, 17], "intf_def": 11, "introduc": [6, 7, 12], "introduct": [20, 21], "invalid": [0, 2], "invoc": 22, "invok": [6, 17], "io": [11, 12, 13, 26], "iobuf": 18, "ip": [0, 1, 5, 6, 8, 11, 13, 18, 20, 21, 24], "ip1": 12, "ip1_instance_nam": 2, "ip1_nam": 2, "ip2": 12, "ip2_nam": 2, "ip_inst_nam": 2, "ip_instance_nam": 2, "ip_nam": [2, 24], "ipcor": [3, 18, 20], "ipcoredescript": 12, "ipxact": 12, "ipxactfil": 12, "ir": [11, 12, 13], "ir_exampl": [12, 13], "isaddress": 12, "isclock": 12, "isn": [7, 12, 14], "isreset": 12, "issu": [3, 6, 12], "item": 11, "iter": [11, 14], "its": [2, 7, 10, 11, 12, 13, 14, 18, 19, 24, 26], "itself": [11, 12, 13, 26], "j2": [5, 19], "jinja": 5, "jinja2": 5, "job": 16, "json": [0, 8, 11, 20], "just": [11, 12, 13], "k": 17, "keep": [15, 22], "keep_width": 2, "kei": [1, 2, 10, 11, 12, 13, 22, 24], "know": [11, 12], "known": 11, "kpm": [3, 11, 21], "kpm_build": 4, "kpm_build_loc": 4, "kpm_ifram": 8, "kpm_posit": 12, "kwarg": 14, "lack": 12, "land": 12, "languag": [12, 16], "lastli": 12, "later": [0, 12, 20], "latter": [1, 22], "launch": [6, 17], "layout": 26, "learn": [18, 26], "least": [12, 26], "left": [12, 18, 20], "legal": 13, "lengthi": [16, 17], "lenienc": 11, "less": 7, "let": 20, "level": [2, 3, 11, 12, 13, 18, 19, 21, 22, 25, 26], "leverag": [17, 25], "lfsr": [12, 13], "lfsr_gen": 12, "libdefault": [11, 22], "librari": [5, 11, 12, 17, 21, 22], "lift": 13, "lightweight": 11, "like": [0, 6, 11, 12, 13, 20, 22], "limit": [11, 12, 22], "line": [0, 6, 11, 17, 21, 22, 24], "link": 18, "lint": 21, "linter": 16, "list": [3, 4, 5, 7, 11, 14, 17, 22, 23, 24], "lite": 2, "litex": 18, "litex_pwm_top": 0, "ll": 12, "load": [0, 1, 2, 4, 8, 10, 14, 18, 20, 21], "load_default": 11, "load_onli": 11, "local": [4, 13, 17, 19, 26], "locat": [0, 2, 11, 12, 17, 19, 21], "lock": 24, "logic": [11, 12, 22, 25], "logicalnam": 12, "logicalport": 12, "logicarrai": 11, "logicbitselect": 11, "logicfieldselect": 11, "logicselect": 11, "longint": 12, "look": [0, 2, 11, 12, 22], "lookup": 21, "loss": 12, "lost": 0, "lower": [1, 11, 22], "lower_limit": 2, "lowest": 1, "m": [15, 17, 23], "m_axi": [2, 22], "m_axi_1": 2, "m_axi_awaddr": 22, "m_axi_awlen": 22, "m_axi_bid": 2, "m_axis_tdata": 2, "m_axis_tdest": 2, "m_axis_tid": 2, "m_axis_tkeep": 2, "m_axis_tlast": 2, "m_axis_treadi": 2, "m_axis_tus": 2, "m_axis_tvalid": 2, "mai": [0, 3, 11, 12, 19, 22, 23], "main": [2, 3, 6, 12, 13, 14], "mainli": 12, "maintain": 16, "major": 11, "make": [0, 3, 5, 7, 11, 12, 13, 18, 20, 23, 25, 26], "make_referenced_port": 11, "makefil": 6, "man": 24, "man_param": 9, "manag": [2, 4, 7, 9, 11, 12, 13, 16, 19, 21, 22, 24, 26], "manager0": 12, "manager1_interface1_nam": 24, "manager1_nam": 24, "mandatori": 12, "mani": [3, 9, 11, 12, 24], "manual": [6, 17, 20], "map": [9, 12, 18, 20, 21], "map_interfaces_to_modul": 11, "mark": [12, 18], "marshmallow": 11, "marshmallow_dataclass": 10, "marshmallowdataclassextens": 11, "master": [12, 13], "match": [0, 2, 10, 11, 22], "math": 2, "mclk": 22, "mean": [2, 11, 12, 15, 19], "meant": 3, "mechan": 6, "meet": 3, "mem": [12, 13], "member": 22, "memori": [11, 13, 18], "mention": 12, "menu": [18, 20], "merg": [11, 22], "messag": 3, "messagetyp": 3, "metadata": 11, "metanod": [0, 18, 20], "method": [7, 11, 26], "middl": 24, "might": [11, 22], "min_group_s": 11, "min_signal_count": 11, "mind": 22, "minimum": 11, "misc": 11, "miscellan": 21, "miss": [3, 11, 20], "mistak": 16, "mode": [2, 11, 12, 13, 15, 22], "model": [9, 11, 12], "modelbas": 11, "modif": 11, "modifi": [0, 11, 18, 19], "modul": [0, 2, 7, 12, 13, 18, 20, 21, 22, 26], "modular": 25, "module_inst": 7, "moduleins": 7, "moduleinsatnc": 7, "moduleinst": [7, 11], "moduleparamet": 12, "moment": 24, "more": [0, 1, 2, 3, 11, 12, 13, 18, 19, 20, 22, 23, 26], "moreov": 12, "most": [6, 11, 12], "mostli": 12, "mrstn": 22, "mst_reqs_o": 11, "much": 12, "multi": 16, "multidimension": [11, 13], "multipl": [1, 2, 9, 11, 20, 22, 24, 25, 26], "multiplex": 13, "must": [1, 2, 3, 11, 12, 18, 19, 22, 24, 26], "my_directori": 2, "my_repo": [1, 2, 20], "my_repo_nam": 20, "n": [2, 11], "name": [0, 1, 2, 5, 7, 9, 10, 11, 13, 14, 20, 22, 26], "name_of_repo": 1, "namespac": 12, "narrow": 24, "nativ": 12, "natur": [2, 11], "navig": 18, "necessari": [2, 11, 12, 20, 23, 26], "necessarili": 12, "need": [2, 6, 7, 9, 11, 12, 13, 16, 18, 19, 20, 22], "nest": [2, 12, 18, 26], "nested_hierarchy_nam": 2, "new": [7, 9, 11, 13, 18, 22, 26], "newli": 20, "next": 11, "ninja": 18, "node": [0, 6, 8, 18, 20], "nois": 12, "non": [13, 22], "non_intf_port": 11, "none": [2, 3, 4, 5, 10, 11, 12, 14], "normal": 2, "note": [2, 12, 13, 21], "notelaboratedexcept": 11, "notion": 12, "now": [11, 12, 16, 20], "nox": [15, 17, 21, 26], "npm": 23, "number": [2, 3, 11, 13, 19], "o": [2, 18, 22], "obj": 11, "object": [4, 6, 10, 11, 12, 22], "objectid": 11, "observ": 21, "obtain": 6, "obuf": 18, "occur": [3, 11], "off": 2, "offer": 26, "offici": 12, "often": 12, "ok": 3, "old1": [11, 22], "old2": [11, 22], "oldn": [11, 22], "omit": [2, 22], "one": [0, 1, 2, 3, 6, 8, 9, 11, 12, 13, 20, 22, 24, 26], "ones": [13, 22], "oniniti": 12, "onli": [0, 2, 3, 6, 8, 11, 12, 13, 17, 18, 20, 22, 24], "ontarget": 12, "onto": 11, "onward": 12, "op": 11, "open": 21, "opencor": 12, "openfpgaload": 18, "oper": [11, 14, 18], "oppos": 24, "optim": 6, "option": [2, 8, 11, 12, 13, 15, 17, 18, 20, 21, 22, 24, 25, 26], "optional_match_scor": 11, "optional_missing_scor": 11, "order": [2, 4, 11, 12, 15, 18, 20, 24, 26], "org": 12, "organ": [6, 25], "origin": [12, 22], "other": [2, 3, 11, 18, 19, 20, 21, 23, 24, 26], "other_port_nam": 2, "our": [3, 6, 11, 12, 13, 20], "out": [2, 3, 11, 12, 18, 20, 23, 26], "out_width": 12, "output": [0, 3, 11, 13, 17, 18, 20, 22], "output_c": 20, "output_i": 20, "outsid": [3, 12, 26], "over": 24, "overlap": 11, "overrid": [1, 7, 18, 22], "overridden": [1, 2, 5, 7], "oversight": 3, "overview": [2, 21], "overwrit": 4, "own": [2, 7, 12, 13, 14, 26], "p": [17, 19], "pack": [11, 12], "packag": [1, 2, 5, 6, 12, 14, 15, 19, 21, 25, 26], "package_cor": 26, "page": [0, 2, 12, 20], "pair": [2, 11, 12], "param": [9, 11, 13], "paramet": [0, 2, 5, 6, 7, 8, 9, 11, 13, 14, 18, 19, 20, 22], "parameter": 22, "parameterid": 12, "parameters_nam": 2, "parameters_name1": 24, "parameters_valu": 2, "parameters_value1": 24, "paramout_width": 12, "paramwidth": 12, "parent": [2, 11, 13], "pars": [1, 10, 11, 13, 14, 20, 21, 22, 25], "parse_fil": 11, "parse_grouping_hint": 11, "parse_str": 11, "part": [2, 5, 11, 19, 20, 22], "partial": 13, "particular": [11, 17], "particularli": 22, "partselect": 12, "pass": [4, 7, 13, 17, 19], "path": [1, 4, 5, 11, 14, 18, 19, 21, 26], "path_to_repo": 1, "pattern": 11, "pdf": 8, "penalti": 11, "per": 24, "perform": [10, 11, 14, 16, 17, 22], "peripher": 6, "perspect": [2, 12], "physic": [2, 12, 13, 18], "physicalport": 12, "pick": [2, 12], "pin": 18, "pip": [15, 18, 23], "pipx": 23, "place": [2, 9], "placehold": 11, "plain": [11, 12], "plainli": 12, "plan": 21, "platform": [11, 22], "point": [0, 11], "popular": 6, "port": [0, 7, 13, 18, 20, 22, 24], "port1": 12, "port1_nam": 2, "port2_external_equival": 2, "port2_nam": 2, "port_nam": 2, "port_prefix": [2, 10], "portconnect": 11, "portdirect": 11, "portref": 12, "portrefer": 12, "portselector": 11, "portselectorfield": 11, "portselectorop": 11, "posit": [2, 6], "possibl": [2, 3, 8, 11, 12, 18, 21, 24, 25], "possibli": 11, "potenti": [3, 6, 11, 12], "practic": 18, "pre": [6, 12, 15, 21], "pre_commit": 16, "preced": [4, 21, 22], "predefin": [2, 11, 12, 24], "prefer": 18, "prefix": [11, 12, 22], "prefix_consider_camel_cas": 11, "prefix_length_scor": 11, "prefix_split_token": 11, "premad": 6, "prepackag": 18, "presenc": 12, "present": [1, 3, 5, 7, 11, 12, 13, 14, 18], "preserv": [6, 12], "pretti": 12, "prevent": [0, 3], "preview": 18, "previou": [2, 13, 20], "previous": [12, 13, 20], "print": [23, 26], "prioriti": 4, "probabl": 12, "problem": [11, 16], "proc": 13, "proceed": 0, "process": [2, 3, 11, 13, 16, 18, 19, 21, 22, 25, 26], "processor": [6, 13, 18], "produc": [21, 22], "program": 21, "project": [0, 2, 5, 16, 19, 20, 21, 23, 25, 26], "prone": 7, "proper": 6, "properli": 11, "properti": [3, 8, 11, 12], "proportion": 11, "prove": 12, "provid": [0, 1, 8, 11, 17, 20, 21, 25], "proxi": 11, "pseudorandom": 13, "public": 11, "publicli": 12, "pulp": [11, 22], "pure": [11, 12], "purpos": [3, 12, 13, 17, 20], "push": 17, "put": [6, 11], "pwm": [0, 21], "py": 17, "pyenv": 17, "pyproject": [2, 15], "pytest": 17, "python": [10, 13, 15, 16, 17, 23, 25], "python3": 23, "qualifi": 12, "qualnam": 11, "querableview": 11, "quickli": 6, "r": [16, 17, 18], "r0p0_1": 12, "rais": [11, 12, 14], "ran": 17, "rang": [2, 9, 11, 12, 24, 26], "range_s": 24, "rank": 22, "raw": [2, 12], "rdata": 11, "re": [2, 11, 14, 19], "read": [4, 9], "readili": 26, "real": 13, "realis": [11, 12], "realiti": 11, "realiz": [11, 13, 22], "reason": 11, "receiv": [12, 13], "receiver_0": 12, "receiver_0_noise_to_tiedvalu": 12, "recogn": [5, 12], "recognis": 26, "recommend": [0, 15, 17, 23, 26], "recreat": 21, "recurs": [2, 22, 26], "red": 0, "reduc": 11, "ref": [2, 11], "refer": [1, 9, 11, 12, 21], "referenc": [2, 3, 11, 12, 26], "referenced_interfac": 7, "referencedinterfac": [7, 11], "referencedport": 11, "reflect": [11, 23], "refresh": 0, "regardless": 3, "regex": [2, 12], "regexp": 11, "regist": [13, 18], "regular": [11, 12, 23], "rel": 2, "relat": [2, 6, 11, 17], "relationship": 11, "relationshiperror": 11, "releas": 6, "reli": 6, "reliabl": 12, "remot": 2, "remov": 14, "remove_resourc": 14, "renam": 20, "renod": 6, "repetit": 12, "replac": [1, 11], "repo": [1, 2, 12, 14, 18, 20, 22], "repo_dir": 26, "repo_nam": 26, "repo_path": [14, 26], "report": 17, "repositori": [1, 2, 4, 6, 12, 18, 21, 22, 25], "repr": 11, "repres": [2, 3, 7, 8, 9, 11, 12, 13, 14, 18, 20, 26], "represent": [12, 18, 21], "req_i": 22, "request": 24, "requir": [2, 6, 11, 12, 15, 17, 18, 19, 20, 21], "required_match_scor": 11, "required_missing_scor": 11, "reset": [2, 11, 12, 18, 22, 24], "resolv": [3, 11, 12], "resourc": [1, 5, 8, 14, 21], "resource_field": 4, "resource_handl": 14, "resource_path": 2, "resource_typ": 14, "resourceexistsexcept": 14, "resourcehandl": 14, "resourcenotfoundexcept": 14, "resourcenotsupportedexcept": 14, "resourcereferencehandl": 4, "resourcetyp": 14, "resp_o": 22, "respect": [2, 11, 12, 22], "respons": 14, "restor": 6, "result": [0, 6, 11, 18, 22], "retain": 6, "retriev": 10, "return": [3, 7, 10, 11, 14], "reus": [6, 16, 17, 18, 25], "reusabl": 26, "revers": [11, 12], "review": 0, "revolv": 12, "right": [12, 20], "risc": [13, 18], "riscv64": 18, "rnd_bit": 13, "rng": 13, "robin": [6, 13], "role": 12, "root": 19, "round": [6, 13], "rout": [9, 11, 24], "router": 12, "rst": [2, 7, 13, 20], "rst_port_nam": 24, "rtl": [12, 19, 26], "rty": 24, "ruff": 16, "run": [1, 3, 13, 15, 16, 17, 18, 19, 20, 26], "runtim": 11, "runtimeerror": 11, "s_axi": 2, "s_axis_tdata": 2, "s_axis_tdest": 2, "s_axis_tid": 2, "s_axis_tkeep": 2, "s_axis_tlast": 2, "s_axis_treadi": 2, "s_axis_tus": 2, "s_axis_tvalid": 2, "same": [0, 2, 3, 7, 11, 12, 14, 16, 20, 22], "sampl": [1, 17, 21, 26], "sanit": 12, "saniti": 12, "save": [0, 3, 11, 14, 18, 20, 22, 26], "schema": [3, 4, 10, 11, 12, 13], "scheme_arg": 2, "scheme_path": 2, "score": [11, 22], "score_lower_limit": 11, "script": [5, 6], "search": [4, 14, 19], "search_path": 4, "second": [2, 22], "section": [2, 12, 13, 18, 20, 24], "see": [2, 11, 12, 13, 17, 18, 20, 24, 26], "seemingli": 12, "seen": [3, 20], "segment": 12, "sel": 11, "sel_gen": 13, "select": [0, 2, 3, 11, 13, 17, 20, 22, 26], "selector": 22, "self": [7, 9, 11, 14, 26], "semi": 6, "separ": [2, 11, 12, 22, 26], "sequenc": [4, 11], "seri": 3, "serial": 11, "serv": [24, 26], "server": 0, "session": [16, 17], "set": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 14, 15, 18, 19, 20], "set_par": 11, "setup": [16, 18, 21, 23], "share": [11, 22], "shell": [16, 23], "short": 11, "shortcut": 11, "should": [0, 2, 3, 6, 8, 11, 12, 13, 14, 18, 22, 23, 26], "show": [18, 24], "showcas": [13, 18], "shown": [0, 2, 18, 24], "side": [11, 12, 13], "sidebar": 8, "sign": 22, "signal": [2, 7, 10, 12, 13, 18, 21, 22, 24], "sim": [13, 18], "similar": [11, 16], "similarli": [11, 12, 13], "simpl": [5, 20, 21], "simple_core_1": 20, "simple_core_2": 20, "simplest": 12, "simpli": 20, "simplifi": [16, 26], "simul": [6, 13, 18], "simultan": 2, "sinc": [3, 6, 12, 22, 26], "singl": [3, 11, 12, 14, 22, 24, 26], "singular": 12, "situat": 11, "size": [9, 11, 24], "skip": 20, "slave": 12, "slice": [12, 13, 21, 22], "sliced_sign": 11, "small": 18, "smaller": [11, 22], "smallest": 24, "snapshot": 20, "snickerdoodl": 18, "so": [0, 2, 3, 6, 9, 11, 12, 13, 18, 20], "soc": [6, 21], "some": [2, 3, 6, 11, 12, 13], "some_field": [11, 22], "some_ip_cor": 22, "some_librari": 22, "some_port": 22, "some_vendor": 22, "someth": [12, 13, 19], "somewher": [11, 26], "sourc": [2, 5, 8, 10, 11, 12, 14, 15, 18, 19, 21, 23], "sources_dir": 5, "space": [9, 11, 12], "spec": 8, "special": 12, "specif": [0, 1, 2, 4, 7, 9, 11, 12, 13, 17, 18, 19, 24, 26], "specifi": [0, 1, 2, 3, 4, 5, 6, 8, 11, 12, 15, 17, 18, 19, 20, 22, 24, 26], "spell": 16, "sphinx": 8, "spirit": 12, "split": 11, "squar": 2, "src": [22, 26], "src_req_i": 22, "src_resp_o": 22, "srcs_v": 19, "srcs_vhd": 19, "stall": 24, "standalon": 12, "standard": [13, 25], "start": [0, 8, 11, 12, 18, 21], "start_address": 24, "state": 18, "static": 10, "statu": 3, "step": [20, 22, 23], "still": [11, 13], "store": [4, 5, 6, 11, 12, 14, 22, 26], "str": [3, 4, 5, 7, 9, 10, 11, 14], "straight": 20, "straightforward": 25, "stream": [2, 12], "streamer": 13, "stress": 3, "string": [8, 11, 12, 23], "struct": [11, 22], "structfield": 11, "structur": [0, 2, 10, 11, 14, 18, 22], "style": [15, 21], "sub_param": 9, "subclass": [7, 11], "subcommand": 23, "subdirectori": [18, 22, 26], "subgraph": [2, 18], "subject": 11, "subordin": [2, 6, 7, 9, 11, 12, 13, 22, 24], "subordinate1_interface1_nam": 24, "subordinate1_nam": 24, "subscrib": 11, "subsequ": 2, "success": [3, 16], "successfulli": [0, 3], "sudo": 18, "suffer": 12, "suffix": [2, 18], "suggest": 11, "suitabl": 19, "sum": 13, "summari": 17, "superset": 12, "suppli": [2, 6, 11, 12, 19, 26], "support": [2, 5, 7, 11, 12, 13, 14, 17, 20, 21, 22], "suppos": 8, "sure": [3, 13, 23], "sv": [7, 11, 26], "svfile": 7, "svg": 18, "svp": 26, "switch": 18, "synchron": 18, "syntax": [12, 13, 21, 22, 26], "synthesi": [5, 6, 21], "synthesiz": [2, 18, 25], "system": [7, 13, 18, 21, 26], "systemverilog": [7, 11, 12, 21, 22, 26], "systemverilogbackend": 7, "systemveriloggener": 7, "t": [2, 3, 5, 7, 8, 11, 12, 13, 14, 18, 20, 22, 23], "tag": 12, "take": [1, 4, 12, 13, 22], "taken": [2, 12, 13], "target": [11, 12, 18, 19], "target_0": 12, "target_1": 12, "tcl": 5, "tdata": [2, 12], "tdest": 2, "templat": [5, 12, 21], "template_nam": 5, "temporari": 2, "term": 12, "termin": 6, "terminologi": 11, "test": [6, 13, 15, 16, 21, 23], "test_interconnect": 17, "test_nam": 17, "test_path": 17, "testkpmspecificationbackend": 17, "tests_build": 17, "tests_in_env": 17, "text": [11, 16], "textbox": 0, "than": [2, 3, 11, 12, 13, 19, 26], "thank": 20, "thei": [0, 2, 5, 6, 11, 12, 13, 18, 20, 22], "them": [2, 3, 9, 11, 12, 13, 14, 18, 19, 20, 22, 24, 25, 26], "themselv": 6, "theoret": 12, "therefor": [3, 6], "thereof": 22, "thi": [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 26], "thing": 12, "those": 2, "though": [11, 12, 13], "three": 3, "through": [6, 11, 20, 26], "throughout": 4, "thu": [11, 12], "tid": 2, "tiedvalu": 12, "tilelink": 6, "time": [12, 13, 17, 22, 24, 26], "tkeep": 2, "tlast": 2, "togeth": [6, 9, 11, 12, 22], "toggl": 20, "token": 11, "toml": [2, 15], "too": 18, "tool": [2, 5, 12, 21, 25], "toolchain": [13, 18], "top": [0, 2, 5, 11, 12, 13, 18, 19, 21, 22, 25, 26], "top_level_nam": 26, "top_nam": 5, "toplevel": 2, "topologi": [9, 11, 24], "topwrap": [0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 22, 24], "tradit": 24, "transact": [9, 11, 24], "transfer": [12, 24], "transit": 25, "translat": [11, 12, 18], "translationerror": 11, "transmiss": 24, "transmit": 0, "transmitt": [2, 12], "transmitter_lib": 12, "transpar": 11, "transparentbridg": 12, "travers": 11, "treadi": [2, 12], "tree": 11, "tri": 3, "tricki": 12, "trigger": 16, "trivial": 12, "true": [1, 11, 12], "try": 11, "tstrb": 2, "tune": 25, "tupl": 11, "turn": 2, "tuser": 2, "tvalid": 2, "twakeup": 2, "two": [2, 11, 12, 13, 18, 20, 22, 26], "two_mux": 12, "txt": [2, 18], "type": [0, 1, 2, 3, 5, 7, 9, 10, 12, 13, 14, 18, 21, 22], "typecheck": [10, 14], "typic": 24, "u": 13, "uart": [13, 18], "unaffect": 22, "undefin": 3, "under": [11, 12, 15, 18, 19, 20, 24, 26], "unexpos": 3, "unifi": [9, 11], "uninstal": 16, "uniqu": [2, 11], "unit": 24, "unknown": 18, "unlik": [12, 13], "unmatch": 11, "unmatched_port_penalty_leni": 11, "unrecognis": 12, "unrel": 12, "unspecifi": 11, "up": [11, 12, 15, 24], "updat": [0, 21, 26], "update_test_data": 17, "upon": 0, "upper": [2, 11], "upper_limit": 2, "uri": 8, "url": 2, "us": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 25], "usabl": 6, "usag": [12, 13, 21], "user": [0, 1, 2, 3, 6, 11, 12, 14, 17, 18, 21, 25, 26], "user_repo": 14, "user_repositori": [18, 26], "user_width": 2, "userrepo": 14, "usual": [2, 22], "utf": 12, "util": 20, "v": [5, 12, 13, 18, 20, 21], "val": 11, "valid": [0, 10, 11, 17, 20, 21], "validate_kpm_design": 3, "valu": [0, 1, 2, 4, 8, 10, 11, 12, 13, 18, 20, 22, 24], "vari": 12, "variabl": [4, 13], "variablenam": 11, "variant": 11, "varieti": 18, "variou": [0, 3, 11, 14, 25, 26], "vector": [0, 11, 12, 13], "vendor": [11, 22], "vendorextens": 12, "venv": [15, 23], "veri": 12, "verif": 2, "verifi": [12, 18, 21], "veril": [6, 13, 18], "verilog": [0, 3, 5, 6, 7, 11, 12, 13, 21], "verilog_generators_map": 7, "verilogsourc": [5, 12], "versa": 11, "version": [8, 17, 18], "vhdl": [5, 11, 21], "via": [3, 22], "vice": 11, "video": 18, "view": 11, "viewport": 18, "virtual": [16, 17, 23], "visibl": [3, 8, 12, 15, 18, 20], "visual": [6, 18, 20], "vivado": [5, 6, 12, 18, 19], "vlnv": [5, 11], "wa": [2, 3, 11, 12, 13, 20, 23], "wai": [2, 11, 20, 21, 22], "want": [11, 13, 23], "warn": 3, "waveform": 18, "wdata": 11, "we": [0, 3, 6, 11, 12, 13, 20], "well": [12, 18, 26], "were": [12, 17], "what": [7, 12, 14, 22], "when": [0, 1, 2, 3, 6, 7, 11, 14, 15, 17, 19, 20, 22, 26], "whenev": 11, "where": [0, 2, 5, 10, 11, 12, 13, 17, 20, 23], "whether": [2, 3, 8, 11], "which": [0, 1, 2, 3, 4, 11, 12, 13, 14, 15, 16, 18, 19, 22, 24, 26], "while": [0, 3, 6, 11, 12, 13, 18, 23], "whitespac": 22, "whole": 3, "why": 3, "wide": [2, 11, 26], "wider": 24, "width": [0, 3, 11, 13, 24], "wip": 11, "wire": [11, 12, 13, 18], "wish": 16, "wishbon": [2, 6, 11, 12, 13, 18], "wishbone_interconnect1": 12, "wishbone_passthrough": 12, "wishboneinterconnect": 7, "wishbonerrsystemveriloggener": 7, "within": [0, 2, 3, 18, 22, 26], "without": [2, 12, 17, 18], "won": 5, "word": 24, "work": [1, 5, 19], "world": 12, "worst": 22, "would": [6, 11, 12, 13, 22], "wrap": 7, "wrapper": [12, 19, 20, 21, 22], "write": 6, "written": [0, 11], "x": 12, "xact": 21, "xc7z020clg400": 19, "xdc": [5, 18], "xdg_data_hom": 0, "xml": 12, "xslt": 12, "xsltproc": 12, "y": [12, 20, 23], "yaml": [1, 2, 3, 5, 9, 10, 11, 12, 13, 16, 18, 19, 20, 21], "yet": [0, 13, 20], "yield": 11, "yml": [11, 18], "yosi": 23, "you": [0, 2, 11, 12, 16, 17, 18, 19, 20, 22, 23, 24, 26], "your": [7, 19, 23, 26], "z": [18, 20], "zvb": 18, "zynq": 18}, "titles": ["Advanced options", "Configuration", "Creating a design", "Validation of design", "Config", "FuseSocBuilder", "Future planned enhancements in Topwrap", "Generator", "Using KPM iframes inside docs", "Interconnect", "Interface Definition", "Internal Representation", "IP-XACT format", "Examples for Internal Representation", "Repository", "Setup", "Code style", "Tests", "Sample projects", "Using FuseSoC for automation", "Getting started", "Welcome to Topwrap!", "Interface mapping and inference", "Installing Topwrap", "Interconnect generation", "Introduction to Topwrap", "Constructing, configuring and loading repositories"], "titleterms": {"": [6, 21], "1": 23, "2": 23, "3": 23, "A": 11, "The": 12, "abil": 6, "ad": 20, "addit": 19, "advanc": [0, 13], "alt": 8, "api": [7, 11, 14], "assign": 12, "autom": 19, "avail": [1, 2], "backend": 11, "base": 12, "between": 3, "bitstream": 19, "block": [0, 6], "bu": [6, 12], "build": [19, 20], "catalog": 12, "check": 3, "class": 11, "cli": 26, "code": 16, "command": 20, "commit": 16, "complex": 3, "complianc": 2, "compon": 12, "conclus": 12, "config": [1, 4], "configur": [1, 26], "connect": [3, 11, 12], "constant": [12, 18], "construct": 26, "core": [3, 6, 19, 26], "coverag": 17, "creat": [0, 2, 20], "custom": 8, "data": 17, "deduct": 12, "deeper": 6, "default": 19, "definit": [10, 12, 26], "descript": [2, 12, 26], "design": [0, 2, 3, 6, 11, 12, 20], "develop": 21, "diagram": 11, "doc": 8, "document": 21, "dualiti": 12, "duplic": 3, "dynam": 12, "embed": 18, "enhanc": 6, "exampl": [1, 2, 12, 13], "execut": 17, "extens": 12, "extern": [3, 12], "featur": 12, "file": [1, 2, 6, 8, 12, 19, 20, 22, 26], "flow": 20, "format": [2, 12, 24], "fpga": 19, "from": 6, "frontend": 11, "fusesoc": [19, 20], "fusesocbuild": 5, "futur": 6, "gener": [7, 12, 19, 20, 24], "get": 20, "graph": 3, "gui": [0, 6, 18, 20], "guid": 21, "hdl": [6, 11], "hdmi": 18, "hierarch": [6, 12, 13], "hierarchi": [2, 3, 18], "how": 7, "ifram": 8, "implement": 7, "import": 20, "improv": 6, "independ": 11, "infer": [11, 22], "info": 12, "init": 26, "inout": [3, 12, 18], "insid": 8, "instal": 23, "instanc": 12, "instanti": 12, "integr": 6, "interconnect": [9, 11, 12, 13, 24], "interfac": [2, 3, 10, 11, 12, 13, 22, 26], "intern": [11, 13], "introduct": 25, "invalid": 3, "ip": [2, 3, 12, 26], "known": 24, "kpm": [8, 17], "level": 6, "librari": [6, 26], "limit": 24, "line": 20, "lint": 16, "list": 26, "load": 26, "local": 8, "locat": 1, "lookup": 7, "manag": 6, "map": [7, 11, 22, 26], "merg": 1, "metanod": 3, "miscellan": 11, "mode": 8, "modul": 11, "multipl": [3, 12], "name": [3, 12], "node": 3, "note": 11, "nox": 16, "number": 12, "observ": 12, "open": [6, 8, 26], "option": [0, 1, 19], "other": [6, 12, 13], "overview": 20, "packag": 23, "paramet": [3, 12, 24], "parameter": 2, "pars": [6, 26], "pass": 12, "path": 2, "plan": 6, "port": [2, 3, 11, 12, 26], "portmap": 12, "possibl": 6, "pre": 16, "preced": 1, "preview": 8, "process": 6, "produc": 6, "program": 19, "project": 18, "provid": 6, "pwm": 18, "recreat": 6, "refer": [7, 14, 26], "remot": 8, "repo": 26, "repositori": [14, 20, 26], "represent": [11, 13], "requir": 23, "resourc": [2, 26], "robin": 24, "round": 24, "sampl": 18, "scheme": 2, "selector": 11, "set": 12, "setup": 15, "signal": 11, "simpl": [12, 13], "slice": [2, 11], "soc": [13, 18], "sourc": [6, 20, 26], "specif": 8, "start": 20, "strategi": 1, "structur": 12, "style": 16, "subgraph": 3, "support": [6, 24, 26], "syntax": 2, "synthesi": [19, 20], "system": 23, "systemverilog": 6, "templat": 19, "test": [3, 8, 17], "text": 8, "tool": [6, 16, 19], "top": [6, 20], "topwrap": [6, 20, 21, 23, 25, 26], "two": 3, "type": [11, 24, 26], "unconnect": 3, "unnam": 3, "updat": 17, "us": [8, 19, 26], "usag": [8, 18], "user": 23, "v": 11, "valid": 3, "valu": 3, "variabl": 12, "vendor": 12, "verifi": 23, "verilog": 20, "version": 12, "vhdl": 6, "vlnv": 12, "wai": 6, "welcom": 21, "width": [2, 12], "wishbon": 24, "wrapper": 6, "xact": 12, "yaml": [6, 26]}})